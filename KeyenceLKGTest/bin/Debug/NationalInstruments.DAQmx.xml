<doc>
  <assembly ninamespaces="NationalInstruments.DAQmx">
    <name>NationalInstruments.DAQmx</name>
  </assembly>
  <members>
    <member name="T:NationalInstruments.DAQmx.Channel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Channel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents a channel or a set of channels and the properties you can set on a channel.</summary>
<threadsafety safety="safe" />
<remarks>
<see cref="T:NationalInstruments.DAQmx.Channel" /> is the base class for <see cref="T:NationalInstruments.DAQmx.AIChannel" />, <see cref="T:NationalInstruments.DAQmx.AOChannel" />, <see cref="T:NationalInstruments.DAQmx.DIChannel" />, <see cref="T:NationalInstruments.DAQmx.DOChannel" />, <see cref="T:NationalInstruments.DAQmx.CIChannel" />, and <see cref="T:NationalInstruments.DAQmx.COChannel" />. All instances of <see cref="T:NationalInstruments.DAQmx.Channel" /> are of one of the derived class types. Refer to the derived class documentation for more information.
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Channel.VirtualName" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="VirtualName" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Gets the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/virtChanTypes.html');">virtual channel</see>.</summary>
<value>A <see cref="T:System.String" /> that represents the name of the virtual channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Channel.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Channel.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Channel.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Channel.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.Channel" />.</summary>
<remarks>Use this method only if the application you create runs on a low memory system.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Channel.IsGlobal" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsGlobal" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Indicates whether the channel is a global channel.</summary>
<value>A <see cref="T:System.Boolean" /> value that indicates whether the channel is a global channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Channel.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.Channel.MSeriesLegacyCompatibility" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MSeriesLegacyCompatibility" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.Channel.Type" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Type" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ChannelType">
      <summary>Indicates the <see href="javascript:launchSharedHelp('mxcncpts.chm::/virtChanTypes.html');">type</see> of the virtual channel.</summary>
<value>Indicates the <see href="javascript:launchSharedHelp('mxcncpts.chm::/virtChanTypes.html');">type</see> of the virtual channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Channel.PhysicalName" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PhysicalName" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">name</see> of the physical channel upon which this virtual channel is based.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">name</see> of the physical channel upon which this virtual channel is based.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Channel.Description" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Description" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies a user-defined description for the channel.</summary>
<value>Specifies a user-defined description for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AIChannel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AIChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates one or more analog input virtual channels and the properties for an analog input virtual channel.</summary>
<threadsafety safety="safe" />
<remarks>
Use the <see cref="P:NationalInstruments.DAQmx.Task.AIChannels" /> property to create or access an analog input virtual channel. An <see cref="T:NationalInstruments.DAQmx.AIChannel" /> might contain more than one virtual channel because the <see cref="T:NationalInstruments.DAQmx.AIChannel" /> is defined by providing a valid NI-DAQmx channel string to the <see cref="P:NationalInstruments.DAQmx.Task.AIChannels" /> indexer or to an <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" /> create virtual channel method. If you set a property on an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> object that represents multiple virtual channels, that property is set for all of the virtual channels that the object represents.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.AIChannelCollection" />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.PerformBridgeOffsetNullingCalibration" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PerformBridgeOffsetNullingCalibration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Performs a bridge offset nulling calibration on the virtual channels in the task. An error will occur if not all virtual channels in the task support this operation.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This method adjusts the <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeBalanceCoarsePot" />,  <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeBalanceFinePot" />, and <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" /> properties to eliminate voltage offset in the virtual channel. If the acquisition device does not have a built-in potentiometer, only the initial bridge voltage attribute is adjusted. 
</para>
<para>
The task must not be reserved, committed, or started. All virtual channel configurations must be complete prior to calling this method. The physical channel must remain in the state at which you expect to read 0 V from the bridge while the method executes.

</para>
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationExpirationDate" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CalibrationExpirationDate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.DateTime">
      <summary>Gets or sets the date and time that the channel calibration expires.</summary>
<value>The date and time that the channel calibration expires.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationDate" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CalibrationDate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.DateTime">
      <summary>Gets or sets the last date and time that the channel underwent a channel calibration.</summary>
<value>The last date and time that the channel underwent a channel calibration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.PerformBridgeOffsetNullingCalibration(System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PerformBridgeOffsetNullingCalibration" nihasget="0" nihasset="0" niparameters="skipUnsupportedChannels" niparametertypes="System.Boolean" nireturnvaluetype="System.Void">
      <summary>Performs a bridge offset nulling calibration on the virtual channels in the task.</summary>
<param name="skipUnsupportedChannels">Specifies whether or not to skip channels that do not support shunt calibration. If <paramref name="skipUnsupportedChannels" /> is <see langword="true" />, shunt calibration will be performed only on supported virtual channels in the task. If <see langword="false" />, shunt calibration will be performed on all virtual channels in the task, which may result in an error if not all channels support shunt calibration.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This method adjusts the <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeBalanceCoarsePot" />,  <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeBalanceFinePot" />, and <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" /> properties to eliminate voltage offset in the virtual channel. If the acquisition device does not have a built-in potentiometer, only the initial bridge voltage attribute is adjusted. 
</para>
<para>
The task must not be reserved, committed, or started. All virtual channel configurations must be complete prior to calling this method. The physical channel must remain in the state at which you expect to read 0 V from the bridge while the method executes.

</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.PerformStrainShuntCalibration(System.Double,NationalInstruments.DAQmx.ShuntElementLocation,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PerformStrainShuntCalibration" nihasget="0" nihasset="0" niparameters="shuntResistorValue,shuntResistorLocation,skipUnsupportedChannels" niparametertypes="System.Double,NationalInstruments.DAQmx.ShuntElementLocation,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Performs shunt calibration for the virtual channels in the task using a strain gage sensor.</summary>
<param name="shuntResistorValue">Specifies the shunt resistance, in ohms.</param>
<param name="shuntResistorLocation">Specifies the location of the shunt resistor.</param>
<param name="skipUnsupportedChannels">Specifies whether or not to skip channels that do not support shunt calibration. If <paramref name="skipUnsupportedChannels" /> is <see langword="true" />, shunt calibration will be performed only on supported virtual channels in the task. If <see langword="false" />, shunt calibration will be performed on all virtual channels in the task, which may result in an error if not all channels support shunt calibration.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.PerformStrainShuntCalibration(System.Double,NationalInstruments.DAQmx.ShuntElementLocation)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PerformStrainShuntCalibration" nihasget="0" nihasset="0" niparameters="shuntResistorValue,shuntResistorLocation" niparametertypes="System.Double,NationalInstruments.DAQmx.ShuntElementLocation" nireturnvaluetype="System.Void">
      <summary>Performs shunt calibration for the virtual channels in the task using a strain gage sensor. An error will occur if not all virtual channels in the task support this operation.</summary>
<param name="shuntResistorValue">Specifies the shunt resistance, in ohms.</param>
<param name="shuntResistorLocation">Specifies the location of the shunt resistor.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.PerformBridgeShuntCalibration(System.Double,NationalInstruments.DAQmx.ShuntElementLocation,System.Double,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PerformBridgeShuntCalibration" nihasget="0" nihasset="0" niparameters="shuntResistorValue,shuntResistorLocation,bridgeResistance,skipUnsupportedChannels" niparametertypes="System.Double,NationalInstruments.DAQmx.ShuntElementLocation,System.Double,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Performs shunt calibration for the virtual channels in the task using a bridge sensor.</summary>
<param name="shuntResistorValue">Specifies the shunt resistance, in ohms.</param>
<param name="shuntResistorLocation">Specifies the location of the shunt resistor.</param>
<param name="bridgeResistance">Specifies the bridge resistance, in ohms.</param>
<param name="skipUnsupportedChannels">Specifies whether or not to skip channels that do not support shunt calibration. If <paramref name="skipUnsupportedChannels" /> is <see langword="true" />, shunt calibration will be performed only on supported virtual channels in the task. If <see langword="false" />, shunt calibration will be performed on all virtual channels in the task, which may result in an error if not all channels support shunt calibration.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.PerformBridgeShuntCalibration(System.Double,NationalInstruments.DAQmx.ShuntElementLocation,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PerformBridgeShuntCalibration" nihasget="0" nihasset="0" niparameters="shuntResistorValue,shuntResistorLocation,bridgeResistance" niparametertypes="System.Double,NationalInstruments.DAQmx.ShuntElementLocation,System.Double" nireturnvaluetype="System.Void">
      <summary>Performs shunt calibration for the virtual channels in the task using a bridge sensor. An error will occur if not all virtual channels in the task support this operation.</summary>
<param name="shuntResistorValue">Specifies the shunt resistance, in ohms.</param>
<param name="shuntResistorLocation">Specifies the location of the shunt resistor.</param>
<param name="bridgeResistance">Specifies the bridge resistance, in ohms.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.PerformThermocoupleLeadOffsetNullingCalibration(System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PerformThermocoupleLeadOffsetNullingCalibration" nihasget="0" nihasset="0" niparameters="skipUnsupportedChannels" niparametertypes="System.Boolean" nireturnvaluetype="System.Void">
      <summary>Performs thermocouple lead offset nulling calibration on the channels in the task to compensate for offsets introduced by open thermocouple detection. Use this method to specify whether or not to skip channels that do not support calibration.

</summary>
<param name="skipUnsupportedChannels">Specifies whether or not to skip channels that do not support calibration. If <paramref name="skipUnsupportedChannels" /> is <see langword="true" />, calibration will be performed only on supported virtual channels in the task. If <see langword="false" />, calibration will be performed on all virtual channels in the task, which may result in an error if not all channels support calibration. </param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Keep the measured temperature as constant as possible while performing this adjustment.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannel.PerformThermocoupleLeadOffsetNullingCalibration" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PerformThermocoupleLeadOffsetNullingCalibration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Performs thermocouple lead offset nulling calibration on the channels in the task to compensate for offsets introduced by open thermocouple detection. An error will occur if not all virtual channels in the task support this operation.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Keep the measured temperature as constant as possible while performing this adjustment.
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.Maximum" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Maximum" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/limitSettings.html')">maximum value</see> you expect to measure. This value is in the units you specify with a units property. When you query this property, it returns the <see href="javascript:launchSharedHelp('mxcncpts.chm::/inputlimitcoercion.html')">coerced</see> maximum value that the device can measure with the current settings.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/limitSettings.html')">maximum value</see> you expect to measure. This value is in the units you specify with a units property. When you query this property, it returns the <see href="javascript:launchSharedHelp('mxcncpts.chm::/inputlimitcoercion.html')">coerced</see> maximum value that the device can measure with the current settings.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.Minimum" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Minimum" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/limitSettings.html')">minimum value</see> you expect to measure. This value is in the units you specify with a units property.  When you query this property, it returns the <see href="javascript:launchSharedHelp('mxcncpts.chm::/inputlimitcoercion.html')">coerced</see> minimum value that the device can measure with the current settings.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/limitSettings.html')">minimum value</see> you expect to measure. This value is in the units you specify with a units property.  When you query this property, it returns the <see href="javascript:launchSharedHelp('mxcncpts.chm::/inputlimitcoercion.html')">coerced</see> minimum value that the device can measure with the current settings.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CustomScaleName" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CustomScaleName" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> for the channel.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.MeasurementType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="MeasurementType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIMeasurementType">
      <summary>Indicates the measurement to take with the analog input channel and in some cases, such as for temperature measurements, the sensor to use.</summary>
<value>Indicates the measurement to take with the analog input channel and in some cases, such as for temperature measurements, the sensor to use.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.VoltageUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="VoltageUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIVoltageUnits">
      <summary>Specifies the units to use to return voltage measurements from the channel.</summary>
<value>Specifies the units to use to return voltage measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.VoltageDecibelReference" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="VoltageDecibelReference" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the decibel reference level in the units of the channel. When you read samples as a waveform, the decibel reference level is included in the waveform attributes.</summary>
<value>Specifies the decibel reference level in the units of the channel. When you read samples as a waveform, the decibel reference level is included in the waveform attributes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.VoltageAcrmsUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="VoltageAcrmsUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIVoltageAcrmsUnits">
      <summary>Specifies the units to use to return voltage RMS measurements from the channel.</summary>
<value>Specifies the units to use to return voltage RMS measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.TemperatureUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="TemperatureUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AITemperatureUnits">
      <summary>Specifies the units to use to return temperature measurements from the channel.</summary>
<value>Specifies the units to use to return temperature measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermocoupleType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIThermocoupleType">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/thermocouples.html');">type</see> of thermocouple connected to the channel. Thermocouple types differ in composition and measurement range.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/thermocouples.html');">type</see> of thermocouple connected to the channel. Thermocouple types differ in composition and measurement range.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleScaleType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermocoupleScaleType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIThermocoupleScaleType">
      <summary>Specifies the method or equation form that the thermocouple scale uses.</summary>
<value>Specifies the method or equation form that the thermocouple scale uses.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleCjcSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermocoupleCjcSource" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIThermocoupleCjcSource">
      <summary>Indicates the source of <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold-junction compensation</see>.</summary>
<value>Indicates the source of <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold-junction compensation</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleCjcValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermocoupleCjcValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the temperature of the <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold junction</see> if <see cref="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleCjcSource" /> is <see cref="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.ConstantValue" />. Specify this value in the units of the measurement.</summary>
<value>Specifies the temperature of the <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold junction</see> if <see cref="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleCjcSource" /> is <see cref="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.ConstantValue" />. Specify this value in the units of the measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleCjcChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermocoupleCjcChannel" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the channel that acquires the temperature of the <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold junction</see> if <see cref="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleCjcSource" /> is <see cref="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.Channel" />. If the channel is a temperature channel, NI-DAQmx acquires the temperature in the correct units. Other channel types, such as a resistance channel with a custom sensor, must use a custom scale to scale values to degrees Celsius.</summary>
<value>Indicates the channel that acquires the temperature of the <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold junction</see> if <see cref="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleCjcSource" /> is <see cref="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.Channel" />. If the channel is a temperature channel, NI-DAQmx acquires the temperature in the correct units. Other channel types, such as a resistance channel with a custom sensor, must use a custom scale to scale values to degrees Celsius.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RtdType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RtdType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIRtdType">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/rtd.html');">type</see> of RTD connected to the channel.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/rtd.html');">type</see> of RTD connected to the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RtdR0" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RtdR0" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the sensor resistance at 0 deg C. The <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see> requires this value. Refer to the sensor documentation to determine this value.</summary>
<value>Specifies in ohms the sensor resistance at 0 deg C. The <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see> requires this value. Refer to the sensor documentation to determine this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RtdA" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RtdA" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the 'A' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see>. NI-DAQmx requires this value when you use a custom RTD.</summary>
<value>Specifies the 'A' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see>. NI-DAQmx requires this value when you use a custom RTD.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RtdB" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RtdB" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the 'B' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see>. NI-DAQmx requires this value when you use a custom RTD.</summary>
<value>Specifies the 'B' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see>. NI-DAQmx requires this value when you use a custom RTD.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RtdC" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RtdC" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the 'C' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see>. NI-DAQmx requires this value when you use a custom RTD.</summary>
<value>Specifies the 'C' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see>. NI-DAQmx requires this value when you use a custom RTD.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermistorA" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermistorA" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the 'A' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/thermistors.html');">Steinhart-Hart thermistor equation</see>.</summary>
<value>Specifies the 'A' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/thermistors.html');">Steinhart-Hart thermistor equation</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermistorB" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermistorB" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the 'B' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/thermistors.html');">Steinhart-Hart thermistor equation</see>.</summary>
<value>Specifies the 'B' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/thermistors.html');">Steinhart-Hart thermistor equation</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermistorC" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermistorC" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the 'C' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/thermistors.html');">Steinhart-Hart thermistor equation</see>.</summary>
<value>Specifies the 'C' constant of the <see href="javascript:launchSharedHelp('measfunds.chm::/thermistors.html');">Steinhart-Hart thermistor equation</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermistorR1" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ThermistorR1" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the value of the reference resistor for the <see href="javascript:launchSharedHelp('measfunds.chm::/thermistors.html');">thermistor</see> if you use voltage excitation. NI-DAQmx ignores this value for current excitation.</summary>
<value>Specifies in ohms the value of the reference resistor for the <see href="javascript:launchSharedHelp('measfunds.chm::/thermistors.html');">thermistor</see> if you use voltage excitation. NI-DAQmx ignores this value for current excitation.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ForceReadFromChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ForceReadFromChannel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to read from the channel if it is a <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold-junction compensation</see> channel. By default, reading from the task does not return data from cold-junction compensation channels.  Setting this property to <see langword="true" /> forces read operations to return the cold-junction compensation channel data with the other channels in the task.</summary>
<value>Specifies whether to read from the channel if it is a <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold-junction compensation</see> channel. By default, reading from the task does not return data from cold-junction compensation channels.  Setting this property to <see langword="true" /> forces read operations to return the cold-junction compensation channel data with the other channels in the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CurrentUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CurrentUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AICurrentUnits">
      <summary>Specifies the units to use to return current measurements from the channel.</summary>
<value>Specifies the units to use to return current measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CurrentAcrmsUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CurrentAcrmsUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AICurrentAcrmsUnits">
      <summary>Specifies the units to use to return current RMS measurements from the channel.</summary>
<value>Specifies the units to use to return current RMS measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.StrainUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="StrainUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIStrainUnits">
      <summary>Specifies the units to use to return strain measurements from the channel.</summary>
<value>Specifies the units to use to return strain measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ForceReadFromStrainChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ForceReadFromStrainChannel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether the data is returned by reading from the task when set on a raw strain channel that is part of a rosette configuration.</summary>
<value>Specifies whether the data is returned by reading from the task when set on a raw strain channel that is part of a rosette configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.StrainGageGageFactor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="StrainGageGageFactor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sensitivity of the strain gage.  Gage factor relates the change in electrical resistance to the change in strain. Refer to the sensor documentation for this value.</summary>
<value>Specifies the sensitivity of the strain gage.  Gage factor relates the change in electrical resistance to the change in strain. Refer to the sensor documentation for this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.StrainGagePoissonRatio" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="StrainGagePoissonRatio" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the ratio of lateral strain to axial strain in the material you are measuring.</summary>
<value>Specifies the ratio of lateral strain to axial strain in the material you are measuring.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.StrainGageConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="StrainGageConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIStrainGageConfiguration">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeConfig.html');">bridge configuration</see> of the strain gages.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeConfig.html');">bridge configuration</see> of the strain gages.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RosetteType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RosetteType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIRosetteType">
      <summary>Indicates the type of rosette gage.</summary>
<value>Indicates the type of rosette gage.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RosetteStrainGageOrientation" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RosetteStrainGageOrientation" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies gage orientation in degrees with respect to the X axis.</summary>
<value>Specifies gage orientation in degrees with respect to the X axis.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RosetteStrainChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RosetteStrainChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the raw strain channels that comprise the strain rosette.</summary>
<value>Indicates the raw strain channels that comprise the strain rosette.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RosetteMeasurementType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RosetteMeasurementType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIRosetteMeasurementType">
      <summary>Specifies the type of rosette measurement.</summary>
<value>Specifies the type of rosette measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ResistanceUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ResistanceUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIResistanceUnits">
      <summary>Specifies the units to use to return resistance measurements.</summary>
<value>Specifies the units to use to return resistance measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.FrequencyUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="FrequencyUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIFrequencyUnits">
      <summary>Specifies the units to use to return frequency measurements from the channel.</summary>
<value>Specifies the units to use to return frequency measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.FrequencyThresholdVoltage" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="FrequencyThresholdVoltage" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the voltage level at which to recognize waveform repetitions. You should select a voltage level that occurs only once within the entire period of a waveform. You also can select a voltage that occurs only once while the voltage rises or falls.</summary>
<value>Specifies the voltage level at which to recognize waveform repetitions. You should select a voltage level that occurs only once within the entire period of a waveform. You also can select a voltage that occurs only once while the voltage rises or falls.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.FrequencyHysteresis" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="FrequencyHysteresis" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in volts a window below <see cref="P:NationalInstruments.DAQmx.AIChannel.FrequencyThresholdVoltage" />. The input voltage must pass below <see cref="P:NationalInstruments.DAQmx.AIChannel.FrequencyThresholdVoltage" /> minus this value before NI-DAQmx recognizes a waveform repetition at <see cref="P:NationalInstruments.DAQmx.AIChannel.FrequencyThresholdVoltage" />. Hysteresis can improve the measurement accuracy when the signal contains noise or jitter.</summary>
<value>Specifies in volts a window below <see cref="P:NationalInstruments.DAQmx.AIChannel.FrequencyThresholdVoltage" />. The input voltage must pass below <see cref="P:NationalInstruments.DAQmx.AIChannel.FrequencyThresholdVoltage" /> minus this value before NI-DAQmx recognizes a waveform repetition at <see cref="P:NationalInstruments.DAQmx.AIChannel.FrequencyThresholdVoltage" />. Hysteresis can improve the measurement accuracy when the signal contains noise or jitter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LvdtUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="LvdtUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AILvdtUnits">
      <summary>Specifies the units to use to return linear position measurements from the channel.</summary>
<value>Specifies the units to use to return linear position measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="LvdtSensitivity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/LVDTs.html');">LVDT</see>. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivityUnits" />. Refer to the sensor documentation to determine this value.</summary>
<value>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/LVDTs.html');">LVDT</see>. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivityUnits" />. Refer to the sensor documentation to determine this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivityUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="LvdtSensitivityUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AILvdtSensitivityUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivity" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivity" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RvdtUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RvdtUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIRvdtUnits">
      <summary>Specifies the units to use to return angular position measurements from the channel.</summary>
<value>Specifies the units to use to return angular position measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RvdtSensitivity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/RVDTs.html');">RVDT</see>. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivityUnits" />. Refer to the sensor documentation to determine this value.</summary>
<value>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/RVDTs.html');">RVDT</see>. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivityUnits" />. Refer to the sensor documentation to determine this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivityUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RvdtSensitivityUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIRvdtSensitivityUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivity" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivity" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="EddyCurrentProximityProbeUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIEddyCurrentProximityProbeUnits">
      <summary>Specifies the units to use to return proximity measurements from the channel.</summary>
<value>Specifies the units to use to return proximity measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="EddyCurrentProximityProbeSensitivity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/EddyCurrentProximityProbe.html');">eddy current proximity probe</see> . This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivityUnits" />. Refer to the sensor documentation to determine this value.</summary>
<value>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/EddyCurrentProximityProbe.html');">eddy current proximity probe</see> . This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivityUnits" />. Refer to the sensor documentation to determine this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivityUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="EddyCurrentProximityProbeSensitivityUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIEddyCurrentProximityProbeSensitivityUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivity" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivity" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.MaximumSoundPressureLevel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="MaximumSoundPressureLevel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the maximum instantaneous sound pressure level you expect to measure. This value is in decibels, referenced to 20 micropascals. NI-DAQmx uses the maximum sound pressure level to calculate values in pascals for <see cref="P:NationalInstruments.DAQmx.AIChannel.Maximum" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.Minimum" /> for the channel.</summary>
<value>Specifies the maximum instantaneous sound pressure level you expect to measure. This value is in decibels, referenced to 20 micropascals. NI-DAQmx uses the maximum sound pressure level to calculate values in pascals for <see cref="P:NationalInstruments.DAQmx.AIChannel.Maximum" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.Minimum" /> for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.SoundPressureUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SoundPressureUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AISoundPressureUnits">
      <summary>Specifies the units to use to return sound pressure measurements from the channel.</summary>
<value>Specifies the units to use to return sound pressure measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.SoundPressureDecibelReference" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SoundPressureDecibelReference" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the decibel reference level in the units of the channel. When you read samples as a waveform, the decibel reference level is included in the waveform attributes. NI-DAQmx also uses the decibel reference level when converting <see cref="P:NationalInstruments.DAQmx.AIChannel.MaximumSoundPressureLevel" /> to a voltage level.</summary>
<value>Specifies the decibel reference level in the units of the channel. When you read samples as a waveform, the decibel reference level is included in the waveform attributes. NI-DAQmx also uses the decibel reference level when converting <see cref="P:NationalInstruments.DAQmx.AIChannel.MaximumSoundPressureLevel" /> to a voltage level.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.MicrophoneSensitivity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="MicrophoneSensitivity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/microphones.html');">microphone</see>. This value is in mV/Pa. Refer to the sensor documentation to determine this value.</summary>
<value>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/microphones.html');">microphone</see>. This value is in mV/Pa. Refer to the sensor documentation to determine this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.AccelerationUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AccelerationUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIAccelerationUnits">
      <summary>Specifies the units to use to return acceleration measurements from the channel.</summary>
<value>Specifies the units to use to return acceleration measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.AccelerationDecibelReference" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AccelerationDecibelReference" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the decibel reference level in the units of the channel. When you read samples as a waveform, the decibel reference level is included in the waveform attributes.</summary>
<value>Specifies the decibel reference level in the units of the channel. When you read samples as a waveform, the decibel reference level is included in the waveform attributes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AccelerometerSensitivity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/Accelerometers.html');">accelerometer</see>. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivityUnits" />. Refer to the sensor documentation to determine this value.</summary>
<value>Specifies the sensitivity of the <see href="javascript:launchSharedHelp('measfunds.chm::/Accelerometers.html');">accelerometer</see>. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivityUnits" />. Refer to the sensor documentation to determine this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivityUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AccelerometerSensitivityUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIAccelerometerSensitivityUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivity" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivity" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.VelocityUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="VelocityUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIVelocityUnits">
      <summary>Specifies in which unit to return velocity measurements from the channel.</summary>
<value>Specifies in which unit to return velocity measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorDecibelReference" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="VelocityIepeSensorDecibelReference" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the decibel reference level in the units of the channel. When you read samples as a waveform, the decibel reference level is included in the waveform attributes.</summary>
<value>Specifies the decibel reference level in the units of the channel. When you read samples as a waveform, the decibel reference level is included in the waveform attributes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="VelocityIepeSensorSensitivity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sensitivity of the IEPE velocity sensor connected to the channel. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivityUnits" />.</summary>
<value>Specifies the sensitivity of the IEPE velocity sensor connected to the channel. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivityUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivityUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="VelocityIepeSensorSensitivityUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIVelocityIepeSensorSensitivityUnits">
      <summary>Specifies the units for <see cref="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivity" />.</summary>
<value>Specifies the units for <see cref="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivity" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ForceUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ForceUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIForceUnits">
      <summary>Specifies in which unit to return force or load measurements from the channel.</summary>
<value>Specifies in which unit to return force or load measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ForceIepeSensorSensitivity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sensitivity of the IEPE force sensor connected to the channel. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivityUnits" />.</summary>
<value>Specifies the sensitivity of the IEPE force sensor connected to the channel. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivityUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivityUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ForceIepeSensorSensitivityUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIForceIepeSensorSensitivityUnits">
      <summary>Specifies the units for <see cref="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivity" />.</summary>
<value>Specifies the units for <see cref="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivity" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.PressureUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="PressureUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIPressureUnits">
      <summary>Specifies  in which unit to return pressure measurements from the channel.</summary>
<value>Specifies  in which unit to return pressure measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.TorqueUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="TorqueUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AITorqueUnits">
      <summary>Specifies in which unit to return torque measurements from the channel.</summary>
<value>Specifies in which unit to return torque measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgeUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIBridgeUnits">
      <summary>Specifies in which unit to return <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScaling.html')">voltage ratios</see> from the channel.</summary>
<value>Specifies in which unit to return <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScaling.html')">voltage ratios</see> from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeElectricalUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgeElectricalUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIBridgeElectricalUnits">
      <summary>Specifies from which electrical unit to scale data. Select  the same unit that the sensor data sheet or calibration certificate uses for electrical values.</summary>
<value>Specifies from which electrical unit to scale data. Select  the same unit that the sensor data sheet or calibration certificate uses for electrical values.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgePhysicalUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgePhysicalUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIBridgePhysicalUnits">
      <summary>Specifies to which physical unit to scale electrical data. Select the same unit that the sensor data sheet or calibration certificate uses for physical values.</summary>
<value>Specifies to which physical unit to scale electrical data. Select the same unit that the sensor data sheet or calibration certificate uses for physical values.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeScaleType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgeScaleType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIBridgeScaleType">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScalingTypes.html')">scaling type</see> to use when scaling electrical values from the sensor to physical units.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScalingTypes.html')">scaling type</see> to use when scaling electrical values from the sensor to physical units.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearFirstElectricalValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgeTwoPointLinearFirstElectricalValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the first electrical value, corresponding to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearFirstPhysicalValue" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeElectricalUnits" />.</summary>
<value>Specifies the first electrical value, corresponding to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearFirstPhysicalValue" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeElectricalUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearFirstPhysicalValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgeTwoPointLinearFirstPhysicalValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the first physical value, corresponding to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearFirstElectricalValue" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgePhysicalUnits" />.</summary>
<value>Specifies the first physical value, corresponding to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearFirstElectricalValue" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgePhysicalUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearSecondElectricalValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgeTwoPointLinearSecondElectricalValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the second electrical value, corresponding to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearSecondPhysicalValue" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeElectricalUnits" />.</summary>
<value>Specifies the second electrical value, corresponding to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearSecondPhysicalValue" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeElectricalUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearSecondPhysicalValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgeTwoPointLinearSecondPhysicalValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the second physical value, corresponding to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearSecondElectricalValue" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgePhysicalUnits" />.</summary>
<value>Specifies the second physical value, corresponding to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTwoPointLinearSecondElectricalValue" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgePhysicalUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeTableElectricalValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BridgeTableElectricalValues" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the array of electrical values that map to the values in <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTablePhysicalValues" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeElectricalUnits" />.</summary>
<value>Specifies the array of electrical values that map to the values in <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTablePhysicalValues" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeElectricalUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeTablePhysicalValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeTablePhysicalValues" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the array of physical values that map to the values in <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTableElectricalValues" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgePhysicalUnits" />.</summary>
<value>Specifies the array of physical values that map to the values in <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeTableElectricalValues" />. Specify this value in the unit indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgePhysicalUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgePolynomialForwardCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgePolynomialForwardCoefficients" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies an array of coefficients for the polynomial that converts electrical values to physical values. Each element of the array corresponds to a term of the equation. For example, if index three of the array is 9, the fourth term of the equation is 9x^3.</summary>
<value>Specifies an array of coefficients for the polynomial that converts electrical values to physical values. Each element of the array corresponds to a term of the equation. For example, if index three of the array is 9, the fourth term of the equation is 9x^3.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgePolynomialReverseCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgePolynomialReverseCoefficients" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies an array of coefficients for the polynomial that converts physical values to electrical values. Each element of the array corresponds to a term of the equation. For example, if index three of the array is 9, the fourth term of the equation is 9x^3.</summary>
<value>Specifies an array of coefficients for the polynomial that converts physical values to electrical values. Each element of the array corresponds to a term of the equation. For example, if index three of the array is 9, the fourth term of the equation is 9x^3.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.IsTeds" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="IsTeds" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the virtual channel was initialized using a TEDS bitstream from the corresponding physical channel.</summary>
<value>Indicates if the virtual channel was initialized using a TEDS bitstream from the corresponding physical channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.TedsUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="TedsUnits" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the units defined by TEDS information associated with the channel.</summary>
<value>Indicates the units defined by TEDS information associated with the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.Coupling" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Coupling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AICoupling">
      <summary>Specifies the coupling for the channel.</summary>
<value>Specifies the coupling for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.Impedance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Impedance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the input impedance of the channel.</summary>
<value>Specifies the input impedance of the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.TerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="TerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AITerminalConfiguration">
      <summary>Specifies the terminal configuration for the channel.</summary>
<value>Specifies the terminal configuration for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.InputSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InputSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the source of the channel. You can use the signal from the I/O connector or one of several calibration signals. Certain devices have a single calibration signal bus. For these devices, you must specify the same calibration signal for all channels you connect to a calibration signal.</summary>
<value>Specifies the source of the channel. You can use the signal from the I/O connector or one of several calibration signals. Certain devices have a single calibration signal bus. For these devices, you must specify the same calibration signal for all channels you connect to a calibration signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ResistanceConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ResistanceConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIResistanceConfiguration">
      <summary>Specifies the resistance configuration for the channel. NI-DAQmx uses this value for any resistance-based measurements, including temperature measurement using a thermistor or RTD.</summary>
<value>Specifies the resistance configuration for the channel. NI-DAQmx uses this value for any resistance-based measurements, including temperature measurement using a thermistor or RTD.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LeadWireResistance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LeadWireResistance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the resistance of the wires that lead to the sensor.</summary>
<value>Specifies in ohms the resistance of the wires that lead to the sensor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIBridgeConfiguration">
      <summary>Specifies the type of Wheatstone bridge connected to the channel.</summary>
<value>Specifies the type of Wheatstone bridge connected to the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeNominalResistance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeNominalResistance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the resistance of the bridge while not under load.</summary>
<value>Specifies in ohms the resistance of the bridge while not under load.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeInitialVoltage" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in volts the output voltage of the bridge while not under load. NI-DAQmx subtracts this value from any measurements before applying scaling equations.  If you set <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" />, NI-DAQmx coerces this property to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" /> times <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" />. This property is set by DAQmx Perform Bridge Offset Nulling Calibration. If you set this property, NI-DAQmx coerces <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" /> to the value of this property divided by <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" />. If you set both this property and <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" />, and their values conflict, NI-DAQmx returns an error. To avoid this error, reset one property to its default value before setting the other.</summary>
<value>Specifies in volts the output voltage of the bridge while not under load. NI-DAQmx subtracts this value from any measurements before applying scaling equations.  If you set <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" />, NI-DAQmx coerces this property to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" /> times <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" />. This property is set by DAQmx Perform Bridge Offset Nulling Calibration. If you set this property, NI-DAQmx coerces <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" /> to the value of this property divided by <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" />. If you set both this property and <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" />, and their values conflict, NI-DAQmx returns an error. To avoid this error, reset one property to its default value before setting the other.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialRatio" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeInitialRatio" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in volts per volt the ratio of output voltage from the bridge to excitation voltage supplied to the bridge while not under load. NI-DAQmx subtracts this value from any measurements before applying scaling equations. If you set <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" />, NI-DAQmx coerces this property  to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" /> divided by <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" />. If you set this property, NI-DAQmx coerces <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" /> to the value of this property times <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" />. If you set both this property and <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" />, and their values conflict, NI-DAQmx returns an error.  To avoid this error, reset one property to its default value before setting the other.</summary>
<value>Specifies in volts per volt the ratio of output voltage from the bridge to excitation voltage supplied to the bridge while not under load. NI-DAQmx subtracts this value from any measurements before applying scaling equations. If you set <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" />, NI-DAQmx coerces this property  to <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" /> divided by <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" />. If you set this property, NI-DAQmx coerces <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" /> to the value of this property times <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" />. If you set both this property and <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeInitialVoltage" />, and their values conflict, NI-DAQmx returns an error.  To avoid this error, reset one property to its default value before setting the other.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable a shunt calibration switch. Use <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationSelect" /> to select the switch(es) to enable.</summary>
<value>Specifies whether to enable a shunt calibration switch. Use <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationSelect" /> to select the switch(es) to enable.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationSelect" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationSelect" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIBridgeShuntCalibrationSelect">
      <summary>Specifies which shunt calibration switch(es) to enable.  Use <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationEnable" /> to enable the switch(es) you specify with this property.</summary>
<value>Specifies which shunt calibration switch(es) to enable.  Use <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationEnable" /> to enable the switch(es) you specify with this property.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationASource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationASource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::BridgeShuntCalibrationSource">
      <summary>Specifies whether to use internal or external shunt when Shunt Cal A is selected.</summary>
<value>Specifies whether to use internal or external shunt when Shunt Cal A is selected.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationGainAdjust" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationGainAdjust" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the result of a shunt calibration. This property is set by DAQmx Perform Shunt Calibration. NI-DAQmx multiplies data read from the channel by the value of this property. This value should be close to 1.0.</summary>
<value>Specifies the result of a shunt calibration. This property is set by DAQmx Perform Shunt Calibration. NI-DAQmx multiplies data read from the channel by the value of this property. This value should be close to 1.0.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationAResistance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationAResistance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the desired value of the internal shunt calibration A resistor.</summary>
<value>Specifies in ohms the desired value of the internal shunt calibration A resistor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationAActualResistance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationAActualResistance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the actual value of the internal shunt calibration A resistor.</summary>
<value>Specifies in ohms the actual value of the internal shunt calibration A resistor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationBResistance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationBResistance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the desired value of the internal shunt calibration B resistor.</summary>
<value>Specifies in ohms the desired value of the internal shunt calibration B resistor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationBActualResistance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationBActualResistance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>xx Specifies in ohms the actual value of the internal shunt calibration B resistor.</summary>
<value>xx Specifies in ohms the actual value of the internal shunt calibration B resistor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeBalanceCoarsePot" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeBalanceCoarsePot" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int32">
      <summary>Specifies by how much to compensate for offset in the signal. This value can be between 0 and 127.</summary>
<value>Specifies by how much to compensate for offset in the signal. This value can be between 0 and 127.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.BridgeBalanceFinePot" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeBalanceFinePot" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int32">
      <summary>Specifies by how much to compensate for offset in the signal. This value can be between 0 and 4095.</summary>
<value>Specifies by how much to compensate for offset in the signal. This value can be between 0 and 4095.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CurrentShuntLocation" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CurrentShuntLocation" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AICurrentShuntLocation">
      <summary>Specifies the shunt resistor location for current measurements.</summary>
<value>Specifies the shunt resistor location for current measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CurrentShuntResistance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CurrentShuntResistance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the external shunt resistance for current measurements.</summary>
<value>Specifies in ohms the external shunt resistance for current measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ExcitationSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ExcitationSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIExcitationSource">
      <summary>Specifies the source of excitation.</summary>
<value>Specifies the source of excitation.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ExcitationValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ExcitationValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the amount of excitation that the sensor requires. If <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationVoltageOrCurrent" /> is  <see cref="F:NationalInstruments.DAQmx.AIExcitationVoltageOrCurrent.Voltage" />, this value is in volts. If <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationVoltageOrCurrent" /> is  <see cref="F:NationalInstruments.DAQmx.AIExcitationVoltageOrCurrent.Current" />, this value is in amperes.</summary>
<value>Specifies the amount of excitation that the sensor requires. If <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationVoltageOrCurrent" /> is  <see cref="F:NationalInstruments.DAQmx.AIExcitationVoltageOrCurrent.Voltage" />, this value is in volts. If <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationVoltageOrCurrent" /> is  <see cref="F:NationalInstruments.DAQmx.AIExcitationVoltageOrCurrent.Current" />, this value is in amperes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.UseExcitationForScaling" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UseExcitationForScaling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies if NI-DAQmx divides the measurement by the excitation. You should typically set this property to <see langword="true" /> for ratiometric transducers. If you set this property to <see langword="true" />, set <see cref="P:NationalInstruments.DAQmx.AIChannel.Maximum" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.Minimum" /> to reflect the scaling.</summary>
<value>Specifies if NI-DAQmx divides the measurement by the excitation. You should typically set this property to <see langword="true" /> for ratiometric transducers. If you set this property to <see langword="true" />, set <see cref="P:NationalInstruments.DAQmx.AIChannel.Maximum" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.Minimum" /> to reflect the scaling.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For example, if you expect to acquire a voltage between -5 and 5, and you use an excitation of .10 volts to scale
the measurement, set <see cref="P:NationalInstruments.DAQmx.AIChannel.Minimum" /> to -50 and set <see cref="P:NationalInstruments.DAQmx.AIChannel.Maximum" /> to 50. If you set <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeConfiguration" /> to <see cref="F:NationalInstruments.DAQmx.AIBridgeConfiguration.NoBridge" />, this 
property has no effect on the measurement. 
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.UseMultiplexedExcitation" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UseMultiplexedExcitation" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies if the SCXI-1122 multiplexes the excitation to the upper half of the channels as it advances through the scan list.</summary>
<value>Specifies if the SCXI-1122 multiplexes the excitation to the upper half of the channels as it advances through the scan list.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ExcitationActualValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ExcitationActualValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the actual amount of excitation supplied by an internal excitation source.  If you read an internal excitation source more precisely with an external device, set this property to the value you read.  NI-DAQmx ignores this value for external excitation. When performing shunt calibration, some devices set this property automatically.</summary>
<value>Specifies the actual amount of excitation supplied by an internal excitation source.  If you read an internal excitation source more precisely with an external device, set this property to the value you read.  NI-DAQmx ignores this value for external excitation. When performing shunt calibration, some devices set this property automatically.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ExcitationDCOrAC" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ExcitationDCOrAC" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIExcitationDCOrAC">
      <summary>Specifies if the excitation supply is DC or AC.</summary>
<value>Specifies if the excitation supply is DC or AC.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ExcitationVoltageOrCurrent" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ExcitationVoltageOrCurrent" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIExcitationVoltageOrCurrent">
      <summary>Specifies if the channel uses current or voltage excitation.</summary>
<value>Specifies if the channel uses current or voltage excitation.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ExcitationIdleOutputBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ExcitationIdleOutputBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ExcitationIdleOutputBehavior">
      <summary>Specifies whether this channel will disable excitation after the task is uncommitted. Setting this to tExcitationIdleOutputBehaviorZeroVoltsOrAmperes disables excitation after task uncommit. Setting this attribute to tExcitationIdleOutputBehaviorMaintainExistingValue leaves the excitation on after task uncommit.</summary>
<value>Specifies whether this channel will disable excitation after the task is uncommitted. Setting this to tExcitationIdleOutputBehaviorZeroVoltsOrAmperes disables excitation after task uncommit. Setting this attribute to tExcitationIdleOutputBehaviorMaintainExistingValue leaves the excitation on after task uncommit.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ACExcitationFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ACExcitationFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the AC excitation frequency in Hertz.</summary>
<value>Specifies the AC excitation frequency in Hertz.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ACExcitationSyncEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ACExcitationSyncEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize the AC excitation source of the channel to that of another channel. Synchronize the excitation sources of multiple channels to use multichannel sensors. Set this property to <see langword="false" /> for the master channel and to <see langword="true" /> for the slave channels.</summary>
<value>Specifies whether to synchronize the AC excitation source of the channel to that of another channel. Synchronize the excitation sources of multiple channels to use multichannel sensors. Set this property to <see langword="false" /> for the master channel and to <see langword="true" /> for the slave channels.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ACExcitationWireMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ACExcitationWireMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIACExcitationWireMode">
      <summary>Specifies the number of leads on the LVDT or RVDT. Some sensors require you to tie leads together to create a four- or five- wire sensor. Refer to the sensor documentation for more information.</summary>
<value>Specifies the number of leads on the LVDT or RVDT. Some sensors require you to tie leads together to create a four- or five- wire sensor. Refer to the sensor documentation for more information.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.OpenThermocoupleDetectEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OpenThermocoupleDetectEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/openThermDet.html')">open thermocouple detection bias voltage</see> to the channel. Changing the value of this property on a channel may require settling time before the data returned is valid. To compensate for this settling time, discard unsettled data or add a delay between committing and starting the task. Refer to your device specifications for the required settling time. When open thermocouple detection is enabled, use <see cref="P:NationalInstruments.DAQmx.DaqStream.OpenThermocoupleChannelsExist" /> to determine if any channels were open.</summary>
<value>Specifies whether to apply the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/openThermDet.html')">open thermocouple detection bias voltage</see> to the channel. Changing the value of this property on a channel may require settling time before the data returned is valid. To compensate for this settling time, discard unsettled data or add a delay between committing and starting the task. Refer to your device specifications for the required settling time. When open thermocouple detection is enabled, use <see cref="P:NationalInstruments.DAQmx.DaqStream.OpenThermocoupleChannelsExist" /> to determine if any channels were open.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleLeadOffsetVoltage" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ThermocoupleLeadOffsetVoltage" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/openThermDet.html');">lead offset nulling</see> voltage to subtract from measurements on a device. This property is ignored if open thermocouple detection is disabled.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/openThermDet.html');">lead offset nulling</see> voltage to subtract from measurements on a device. This property is ignored if open thermocouple detection is disabled.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.Attenuation" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Attenuation" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the amount of attenuation to use.</summary>
<value>Specifies the amount of attenuation to use.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ProbeAttenuation" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ProbeAttenuation" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the amount of attenuation provided by the probe connected to the channel. Specify this attenuation as a ratio.</summary>
<value>Specifies the amount of attenuation provided by the probe connected to the channel. Specify this attenuation as a ratio.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LowpassEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LowpassEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable the lowpass filter of the channel.</summary>
<value>Specifies whether to enable the lowpass filter of the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LowpassCutoffFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LowpassCutoffFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the frequency in Hertz that corresponds to the -3dB cutoff of the filter.</summary>
<value>Specifies the frequency in Hertz that corresponds to the -3dB cutoff of the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorClockSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LowpassSwitchedCapacitorClockSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AILowpassSwitchedCapacitorClockSource">
      <summary>Specifies the source of the filter clock. If you need a higher resolution for the filter, you can supply an external clock to increase the resolution. Refer to the SCXI-1141/1142/1143 User Manual for more information.</summary>
<value>Specifies the source of the filter clock. If you need a higher resolution for the filter, you can supply an external clock to increase the resolution. Refer to the SCXI-1141/1142/1143 User Manual for more information.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorExternalClockFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LowpassSwitchedCapacitorExternalClockFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the frequency of the external clock when you set <see cref="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorClockSource" /> to <see cref="F:NationalInstruments.DAQmx.AILowpassSwitchedCapacitorClockSource.External" />.  NI-DAQmx uses this frequency to set the pre- and post- filters on the SCXI-1141, SCXI-1142, and SCXI-1143. On those devices, NI-DAQmx determines the filter cutoff by using the equation f/(100*n), where f is the external frequency, and n is the external clock divisor. Refer to the SCXI-1141/1142/1143 User Manual for more information.</summary>
<value>Specifies the frequency of the external clock when you set <see cref="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorClockSource" /> to <see cref="F:NationalInstruments.DAQmx.AILowpassSwitchedCapacitorClockSource.External" />.  NI-DAQmx uses this frequency to set the pre- and post- filters on the SCXI-1141, SCXI-1142, and SCXI-1143. On those devices, NI-DAQmx determines the filter cutoff by using the equation f/(100*n), where f is the external frequency, and n is the external clock divisor. Refer to the SCXI-1141/1142/1143 User Manual for more information.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorExternalClockDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LowpassSwitchedCapacitorExternalClockDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the divisor for the external clock when you set <see cref="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorClockSource" /> to <see cref="F:NationalInstruments.DAQmx.AILowpassSwitchedCapacitorClockSource.External" />. On the SCXI-1141, SCXI-1142, and SCXI-1143, NI-DAQmx determines the filter cutoff by using the equation f/(100*n), where f is the external frequency, and n is the external clock divisor. Refer to the SCXI-1141/1142/1143 User Manual for more information.</summary>
<value>Specifies the divisor for the external clock when you set <see cref="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorClockSource" /> to <see cref="F:NationalInstruments.DAQmx.AILowpassSwitchedCapacitorClockSource.External" />. On the SCXI-1141, SCXI-1142, and SCXI-1143, NI-DAQmx determines the filter cutoff by using the equation f/(100*n), where f is the external frequency, and n is the external clock divisor. Refer to the SCXI-1141/1142/1143 User Manual for more information.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorOutputClockDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LowpassSwitchedCapacitorOutputClockDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the divisor for the output clock.  NI-DAQmx uses the cutoff frequency to determine the output clock frequency. Refer to the SCXI-1141/1142/1143 User Manual for more information.</summary>
<value>Specifies the divisor for the output clock.  NI-DAQmx uses the cutoff frequency to determine the output clock frequency. Refer to the SCXI-1141/1142/1143 User Manual for more information.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterEnabled" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnabled" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether the digital filter is enabled or disabled.</summary>
<value>Specifies whether the digital filter is enabled or disabled.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::FilterType">
      <summary>Specifies the digital filter type.</summary>
<value>Specifies the digital filter type.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterResponse" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterResponse" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::FilterResponse">
      <summary>Specifies the digital filter response.</summary>
<value>Specifies the digital filter response.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterOrder" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterOrder" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the order of the digital filter.</summary>
<value>Specifies the order of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterLowpassCutoffFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterLowpassCutoffFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the lowpass cutoff frequency of the digital filter.</summary>
<value>Specifies the lowpass cutoff frequency of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterHighpassCutoffFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterHighpassCutoffFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the highpass cutoff frequency of the digital filter.</summary>
<value>Specifies the highpass cutoff frequency of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterBandpassCenterFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterBandpassCenterFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the center frequency of the passband for the digital filter.</summary>
<value>Specifies the center frequency of the passband for the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterBandpassWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterBandpassWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the width of the passband centered around the center frequency for the digital filter.</summary>
<value>Specifies the width of the passband centered around the center frequency for the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterNotchCenterFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterNotchCenterFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the center frequency of the passband for the digital filter.</summary>
<value>Specifies the center frequency of the passband for the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterNotchWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterNotchWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the width of the passband centered around the center frequency for the digital filter.</summary>
<value>Specifies the width of the passband centered around the center frequency for the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterCoefficients" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the digital filter coefficients.</summary>
<value>Specifies the digital filter coefficients.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.FilterDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FilterDelay" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the amount of time between when the ADC samples data and when the sample is read by the host device. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayUnits" />.</summary>
<value>Indicates the amount of time between when the ADC samples data and when the sample is read by the host device. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.FilterDelayUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FilterDelayUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIFilterDelayUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelay" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayAdjustment" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelay" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayAdjustment" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RemoveFilterDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="RemoveFilterDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies if filter delay removal is enabled on the device.</summary>
<value>Specifies if filter delay removal is enabled on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.FilterDelayAdjustment" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FilterDelayAdjustment" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the amount of filter delay that gets removed if <see cref="P:NationalInstruments.DAQmx.AIChannel.RemoveFilterDelay" /> is enabled. This delay adjustment is in addition to the value indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelay" />. This delay adjustment is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayUnits" />.</summary>
<value>Specifies the amount of filter delay that gets removed if <see cref="P:NationalInstruments.DAQmx.AIChannel.RemoveFilterDelay" /> is enabled. This delay adjustment is in addition to the value indicated by <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelay" />. This delay adjustment is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.AveragingWindowSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AveragingWindowSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of samples to average while acquiring data. Increasing the number of samples to average reduces noise in your measurement.</summary>
<value>Specifies the number of samples to average while acquiring data. Increasing the number of samples to average reduces noise in your measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.ResolutionUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ResolutionUnits" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIResolutionUnits">
      <summary>Indicates the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.Resolution" />.</summary>
<value>Indicates the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.Resolution" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.Resolution" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Resolution" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the resolution of the analog-to-digital converter of the channel. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.ResolutionUnits" />.</summary>
<value>Indicates the resolution of the analog-to-digital converter of the channel. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AIChannel.ResolutionUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RawSampleSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="RawSampleSize" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in bits the size of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw sample</see> from the device.</summary>
<value>Indicates in bits the size of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw sample</see> from the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RawSampleJustification" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="RawSampleJustification" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIRawSampleJustification">
      <summary>Indicates the justification of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw sample</see> from the device.</summary>
<value>Indicates the justification of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw sample</see> from the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.AdcTimingMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AdcTimingMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIAdcTimingMode">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/configmeastime.html');">ADC timing mode</see>, controlling the tradeoff between speed and effective resolution. Some ADC timing modes provide increased powerline noise rejection. On devices that have an AI Convert clock, this setting affects both the maximum and default values for <see cref="P:NationalInstruments.DAQmx.Timing.AIConvertRate" />. You must use the same ADC timing mode for all channels on a device, but you can use different ADC timing modes for different devices in the same task.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/configmeastime.html');">ADC timing mode</see>, controlling the tradeoff between speed and effective resolution. Some ADC timing modes provide increased powerline noise rejection. On devices that have an AI Convert clock, this setting affects both the maximum and default values for <see cref="P:NationalInstruments.DAQmx.Timing.AIConvertRate" />. You must use the same ADC timing mode for all channels on a device, but you can use different ADC timing modes for different devices in the same task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.AdcCustomTimingMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AdcCustomTimingMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/configADCTiming.html');">timing mode of the ADC</see> when <see cref="P:NationalInstruments.DAQmx.AIChannel.AdcTimingMode" /> is <see cref="F:NationalInstruments.DAQmx.AIAdcTimingMode.Custom" />.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/configADCTiming.html');">timing mode of the ADC</see> when <see cref="P:NationalInstruments.DAQmx.AIChannel.AdcTimingMode" /> is <see cref="F:NationalInstruments.DAQmx.AIAdcTimingMode.Custom" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DitherEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DitherEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable dithering.  Dithering adds Gaussian noise to the input signal. You can use dithering to achieve higher resolution measurements by over sampling the input signal and averaging the results.</summary>
<value>Specifies whether to enable dithering.  Dithering adds Gaussian noise to the input signal. You can use dithering to achieve higher resolution measurements by over sampling the input signal and averaging the results.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationHasValidInfo" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationHasValidInfo" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the channel has calibration information.</summary>
<value>Indicates if the channel has calibration information.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable the channel calibration associated with the channel.</summary>
<value>Specifies whether to enable the channel calibration associated with the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationApplyIfExpired" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationApplyIfExpired" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the channel calibration to the channel after the expiration date has passed.</summary>
<value>Specifies whether to apply the channel calibration to the channel after the expiration date has passed.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationScaleType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationScaleType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIChannelCalibrationScaleType">
      <summary>Specifies the method or equation form that the calibration scale uses.</summary>
<value>Specifies the method or equation form that the calibration scale uses.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationTablePreScaledValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationTablePreScaledValues" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the reference values collected when calibrating the channel.</summary>
<value>Specifies the reference values collected when calibrating the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

<para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationTableScaledValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationTableScaledValues" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the acquired values collected when calibrating the channel.</summary>
<value>Specifies the acquired values collected when calibrating the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

<para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationPolynomialForwardCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationPolynomialForwardCoefficients" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the forward polynomial values used for calibrating the channel.</summary>
<value>Specifies the forward polynomial values used for calibrating the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

<para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationPolynomialReverseCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationPolynomialReverseCoefficients" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the reverse polynomial values used for calibrating the channel.</summary>
<value>Specifies the reverse polynomial values used for calibrating the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

<para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationOperatorName" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationOperatorName" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of the operator who performed the channel calibration.</summary>
<value>Specifies the name of the operator who performed the channel calibration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationDescription" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationDescription" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the description entered for the calibration of the channel.</summary>
<value>Specifies the description entered for the calibration of the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationVerificationReferenceValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationVerificationReferenceValues" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the reference values collected when verifying the calibration. NI-DAQmx stores these values as a record of calibration accuracy and does not use them in the scaling process.</summary>
<value>Specifies the reference values collected when verifying the calibration. NI-DAQmx stores these values as a record of calibration accuracy and does not use them in the scaling process.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

<para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.CalibrationVerificationAcquiredValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CalibrationVerificationAcquiredValues" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the acquired values collected when verifying the calibration. NI-DAQmx stores these values as a record of calibration accuracy and does not use them in the scaling process.</summary>
<value>Specifies the acquired values collected when verifying the calibration. NI-DAQmx stores these values as a record of calibration accuracy and does not use them in the scaling process.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of channel calibration.
</para>

<para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RangeHigh" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="RangeHigh" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the upper limit of the input range of the device. This value is in the native units of the device. On E Series devices, for example, the native units is volts.</summary>
<value>Specifies the upper limit of the input range of the device. This value is in the native units of the device. On E Series devices, for example, the native units is volts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RangeLow" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="RangeLow" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the lower limit of the input range of the device. This value is in the native units of the device. On E Series devices, for example, the native units is volts.</summary>
<value>Specifies the lower limit of the input range of the device. This value is in the native units of the device. On E Series devices, for example, the native units is volts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DCOffset" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DCOffset" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the DC value to add to the input range of the device. Use <see cref="P:NationalInstruments.DAQmx.AIChannel.RangeHigh" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.RangeLow" /> to specify the input range. This offset is in the native units of the device .</summary>
<value>Specifies the DC value to add to the input range of the device. Use <see cref="P:NationalInstruments.DAQmx.AIChannel.RangeHigh" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.RangeLow" /> to specify the input range. This offset is in the native units of the device .</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.Gain" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Gain" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies a gain factor to apply to the channel.</summary>
<value>Specifies a gain factor to apply to the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.SampleAndHoldEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="SampleAndHoldEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable the sample and hold circuitry of the device. When you disable sample and hold circuitry, a small voltage offset might be introduced into the signal.  You can eliminate this offset by using <see cref="P:NationalInstruments.DAQmx.AIChannel.AutoZeroMode" /> to perform an auto zero on the channel.</summary>
<value>Specifies whether to enable the sample and hold circuitry of the device. When you disable sample and hold circuitry, a small voltage offset might be introduced into the signal.  You can eliminate this offset by using <see cref="P:NationalInstruments.DAQmx.AIChannel.AutoZeroMode" /> to perform an auto zero on the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.AutoZeroMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AutoZeroMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIAutoZeroMode">
      <summary>Specifies how often to measure ground. NI-DAQmx subtracts the measured ground voltage from every sample.</summary>
<value>Specifies how often to measure ground. NI-DAQmx subtracts the measured ground voltage from every sample.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DataTransferMechanism" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DataTransferMechanism" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIDataTransferMechanism">
      <summary>Specifies the data transfer mode for the device.</summary>
<value>Specifies the data transfer mode for the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DataTransferRequestCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DataTransferRequestCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIDataTransferRequestCondition">
      <summary>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</summary>
<value>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DataTransferCustomThreshold" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DataTransferCustomThreshold" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of samples that must be in the FIFO to transfer data from the device if <see cref="P:NationalInstruments.DAQmx.AIChannel.DataTransferRequestCondition" /> is <see cref="F:NationalInstruments.DAQmx.AIDataTransferRequestCondition.OnBoardMemoryCustomThreshold" />.</summary>
<value>Specifies the number of samples that must be in the FIFO to transfer data from the device if <see cref="P:NationalInstruments.DAQmx.AIChannel.DataTransferRequestCondition" /> is <see cref="F:NationalInstruments.DAQmx.AIDataTransferRequestCondition.OnBoardMemoryCustomThreshold" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.UsbTransferRequestSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.UsbTransferRequestCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.MemoryMappingEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MemoryMappingEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</summary>
<value>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.RawDataCompressionType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="RawDataCompressionType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIRawDataCompressionType">
      <summary>Specifies the type of compression to apply to <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw samples</see> returned from the device.</summary>
<value>Specifies the type of compression to apply to <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw samples</see> returned from the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of raw data compression and streaming to disk.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.LossyLsbRemovalCompressedSampleSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LossyLsbRemovalCompressedSampleSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of bits to return in a <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw sample</see> when <see cref="P:NationalInstruments.DAQmx.AIChannel.RawDataCompressionType" /> is set to <see cref="F:NationalInstruments.DAQmx.AIRawDataCompressionType.LossyLsbRemoval" />.</summary>
<value>Specifies the number of bits to return in a <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw sample</see> when <see cref="P:NationalInstruments.DAQmx.AIChannel.RawDataCompressionType" /> is set to <see cref="F:NationalInstruments.DAQmx.AIRawDataCompressionType.LossyLsbRemoval" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>Refer to the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Tools</see> Web site for more information and examples of raw data compression and streaming to disk.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.DeviceScalingCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DeviceScalingCoefficients" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the coefficients of a polynomial equation that NI-DAQmx uses to scale values from the native format of the device to volts. Each element of the array corresponds to a term of the equation. For example, if index two of the array is 4, the third term of the equation is 4x^2. Scaling coefficients do not account for any custom scales or sensors contained by the channel.</summary>
<value>Indicates the coefficients of a polynomial equation that NI-DAQmx uses to scale values from the native format of the device to volts. Each element of the array corresponds to a term of the equation. For example, if index two of the array is 4, the third term of the equation is 4x^2. Scaling coefficients do not account for any custom scales or sensors contained by the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.AIChannel.EnhancedAliasRejectionEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="EnhancedAliasRejectionEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable <see href="javascript:launchSharedHelp('mxdevconsid.chm::/enhancedaliasrej.html');">enhanced alias rejection</see>. Leave this property set to the default value for most applications.</summary>
<value>Specifies whether to enable <see href="javascript:launchSharedHelp('mxdevconsid.chm::/enhancedaliasrej.html');">enhanced alias rejection</see>. Leave this property set to the default value for most applications.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AOChannel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates one or more analog output channels and the properties for an analog output channel.</summary>
<threadsafety safety="safe" />
<remarks>
Use the <see cref="P:NationalInstruments.DAQmx.Task.AOChannels" /> property to create or access an analog output channel. An <see cref="T:NationalInstruments.DAQmx.AOChannel" /> might contain more than one virtual channel because the <see cref="T:NationalInstruments.DAQmx.AOChannel" /> is defined by providing a valid NI-DAQmx channel string to the <see cref="P:NationalInstruments.DAQmx.Task.AOChannels" /> indexer or to an <see cref="T:NationalInstruments.DAQmx.AOChannelCollection" /> create channel method. If you set a property on a <see cref="T:NationalInstruments.DAQmx.AOChannel" /> object that represents multiple channels, that property is set for all of the channels that the object represents.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.AOChannelCollection" />
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannel.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannel.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.Maximum" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Maximum" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the maximum value you expect to generate. The value is in the units you specify with a units property. If you try to write a value larger than the maximum value, NI-DAQmx generates an error. NI-DAQmx might coerce this value to a smaller value if other task settings restrict the device from generating the desired maximum.</summary>
<value>Specifies the maximum value you expect to generate. The value is in the units you specify with a units property. If you try to write a value larger than the maximum value, NI-DAQmx generates an error. NI-DAQmx might coerce this value to a smaller value if other task settings restrict the device from generating the desired maximum.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.Minimum" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Minimum" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the minimum value you expect to generate. The value is in the units you specify with a units property. If you try to write a value smaller than the minimum value, NI-DAQmx generates an error. NI-DAQmx might coerce this value to a larger value if other task settings restrict the device from generating the desired minimum.</summary>
<value>Specifies the minimum value you expect to generate. The value is in the units you specify with a units property. If you try to write a value smaller than the minimum value, NI-DAQmx generates an error. NI-DAQmx might coerce this value to a larger value if other task settings restrict the device from generating the desired minimum.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.CustomScaleName" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CustomScaleName" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> for the channel.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.OutputType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OutputType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOOutputType">
      <summary>Indicates whether the channel generates voltage,  current, or a waveform.</summary>
<value>Indicates whether the channel generates voltage,  current, or a waveform.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.VoltageUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltageUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOVoltageUnits">
      <summary>Specifies in what units to generate voltage on the channel. Write data to the channel in the units you select.</summary>
<value>Specifies in what units to generate voltage on the channel. Write data to the channel in the units you select.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.VoltageCurrentLimit" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltageCurrentLimit" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the current limit, in amperes, for the voltage channel.</summary>
<value>Specifies the current limit, in amperes, for the voltage channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.CurrentUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CurrentUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOCurrentUnits">
      <summary>Specifies in what units to generate current on the channel. Write data to the channel in the units you select.</summary>
<value>Specifies in what units to generate current on the channel. Write data to the channel in the units you select.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FunctionGenerationType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOFunctionGenerationType">
      <summary>Specifies the kind of the waveform to generate.</summary>
<value>Specifies the kind of the waveform to generate.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FunctionGenerationFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the frequency of the waveform to generate in hertz.</summary>
<value>Specifies the frequency of the waveform to generate in hertz.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationAmplitude" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FunctionGenerationAmplitude" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the zero-to-peak amplitude of the waveform to generate in volts. Zero and negative values are valid.</summary>
<value>Specifies the zero-to-peak amplitude of the waveform to generate in volts. Zero and negative values are valid.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationOffset" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FunctionGenerationOffset" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the voltage offset of the waveform to generate.</summary>
<value>Specifies the voltage offset of the waveform to generate.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationSquareDutyCycle" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FunctionGenerationSquareDutyCycle" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the square wave duty cycle of the waveform to generate.</summary>
<value>Specifies the square wave duty cycle of the waveform to generate.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationModulationType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FunctionGenerationModulationType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOFunctionGenerationModulationType">
      <summary>Specifies if the device generates a modulated version of the waveform using the original waveform as a carrier and input from an external terminal as the signal.</summary>
<value>Specifies if the device generates a modulated version of the waveform using the original waveform as a carrier and input from an external terminal as the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationFMDeviation" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FunctionGenerationFMDeviation" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the FM deviation in hertz per volt when <see cref="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationModulationType" /> is <see cref="F:NationalInstruments.DAQmx.AOFunctionGenerationModulationType.FM" />.</summary>
<value>Specifies the FM deviation in hertz per volt when <see cref="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationModulationType" /> is <see cref="F:NationalInstruments.DAQmx.AOFunctionGenerationModulationType.FM" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.OutputImpedance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OutputImpedance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the impedance of the analog output stage of the device.</summary>
<value>Specifies in ohms the impedance of the analog output stage of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.LoadImpedance" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LoadImpedance" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in ohms the load impedance connected to the analog output channel.</summary>
<value>Specifies in ohms the load impedance connected to the analog output channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.IdleOutputBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="IdleOutputBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOIdleOutputBehavior">
      <summary>Specifies the state of the channel when no generation is in progress.</summary>
<value>Specifies the state of the channel when no generation is in progress.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.TerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="TerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOTerminalConfiguration">
      <summary>Specifies the terminal configuration of the channel.</summary>
<value>Specifies the terminal configuration of the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.ResolutionUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ResolutionUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOResolutionUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AOChannel.Resolution" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AOChannel.Resolution" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.Resolution" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Resolution" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the resolution of the digital-to-analog converter of the channel. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AOChannel.ResolutionUnits" />.</summary>
<value>Indicates the resolution of the digital-to-analog converter of the channel. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AOChannel.ResolutionUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacRangeHigh" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacRangeHigh" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the upper limit of the output range of the device. This value is in the native units of the device. On E Series devices, for example, the native units is volts.</summary>
<value>Specifies the upper limit of the output range of the device. This value is in the native units of the device. On E Series devices, for example, the native units is volts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacRangeLow" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacRangeLow" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the lower limit of the output range of the device. This value is in the native units of the device. On E Series devices, for example, the native units is volts.</summary>
<value>Specifies the lower limit of the output range of the device. This value is in the native units of the device. On E Series devices, for example, the native units is volts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacConnectReferenceToGround" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacConnectReferenceToGround" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to ground the internal DAC reference. Grounding the internal DAC reference has the effect of grounding all analog output channels and stopping waveform generation across all analog output channels regardless of whether the channels belong to the current task. You can ground the internal DAC reference only when <see cref="P:NationalInstruments.DAQmx.AOChannel.DacReferenceSource" /> is <see cref="F:NationalInstruments.DAQmx.AODacReferenceSource.Internal" /> and <see cref="P:NationalInstruments.DAQmx.AOChannel.DacAllowConnectReferenceToGround" /> is <see langword="true" />.</summary>
<value>Specifies whether to ground the internal DAC reference. Grounding the internal DAC reference has the effect of grounding all analog output channels and stopping waveform generation across all analog output channels regardless of whether the channels belong to the current task. You can ground the internal DAC reference only when <see cref="P:NationalInstruments.DAQmx.AOChannel.DacReferenceSource" /> is <see cref="F:NationalInstruments.DAQmx.AODacReferenceSource.Internal" /> and <see cref="P:NationalInstruments.DAQmx.AOChannel.DacAllowConnectReferenceToGround" /> is <see langword="true" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacAllowConnectReferenceToGround" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacAllowConnectReferenceToGround" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to allow grounding the internal DAC reference at run time. You must set this property to <see langword="true" /> and set <see cref="P:NationalInstruments.DAQmx.AOChannel.DacReferenceSource" /> to <see cref="F:NationalInstruments.DAQmx.AODacReferenceSource.Internal" /> before you can set <see cref="P:NationalInstruments.DAQmx.AOChannel.DacConnectReferenceToGround" /> to <see langword="true" />.</summary>
<value>Specifies whether to allow grounding the internal DAC reference at run time. You must set this property to <see langword="true" /> and set <see cref="P:NationalInstruments.DAQmx.AOChannel.DacReferenceSource" /> to <see cref="F:NationalInstruments.DAQmx.AODacReferenceSource.Internal" /> before you can set <see cref="P:NationalInstruments.DAQmx.AOChannel.DacConnectReferenceToGround" /> to <see langword="true" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacReferenceSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacReferenceSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AODacReferenceSource">
      <summary>Specifies the source of the DAC reference voltage. The value of this voltage source determines the full-scale value of the DAC.</summary>
<value>Specifies the source of the DAC reference voltage. The value of this voltage source determines the full-scale value of the DAC.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacReferenceExternalSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacReferenceExternalSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the source of the DAC reference voltage if <see cref="P:NationalInstruments.DAQmx.AOChannel.DacReferenceSource" /> is <see cref="F:NationalInstruments.DAQmx.AODacReferenceSource.External" />. The valid sources for this signal <see href="javascript:launchSharedHelp('mxdevconsid.chm::/MSeriesExtRefSrc.html');">vary by device</see>.</summary>
<value>Specifies the source of the DAC reference voltage if <see cref="P:NationalInstruments.DAQmx.AOChannel.DacReferenceSource" /> is <see cref="F:NationalInstruments.DAQmx.AODacReferenceSource.External" />. The valid sources for this signal <see href="javascript:launchSharedHelp('mxdevconsid.chm::/MSeriesExtRefSrc.html');">vary by device</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacReferenceValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacReferenceValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in volts the value of the DAC reference voltage. This voltage determines the full-scale range of the DAC. Smaller reference voltages result in smaller ranges, but increased resolution.</summary>
<value>Specifies in volts the value of the DAC reference voltage. This voltage determines the full-scale range of the DAC. Smaller reference voltages result in smaller ranges, but increased resolution.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacOffsetSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacOffsetSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AODacOffsetSource">
      <summary>Specifies the source of the DAC offset voltage. The value of this voltage source determines the full-scale value of the DAC.</summary>
<value>Specifies the source of the DAC offset voltage. The value of this voltage source determines the full-scale value of the DAC.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacOffsetExternalSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacOffsetExternalSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the source of the DAC offset voltage if <see cref="P:NationalInstruments.DAQmx.AOChannel.DacOffsetSource" /> is <see cref="F:NationalInstruments.DAQmx.AODacOffsetSource.External" />. The valid sources for this signal <see href="javascript:launchSharedHelp('mxdevconsid.chm::/MSeriesExtRefSrc.html');">vary by device</see>.</summary>
<value>Specifies the source of the DAC offset voltage if <see cref="P:NationalInstruments.DAQmx.AOChannel.DacOffsetSource" /> is <see cref="F:NationalInstruments.DAQmx.AODacOffsetSource.External" />. The valid sources for this signal <see href="javascript:launchSharedHelp('mxdevconsid.chm::/MSeriesExtRefSrc.html');">vary by device</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DacOffsetValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DacOffsetValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in volts the value of the DAC offset voltage. To achieve best accuracy, the DAC offset value should be hand calibrated.</summary>
<value>Specifies in volts the value of the DAC offset voltage. To achieve best accuracy, the DAC offset value should be hand calibrated.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.ReglitchEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ReglitchEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable reglitching.  The output of a DAC normally glitches whenever the DAC is updated with a new value. The amount of glitching differs from code to code and is generally largest at major code transitions.  Reglitching generates uniform glitch energy at each code transition and provides for more uniform glitches.  Uniform glitch energy makes it easier to filter out the noise introduced from glitching during spectrum analysis.</summary>
<value>Specifies whether to enable reglitching.  The output of a DAC normally glitches whenever the DAC is updated with a new value. The amount of glitching differs from code to code and is generally largest at major code transitions.  Reglitching generates uniform glitch energy at each code transition and provides for more uniform glitches.  Uniform glitch energy makes it easier to filter out the noise introduced from glitching during spectrum analysis.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FilterDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FilterDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the amount of time between when the sample is written by the host device and when the sample is output by the DAC. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayUnits" />.</summary>
<value>Specifies the amount of time between when the sample is written by the host device and when the sample is output by the DAC. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FilterDelayUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FilterDelayUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AOFilterDelayUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelay" /> and <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayAdjustment" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelay" /> and <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayAdjustment" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.FilterDelayAdjustment" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FilterDelayAdjustment" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies an additional amount of time to wait between when the sample is written by the host device and when the sample is output by the DAC. This delay adjustment is in addition to the value indicated by <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelay" />. This delay adjustment is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayUnits" />.</summary>
<value>Specifies an additional amount of time to wait between when the sample is written by the host device and when the sample is output by the DAC. This delay adjustment is in addition to the value indicated by <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelay" />. This delay adjustment is in the units you specify with <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.Gain" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Gain" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in decibels the gain factor to apply to the channel.</summary>
<value>Specifies in decibels the gain factor to apply to the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.UseOnlyOnBoardMemory" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UseOnlyOnBoardMemory" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to write samples directly to the onboard memory of the device, bypassing the memory buffer. Generally, you cannot update onboard memory directly after you start the task. Onboard memory includes data FIFOs.</summary>
<value>Specifies whether to write samples directly to the onboard memory of the device, bypassing the memory buffer. Generally, you cannot update onboard memory directly after you start the task. Onboard memory includes data FIFOs.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DataTransferMechanism" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DataTransferMechanism" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AODataTransferMechanism">
      <summary>Specifies the data transfer mode for the device.</summary>
<value>Specifies the data transfer mode for the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DataTransferRequestCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DataTransferRequestCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AODataTransferRequestCondition">
      <summary>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</summary>
<value>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.UsbTransferRequestSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.UsbTransferRequestCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.MemoryMappingEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MemoryMappingEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</summary>
<value>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.DeviceScalingCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DeviceScalingCoefficients" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the coefficients of a linear equation that NI-DAQmx uses to scale values from a voltage to the native format of the device. Each element of the array corresponds to a term of the equation. The first element of the array corresponds to the y-intercept, and the second element corresponds to the slope. Scaling coefficients do not account for any custom scales that may be applied to the channel.</summary>
<value>Indicates the coefficients of a linear equation that NI-DAQmx uses to scale values from a voltage to the native format of the device. Each element of the array corresponds to a term of the equation. The first element of the array corresponds to the y-intercept, and the second element corresponds to the slope. Scaling coefficients do not account for any custom scales that may be applied to the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.AOChannel.EnhancedImageRejectionEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="EnhancedImageRejectionEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable the DAC interpolation filter. Disable the interpolation filter to improve DAC signal-to-noise ratio at the expense of degraded image rejection.</summary>
<value>Specifies whether to enable the DAC interpolation filter. Disable the interpolation filter to improve DAC signal-to-noise ratio at the expense of degraded image rejection.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DIChannel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DIChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates one or more digital input channels and the properties for a digital input channel.</summary>
<threadsafety safety="safe" />
<remarks>
Use the <see cref="P:NationalInstruments.DAQmx.Task.DIChannels" /> property to create or access a digital input channel. A <see cref="T:NationalInstruments.DAQmx.DIChannel" /> might contain more than one virtual channel because the <see cref="T:NationalInstruments.DAQmx.DIChannel" /> is defined by providing a valid NI-DAQmx channel string to the <see cref="P:NationalInstruments.DAQmx.Task.DIChannels" /> indexer or to a <see cref="T:NationalInstruments.DAQmx.DIChannelCollection" /> create channel method. If you set a property on a <see cref="T:NationalInstruments.DAQmx.DIChannel" /> object that represents multiple channels, that property is set for all of the channels that the object represents.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.DIChannelCollection" />
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannel.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannel.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.InvertLines" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InvertLines" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to invert the lines in the channel. If you set this property to <see langword="true" />, the lines are at high logic when off and at low logic when on.</summary>
<value>Specifies whether to invert the lines in the channel. If you set this property to <see langword="true" />, the lines are at high logic when off and at low logic when on.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.NumberOfLines" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="NumberOfLines" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of digital lines in the channel.</summary>
<value>Indicates the number of digital lines in the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable the digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> for the line(s) or port(s). You can enable the filter on a line-by-line basis. You do not have to enable the filter for all lines in a channel.</summary>
<value>Specifies whether to enable the digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> for the line(s) or port(s). You can enable the filter on a line-by-line basis. You do not have to enable the filter for all lines in a channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes as a valid high or low state transition.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes as a valid high or low state transition.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.DigitalFilterEnableBusMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnableBusMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable bus mode for digital filtering. If you set this property to <see langword="true" />, NI-DAQmx treats all lines that use common filtering settings as a bus. If any line in the bus has jitter, all lines in the bus hold state until the entire bus stabilizes, or until 2 times the minimum pulse width elapses. If you set this property to <see langword="false" />, NI-DAQmx filters all lines individually. Jitter in one line does not affect other lines.</summary>
<value>Specifies whether to enable bus mode for digital filtering. If you set this property to <see langword="true" />, NI-DAQmx treats all lines that use common filtering settings as a bus. If any line in the bus has jitter, all lines in the bus hold state until the entire bus stabilizes, or until 2 times the minimum pulse width elapses. If you set this property to <see langword="false" />, NI-DAQmx filters all lines individually. Jitter in one line does not affect other lines.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.Tristate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Tristate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to tristate the lines in the channel. If you set this property to <see langword="true" />, NI-DAQmx tristates the lines in the channel. If you set this property to <see langword="false" />, NI-DAQmx does not modify the configuration of the lines even if the lines were previously tristated. Set this property to <see langword="false" /> to read lines in other tasks or to read output-only lines.</summary>
<value>Specifies whether to tristate the lines in the channel. If you set this property to <see langword="true" />, NI-DAQmx tristates the lines in the channel. If you set this property to <see langword="false" />, NI-DAQmx does not modify the configuration of the lines even if the lines were previously tristated. Set this property to <see langword="false" /> to read lines in other tasks or to read output-only lines.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.LogicFamily" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LogicFamily" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DILogicFamily">
      <summary>Specifies the logic family to use for acquisition. A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to the device documentation for information on the logic high and logic low voltages for these logic families.</summary>
<value>Specifies the logic family to use for acquisition. A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to the device documentation for information on the logic high and logic low voltages for these logic families.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.DataTransferMechanism" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DataTransferMechanism" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DIDataTransferMechanism">
      <summary>Specifies the data transfer mode for the device.</summary>
<value>Specifies the data transfer mode for the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.DataTransferRequestCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DataTransferRequestCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DIDataTransferRequestCondition">
      <summary>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</summary>
<value>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.UsbTransferRequestSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.UsbTransferRequestCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.MemoryMappingEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MemoryMappingEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</summary>
<value>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannel.AcquireOn" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AcquireOn" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DIAcquireOn">
      <summary>Specifies on which edge of the sample clock to acquire samples.</summary>
<value>Specifies on which edge of the sample clock to acquire samples.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DOChannel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DOChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates one or more digital output channels and the properties for a digital output channel.</summary>
<threadsafety safety="safe" />
<remarks>
Use the <see cref="P:NationalInstruments.DAQmx.Task.DOChannels" /> property to create or access a digital output channel. A <see cref="T:NationalInstruments.DAQmx.DOChannel" /> might contain more than one virtual channel because the <see cref="T:NationalInstruments.DAQmx.DOChannel" /> is defined by providing a valid NI-DAQmx channel string to the <see cref="P:NationalInstruments.DAQmx.Task.DOChannels" /> indexer or to a <see cref="T:NationalInstruments.DAQmx.DOChannelCollection" /> create channel method. If you set a property on a <see cref="T:NationalInstruments.DAQmx.DOChannel" /> object that represents multiple channels, that property is set for all of the channels that the object represents.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.DOChannelCollection" />
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannel.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannel.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.OutputDriveType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OutputDriveType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DOOutputDriveType">
      <summary>Specifies the drive type for digital output channels.</summary>
<value>Specifies the drive type for digital output channels.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.InvertLines" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="InvertLines" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to invert the lines in the channel. If you set this property to <see langword="true" />, the lines are at high logic when off and at low logic when on.</summary>
<value>Specifies whether to invert the lines in the channel. If you set this property to <see langword="true" />, the lines are at high logic when off and at low logic when on.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.NumberOfLines" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="NumberOfLines" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of digital lines in the channel.</summary>
<value>Indicates the number of digital lines in the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.Tristate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Tristate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to stop driving the channel and set it to a high-impedance state. You must commit the task for this setting to take effect.</summary>
<value>Specifies whether to stop driving the channel and set it to a high-impedance state. You must commit the task for this setting to take effect.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
Setting this property before you <see href="javascript:launchSharedHelp('mxcncpts.chm::/Committed.html');">commit</see> the task determines whether NI-DAQmx drives data on the channel or tristates the channel after the task 
transitions to the committed state. 
</para>

<para>
Use this property when you want to read and write to channels in a task. Set this property to <see langword="true" /> before you read from the channel 
and set this property to <see langword="false" /> before you write to the channel. 
</para>

<para>
When you read from an output channel that is not tristated, the value corresponds to the current value you are driving on the channel. 
</para>

<para>
When you write to a channel that is tristated, no change occurs until you set this property to <see langword="false" />. After you set this property to <see langword="false" />, 
the value NI-DAQmx drives on the channel corresponds to the last value written to the channel.
</para>

<para>
Ensure the channel is tristated before any external devices that you connect to the channel drive data onto the channel. Failure to do so could 
result in double-driving the channel and damaging the device. 
</para>

<para>
This property is supported only for line-configurable, bidirectional ports. 
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.LineStatesStartState" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LineStatesStartState" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DOLineStatesStartState">
      <summary>Specifies the state of the lines in a digital output task when the task starts.</summary>
<value>Specifies the state of the lines in a digital output task when the task starts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.LineStatesPausedState" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LineStatesPausedState" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DOLineStatesPausedState">
      <summary>Specifies the state of the lines in a digital output task when the task pauses.</summary>
<value>Specifies the state of the lines in a digital output task when the task pauses.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.LineStatesDoneState" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LineStatesDoneState" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DOLineStatesDoneState">
      <summary>Specifies the state of the lines in a digital output task when the task <see href="javascript:launchSharedHelp('mxcncpts.chm::/whenTaskDone.html');">completes execution</see>.</summary>
<value>Specifies the state of the lines in a digital output task when the task <see href="javascript:launchSharedHelp('mxcncpts.chm::/whenTaskDone.html');">completes execution</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.LogicFamily" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicFamily" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DOLogicFamily">
      <summary>Specifies the logic family to use for generation. A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to the device documentation for information on the logic high and logic low voltages for these logic families.</summary>
<value>Specifies the logic family to use for generation. A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to the device documentation for information on the logic high and logic low voltages for these logic families.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.OvercurrentLimit" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OvercurrentLimit" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the current threshold in Amperes for the channel. A value of 0 means the channel observes no limit. Devices can monitor only a finite number of current thresholds simultaneously. If you attempt to monitor additional thresholds, NI-DAQmx returns an error.</summary>
<value>Specifies the current threshold in Amperes for the channel. A value of 0 means the channel observes no limit. Devices can monitor only a finite number of current thresholds simultaneously. If you attempt to monitor additional thresholds, NI-DAQmx returns an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.OvercurrentAutoReenable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OvercurrentAutoReenable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to automatically reenable channels after they no longer exceed the current limit specified by <see cref="P:NationalInstruments.DAQmx.DOChannel.OvercurrentLimit" />.</summary>
<value>Specifies whether to automatically reenable channels after they no longer exceed the current limit specified by <see cref="P:NationalInstruments.DAQmx.DOChannel.OvercurrentLimit" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.OvercurrentReenablePeriod" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OvercurrentReenablePeriod" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the delay in seconds between the time a channel no longer exceeds the current limit and the reactivation of that channel, if <see cref="P:NationalInstruments.DAQmx.DOChannel.OvercurrentAutoReenable" /> is <see langword="true" />.</summary>
<value>Specifies the delay in seconds between the time a channel no longer exceeds the current limit and the reactivation of that channel, if <see cref="P:NationalInstruments.DAQmx.DOChannel.OvercurrentAutoReenable" /> is <see langword="true" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.UseOnlyOnBoardMemory" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="UseOnlyOnBoardMemory" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to write samples directly to the onboard memory of the device, bypassing the memory buffer. Generally, you cannot update onboard memory after you start the task. Onboard memory includes data FIFOs.</summary>
<value>Specifies whether to write samples directly to the onboard memory of the device, bypassing the memory buffer. Generally, you cannot update onboard memory after you start the task. Onboard memory includes data FIFOs.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.DataTransferMechanism" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DataTransferMechanism" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DODataTransferMechanism">
      <summary>Specifies the data transfer mode for the device.</summary>
<value>Specifies the data transfer mode for the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.DataTransferRequestCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DataTransferRequestCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DODataTransferRequestCondition">
      <summary>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</summary>
<value>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.UsbTransferRequestSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.UsbTransferRequestCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.MemoryMappingEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="MemoryMappingEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</summary>
<value>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannel.GenerateOn" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="GenerateOn" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DOGenerateOn">
      <summary>Specifies on which edge of the sample clock to generate samples.</summary>
<value>Specifies on which edge of the sample clock to generate samples.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.CIChannel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates one counter/timer input channel and the properties for a counter/timer input channel.</summary>
<threadsafety safety="safe" />
<remarks>
Use the <see cref="P:NationalInstruments.DAQmx.Task.CIChannels" /> property to create or access a counter/timer input channel. A <see cref="T:NationalInstruments.DAQmx.CIChannel" /> might contain more than one virtual channel because the <see cref="T:NationalInstruments.DAQmx.CIChannel" /> is defined by providing a valid NI-DAQmx channel string to the <see cref="P:NationalInstruments.DAQmx.Task.CIChannels" /> indexer or to a <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" /> create channel method. If you set a property on a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> object that represents multiple channels, that property is set for all of the channels that the object represents.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.CIChannelCollection" />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannel.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannel.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.Maximum" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Maximum" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the maximum value you expect to measure. This value is in the units you specify with a units property. When you query this property, it returns the coerced maximum value that the hardware can measure with the current settings.</summary>
<value>Specifies the maximum value you expect to measure. This value is in the units you specify with a units property. When you query this property, it returns the coerced maximum value that the hardware can measure with the current settings.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.Minimum" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Minimum" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the minimum value you expect to measure. This value is in the units you specify with a units property. When you query this property, it returns the coerced minimum value that the hardware can measure with the current settings.</summary>
<value>Specifies the minimum value you expect to measure. This value is in the units you specify with a units property. When you query this property, it returns the coerced minimum value that the hardware can measure with the current settings.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CustomScaleName" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CustomScaleName" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> for the channel.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.MeasurementType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="MeasurementType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIMeasurementType">
      <summary>Indicates the measurement to take with the channel.</summary>
<value>Indicates the measurement to take with the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIFrequencyUnits">
      <summary>Specifies the units to use to return frequency measurements.</summary>
<value>Specifies the units to use to return frequency measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIFrequencyTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyLogicalLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyLogicalLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIFrequencyLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyStartingEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyStartingEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIFrequencyStartingEdge">
      <summary>Specifies between which edges to measure the frequency of the signal.</summary>
<value>Specifies between which edges to measure the frequency of the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyMeasurementMethod" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyMeasurementMethod" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIFrequencyMeasurementMethod">
      <summary>Specifies the method to use to measure the frequency of the signal.</summary>
<value>Specifies the method to use to measure the frequency of the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyEnableAveraging" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyEnableAveraging" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable <see href="javascript:launchSharedHelp('mxcncpts.chm::/ConfigTimeMeas.html');">averaging mode</see> for Sample Clock-timed frequency measurements.</summary>
<value>Specifies whether to enable <see href="javascript:launchSharedHelp('mxcncpts.chm::/ConfigTimeMeas.html');">averaging mode</see> for Sample Clock-timed frequency measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyMeasurementTime" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyMeasurementTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the length of time to measure the frequency of the signal if <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyMeasurementMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.HighFrequencyTwoCounter" />. Measurement accuracy increases with increased measurement time and with increased signal frequency. If you measure a high-frequency signal for too long, however, the count register could roll over, which results in an incorrect measurement.</summary>
<value>Specifies in seconds the length of time to measure the frequency of the signal if <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyMeasurementMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.HighFrequencyTwoCounter" />. Measurement accuracy increases with increased measurement time and with increased signal frequency. If you measure a high-frequency signal for too long, however, the count register could roll over, which results in an incorrect measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.FrequencyDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FrequencyDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the value by which to divide the input signal if  <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyMeasurementMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.LargeRangeTwoCounter" />. The larger the divisor, the more accurate the measurement. However, too large a value could cause the count register to roll over, which results in an incorrect measurement.</summary>
<value>Specifies the value by which to divide the input signal if  <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyMeasurementMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.LargeRangeTwoCounter" />. The larger the divisor, the more accurate the measurement. However, too large a value could cause the count register to roll over, which results in an incorrect measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPeriodUnits">
      <summary>Specifies the unit to use to return period measurements.</summary>
<value>Specifies the unit to use to return period measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPeriodTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPeriodLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodStartingEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodStartingEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPeriodStartingEdge">
      <summary>Specifies between which edges to measure the period of the signal.</summary>
<value>Specifies between which edges to measure the period of the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodMeasurementMethod" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodMeasurementMethod" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPeriodMeasurementMethod">
      <summary>Specifies the method to use to measure the period of the signal.</summary>
<value>Specifies the method to use to measure the period of the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodEnableAveraging" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodEnableAveraging" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable <see href="javascript:launchSharedHelp('mxcncpts.chm::/ConfigTimeMeas.html');">averaging mode</see> for Sample Clock-timed period measurements.</summary>
<value>Specifies whether to enable <see href="javascript:launchSharedHelp('mxcncpts.chm::/ConfigTimeMeas.html');">averaging mode</see> for Sample Clock-timed period measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodMeasurementTime" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodMeasurementTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the length of time to measure the period of the signal if <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodMeasurementMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIPeriodMeasurementMethod.HighFrequencyTwoCounter" />. Measurement accuracy increases with increased measurement time and with increased signal frequency. If you measure a high-frequency signal for too long, however, the count register could roll over, which results in an incorrect measurement.</summary>
<value>Specifies in seconds the length of time to measure the period of the signal if <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodMeasurementMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIPeriodMeasurementMethod.HighFrequencyTwoCounter" />. Measurement accuracy increases with increased measurement time and with increased signal frequency. If you measure a high-frequency signal for too long, however, the count register could roll over, which results in an incorrect measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PeriodDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PeriodDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the value by which to divide the input signal if <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodMeasurementMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIPeriodMeasurementMethod.LargeRangeTwoCounter" />. The larger the divisor, the more accurate the measurement. However, too large a value could cause the count register to roll over, which results in an incorrect measurement.</summary>
<value>Specifies the value by which to divide the input signal if <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodMeasurementMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIPeriodMeasurementMethod.LargeRangeTwoCounter" />. The larger the divisor, the more accurate the measurement. However, too large a value could cause the count register to roll over, which results in an incorrect measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirection" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirection" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesCountDirection">
      <summary>Specifies whether to increment or decrement the counter on each edge.</summary>
<value>Specifies whether to increment or decrement the counter on each edge.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirectionTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the source <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the digital signal that controls the count direction if <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirection" /> is <see cref="F:NationalInstruments.DAQmx.CICountEdgesCountDirection.ExternallyControlled" />.</summary>
<value>Specifies the source <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the digital signal that controls the count direction if <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirection" /> is <see cref="F:NationalInstruments.DAQmx.CICountEdgesCountDirection.ExternallyControlled" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirectionTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesCountDirectionTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirectionLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesCountDirectionLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<value>Specifies the logic level behavior on the count reset line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirectionDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirectionDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirectionDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirectionDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountDirectionDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesInitialCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesInitialCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the starting value from which to count.</summary>
<value>Specifies the starting value from which to count.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesActiveEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesActiveEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesActiveEdge">
      <summary>Specifies on which edges to increment or decrement the counter.</summary>
<value>Specifies on which edges to increment or decrement the counter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to reset the count on the active edge specified with <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetTerminal" />.</summary>
<value>Specifies whether to reset the count on the active edge specified with <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetTerminal" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetResetCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetResetCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the value to reset the count to.</summary>
<value>Specifies the value to reset the count to.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input terminal of the signal to reset the count.</summary>
<value>Specifies the input terminal of the signal to reset the count.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesCountResetTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesCountResetLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<value>Specifies the logic level behavior on the count reset line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width filter to the signal.</summary>
<value>Specifies whether to apply the pulse width filter to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the minimum pulse width the filter recognizes.</summary>
<value>Specifies the minimum pulse width the filter recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetActiveEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdgesCountResetActiveEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICountEdgesCountResetActiveEdge">
      <summary>Specifies on which edge of the signal to reset the count.</summary>
<value>Specifies on which edge of the signal to reset the count.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DutyCycleTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycleTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input terminal of the signal to measure.</summary>
<value>Specifies the input terminal of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DutyCycleTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycleTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIDutyCycleTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DutyCycleLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycleLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIDutyCycleLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DutyCycleDigitalFilterEnabled" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycleDigitalFilterEnabled" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width filter to the signal.</summary>
<value>Specifies whether to apply the pulse width filter to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DutyCycleDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycleDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the digital filter recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the digital filter recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DutyCycleDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycleDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input terminal of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input terminal of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DutyCycleDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycleDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DutyCycleStartingEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycleStartingEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIDutyCycleStartingEdge">
      <summary>Specifies which edge of the input signal to begin the duty cycle measurement.</summary>
<value>Specifies which edge of the input signal to begin the duty cycle measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.AngularEncoderUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="AngularEncoderUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIAngularEncoderUnits">
      <summary>Specifies the units to use to return angular position measurements from the channel.</summary>
<value>Specifies the units to use to return angular position measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.AngularEncoderPulsesPerRevolution" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="AngularEncoderPulsesPerRevolution" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of pulses the encoder generates per revolution. This value is the number of pulses on either signal A or signal B, not the total number of pulses on both signal A and signal B.</summary>
<value>Specifies the number of pulses the encoder generates per revolution. This value is the number of pulses on either signal A or signal B, not the total number of pulses on both signal A and signal B.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.AngularEncoderInitialAngle" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="AngularEncoderInitialAngle" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the starting angle of the encoder. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.CIChannel.AngularEncoderUnits" />.</summary>
<value>Specifies the starting angle of the encoder. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.CIChannel.AngularEncoderUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.LinearEncoderUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LinearEncoderUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CILinearEncoderUnits">
      <summary>Specifies the units to use to return linear encoder measurements from the channel.</summary>
<value>Specifies the units to use to return linear encoder measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.LinearEncoderDistancePerPulse" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LinearEncoderDistancePerPulse" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the distance to measure for each pulse the encoder generates on signal A or signal B. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.CIChannel.LinearEncoderUnits" />.</summary>
<value>Specifies the distance to measure for each pulse the encoder generates on signal A or signal B. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.CIChannel.LinearEncoderUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.LinearEncoderInitialPosition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LinearEncoderInitialPosition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the position of the encoder when the measurement begins. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.CIChannel.LinearEncoderUnits" />.</summary>
<value>Specifies the position of the encoder when the measurement begins. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.CIChannel.LinearEncoderUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderDecodingType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderDecodingType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIEncoderDecodingType">
      <summary>Specifies how to count and interpret the pulses the encoder generates on signal A and signal B. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" />, <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" />, and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> are valid for <see href="javascript:launchSharedHelp('measfunds.chm::/quadEncoders.html');">quadrature encoders</see> only. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.TwoPulseCounting" /> is valid for <see href="javascript:launchSharedHelp('measfunds.chm::/twoPulse.html');">two-pulse encoders</see> only.</summary>
<value>Specifies how to count and interpret the pulses the encoder generates on signal A and signal B. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" />, <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" />, and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> are valid for <see href="javascript:launchSharedHelp('measfunds.chm::/quadEncoders.html');">quadrature encoders</see> only. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.TwoPulseCounting" /> is valid for <see href="javascript:launchSharedHelp('measfunds.chm::/twoPulse.html');">two-pulse encoders</see> only.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
X2 and X4 decoding are more sensitive to smaller changes in position than X1 encoding, with X4 being the most sensitive. However, more sensitive decoding is more likely to produce erroneous measurements if vibration exists in the encoder or other noise exists in the signals.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderAInputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which signal A is connected.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which signal A is connected.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderAInputTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIEncoderAInputTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderAInputLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIEncoderAInputLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderAInputDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderAInputDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderAInputDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderAInputDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderAInputDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderBInputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which signal B is connected.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which signal B is connected.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderBInputTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIEncoderBInputTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderBInputLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIEncoderBInputLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderBInputDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderBInputDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderBInputDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderBInputDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderBInputDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZInputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which signal Z is connected.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which signal Z is connected.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZInputTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIEncoderZInputTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZInputLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIEncoderZInputLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZInputDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZInputDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZInputDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZInputDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZInputDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZIndexEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZIndexEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to use <see href="javascript:launchSharedHelp('measfunds.chm::/zIndexing.html');">Z indexing</see> for the channel.</summary>
<value>Specifies whether to use <see href="javascript:launchSharedHelp('measfunds.chm::/zIndexing.html');">Z indexing</see> for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZIndexValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZIndexValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the value to which to reset the measurement when signal Z is high and signal A and signal B are at the states you specify with <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderZIndexPhase" />. Specify this value in the units of the measurement.</summary>
<value>Specifies the value to which to reset the measurement when signal Z is high and signal A and signal B are at the states you specify with <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderZIndexPhase" />. Specify this value in the units of the measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.EncoderZIndexPhase" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="EncoderZIndexPhase" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIEncoderZIndexPhase">
      <summary>Specifies the states at which signal A and signal B must be while signal Z is high for NI-DAQmx to reset the measurement. If signal Z is never high while signal A and signal B are high, for example, you must choose a phase other than <see cref="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" />.</summary>
<value>Specifies the states at which signal A and signal B must be while signal Z is high for NI-DAQmx to reset the measurement. If signal Z is never high while signal A and signal B are high, for example, you must choose a phase other than <see cref="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
When signal Z transitions to high and how long it stays high varies from encoder to encoder. Refer to the documentation for the encoder to determine the timing of signal Z with respect to signal A and signal B.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseWidthUnits">
      <summary>Specifies the units to use to return pulse width measurements.</summary>
<value>Specifies the units to use to return pulse width measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseWidthTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseWidthLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseWidthStartingEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidthStartingEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseWidthStartingEdge">
      <summary>Specifies on which edge of the input signal to begin each pulse width measurement.</summary>
<value>Specifies on which edge of the input signal to begin each pulse width measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TimestampUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TimestampUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CITimestampUnits">
      <summary>Specifies the units to use to return timestamp measurements.</summary>
<value>Specifies the units to use to return timestamp measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TimestampInitialSeconds" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TimestampInitialSeconds" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of seconds that elapsed since the beginning of the current year. This value is ignored if  <see cref="P:NationalInstruments.DAQmx.CIChannel.GpsSyncMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIGpsSyncMethod.IrigB" />.</summary>
<value>Specifies the number of seconds that elapsed since the beginning of the current year. This value is ignored if  <see cref="P:NationalInstruments.DAQmx.CIChannel.GpsSyncMethod" /> is <see cref="F:NationalInstruments.DAQmx.CIGpsSyncMethod.IrigB" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.GpsSyncMethod" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="GpsSyncMethod" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIGpsSyncMethod">
      <summary>Specifies the method to use to synchronize the counter to a GPS receiver.</summary>
<value>Specifies the method to use to synchronize the counter to a GPS receiver.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.GpsSyncSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="GpsSyncSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">terminal</see> to which the GPS synchronization signal is connected.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">terminal</see> to which the GPS synchronization signal is connected.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CITwoEdgeSeparationUnits">
      <summary>Specifies the units to use to return two-edge separation measurements from the channel.</summary>
<value>Specifies the units to use to return two-edge separation measurements from the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the source <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the digital signal that starts each measurement.</summary>
<value>Specifies the source <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the digital signal that starts each measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CITwoEdgeSeparationFirstTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CITwoEdgeSeparationFirstLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the input line.</summary>
<value>Specifies the logic level behavior on the input line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstEdgeDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstEdgeDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstEdgeDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstEdgeDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstEdgeDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstEdgeDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstEdgeDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstEdgeDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstEdgeDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstEdgeDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationFirstEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CITwoEdgeSeparationFirstEdge">
      <summary>Specifies on which edge of the first signal to start each measurement.</summary>
<value>Specifies on which edge of the first signal to start each measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the source <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the digital signal that stops each measurement.</summary>
<value>Specifies the source <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the digital signal that stops each measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CITwoEdgeSeparationSecondTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CITwoEdgeSeparationSecondLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<value>Specifies the logic level behavior on the count reset line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondEdgeDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondEdgeDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondEdgeDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondEdgeDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondEdgeDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondEdgeDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondEdgeDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondEdgeDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondEdgeDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondEdgeDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparationSecondEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CITwoEdgeSeparationSecondEdge">
      <summary>Specifies on which edge of the second signal to stop each measurement.</summary>
<value>Specifies on which edge of the second signal to stop each measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CISemiPeriodUnits">
      <summary>Specifies the units to use to return semi-period measurements.</summary>
<value>Specifies the units to use to return semi-period measurements.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CISemiPeriodTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CISemiPeriodLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<value>Specifies the logic level behavior on the count reset line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodStartingEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriodStartingEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CISemiPeriodStartingEdge">
      <summary>Specifies on which edge of the input signal to begin semi-period measurement. Semi-period measurements alternate between high time and low time, starting on this edge.</summary>
<value>Specifies on which edge of the input signal to begin semi-period measurement. Semi-period measurements alternate between high time and low time, starting on this edge.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseFrequencyUnits">
      <summary>Specifies the units to use to return pulse specifications in terms of frequency.</summary>
<value>Specifies the units to use to return pulse specifications in terms of frequency.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseFrequencyTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseFrequencyLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<value>Specifies the logic level behavior on the count reset line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal to measure.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyStartingEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyStartingEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseFrequencyStartingEdge">
      <summary>Specifies on which edge of the input signal to begin pulse measurement.</summary>
<value>Specifies on which edge of the input signal to begin pulse measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseTimeUnits">
      <summary>Specifies the units to use to return pulse specifications in terms of high time and low time.</summary>
<value>Specifies the units to use to return pulse specifications in terms of high time and low time.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseTimeTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseTimeLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<value>Specifies the logic level behavior on the count reset line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal to measure.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTimeStartingEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeStartingEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseTimeStartingEdge">
      <summary>Specifies on which edge of the input signal to begin pulse measurement.</summary>
<value>Specifies on which edge of the input signal to begin pulse measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</summary>
<value>Specifies the <see href="javascript:LaunchHelp('daqhelp.chm::/connectCounter.html');">input terminal</see> of the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksTerminalConfiguration" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksTerminalConfiguration" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseTicksTerminalConfiguration">
      <summary>Specifies the input terminal configuration.</summary>
<value>Specifies the input terminal configuration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksLogicLevelBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksLogicLevelBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseTicksLogicLevelBehavior">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<value>Specifies the logic level behavior on the count reset line.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal to measure.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal to measure.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.PulseTicksStartingEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksStartingEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIPulseTicksStartingEdge">
      <summary>Specifies on which edge of the input signal to begin pulse measurement.</summary>
<value>Specifies on which edge of the input signal to begin pulse measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the timebase to use for the counter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the timebase to use for the counter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
Typically, NI-DAQmx uses one of the internal counter timebases when performing counter measurements. Use this property to specify an external 
timebase and produce custom measurement ranges that are not possible with the internal timebases. 
</para>

<para>
You also can use this property to chain counters together. By using the output of a counter as the timebase of another counter, you can effectively 
widen a counter. For example, you can chain two 24 bit counters together to produce one 48 bit counter.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in Hertz the frequency of the counter timebase. Specifying the rate of a counter timebase allows you to take measurements in terms of time or frequency rather than in ticks of the timebase. If you use an external timebase and do not specify the rate, you can take measurements only in terms of ticks of the timebase.</summary>
<value>Specifies in Hertz the frequency of the counter timebase. Specifying the rate of a counter timebase allows you to take measurements in terms of time or frequency rather than in ticks of the timebase. If you use an external timebase and do not specify the rate, you can take measurements only in terms of ticks of the timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseActiveEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseActiveEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CICounterTimebaseActiveEdge">
      <summary>Specifies whether a timebase cycle is from rising edge to rising edge or from falling edge to falling edge.</summary>
<value>Specifies whether a timebase cycle is from rising edge to rising edge or from falling edge to falling edge.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.VoltageThresholdLevel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="VoltageThresholdLevel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the digital threshold value in Volts for high and low input transitions. Some devices do not support this for differential channels.</summary>
<value>Specifies the digital threshold value in Volts for high and low input transitions. Some devices do not support this for differential channels.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.Count" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the current value of the count register.</summary>
<value>Indicates the current value of the count register.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.OutputState" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OutputState" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIOutputState">
      <summary>Indicates the current state of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/CounterParts.html');">out terminal</see> of the counter.</summary>
<value>Indicates the current state of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/CounterParts.html');">out terminal</see> of the counter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.TerminalCountReached" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TerminalCountReached" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the counter rolled over. When you query this property, NI-DAQmx resets it to <see langword="false" />.</summary>
<value>Indicates whether the counter rolled over. When you query this property, NI-DAQmx resets it to <see langword="false" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseMasterTimebaseDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseMasterTimebaseDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the divisor for an external counter timebase. You can divide the counter timebase in order to measure slower signals without causing the count register to roll over.</summary>
<value>Specifies the divisor for an external counter timebase. You can divide the counter timebase in order to measure slower signals without causing the count register to roll over.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SampleClockOverrunBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SampleClockOverrunBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CISampleClockOverrunBehavior">
      <summary>Specifies the counter behavior when data is read but a new value was not detected during a sample clock.</summary>
<value>Specifies the counter behavior when data is read but a new value was not detected during a sample clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.SampleClockOverrunSentinelValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SampleClockOverrunSentinelValue" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int32">
      <summary>Specifies the sentinel value returned when the No New Sample Behavior is set to Sentinel Value.</summary>
<value>Specifies the sentinel value returned when the No New Sample Behavior is set to Sentinel Value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DataTransferMechanism" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DataTransferMechanism" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIDataTransferMechanism">
      <summary>Specifies the data transfer mode for the channel.</summary>
<value>Specifies the data transfer mode for the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DataTransferRequestCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DataTransferRequestCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CIDataTransferRequestCondition">
      <summary>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</summary>
<value>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.UsbTransferRequestSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.UsbTransferRequestCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.MemoryMappingEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="MemoryMappingEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</summary>
<value>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.NumberPossiblyInvalidSamples" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="NumberPossiblyInvalidSamples" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of samples that the device might have overwritten before it could transfer them to the buffer.</summary>
<value>Indicates the number of samples that the device might have overwritten before it could transfer them to the buffer.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
On certain devices during finite buffered time measurements, it is not possible to detect if the counter overwrites a value it read before 
the device could transfer the sample to the buffer. This uncertainty is present only when <see cref="P:NationalInstruments.DAQmx.CIChannel.DataTransferMechanism" /> is <see cref="F:NationalInstruments.DAQmx.CIDataTransferMechanism.Dma" /> and occurs as the acquisition nears 
completion.  
</para>
<para>
Once the acquisition completes, it is impossible to tell if the status value on the counter indicates an overwrite as a result of a true overwrite, 
or because the counter detected another edge of the input signal after the acquisition completed but before the counter could disarm. As a result of this behavior, 
higher frequency input signals are more likely to increase the number of possibly invalid samples. 
</para>
<para>
To decrease the number of possibly invalid samples, read more often from the buffer. Reading from the buffer forces a check on the hardware status and ensures all data is 
valid up to the present point in the buffer. By default, NI-DAQmx checks the validity of data every fourth of the buffer. If you do not perform a read 
until after the device acquires all data, the value of this property is one-fourth of the buffer size or zero.
</para>
<para>
The value this property indicates is valid only while the task is in the running state. The value of this property while the task is in any other 
state is zero.
</para>
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.DuplicateCountPrevention" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DuplicateCountPrevention" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable <see href="javascript:launchSharedHelp('mxdevconsid.chm::/dupCountPrevention.html');">duplicate count prevention</see> for the channel. Duplicate count prevention is enabled by default. Setting  <see cref="P:NationalInstruments.DAQmx.CIChannel.Prescaler" /> disables duplicate count prevention unless you explicitly enable it.</summary>
<value>Specifies whether to enable <see href="javascript:launchSharedHelp('mxdevconsid.chm::/dupCountPrevention.html');">duplicate count prevention</see> for the channel. Duplicate count prevention is enabled by default. Setting  <see cref="P:NationalInstruments.DAQmx.CIChannel.Prescaler" /> disables duplicate count prevention unless you explicitly enable it.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.Prescaler" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Prescaler" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the divisor to apply to the signal you connect to the counter source terminal. Scaled data that you read takes this setting into account. You should use a prescaler only when you connect an external signal to the counter source terminal and when that signal has a higher frequency than the fastest onboard timebase. Setting this value disables duplicate count prevention unless you explicitly set <see cref="P:NationalInstruments.DAQmx.CIChannel.DuplicateCountPrevention" /> to <see langword="true" />.</summary>
<value>Specifies the divisor to apply to the signal you connect to the counter source terminal. Scaled data that you read takes this setting into account. You should use a prescaler only when you connect an external signal to the counter source terminal and when that signal has a higher frequency than the fastest onboard timebase. Setting this value disables duplicate count prevention unless you explicitly set <see cref="P:NationalInstruments.DAQmx.CIChannel.DuplicateCountPrevention" /> to <see langword="true" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannel.MaximumMeasurementPeriod" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="MaximumMeasurementPeriod" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the maximum period (in seconds) in which the device will recognize signals. For frequency measurements, a signal with a higher period than the one set in this property will return 0 Hz. For duty cycle, the device will return 0 or 1 depending on the state of the line during the max defined period of time. Period measurements will return NaN. Pulse width measurement will return zero.</summary>
<value>Specifies the maximum period (in seconds) in which the device will recognize signals. For frequency measurements, a signal with a higher period than the one set in this property will return 0 Hz. For duty cycle, the device will return 0 or 1 depending on the state of the line during the max defined period of time. Period measurements will return NaN. Pulse width measurement will return zero.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.COChannel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="COChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates one or more counter/timer output channels and the properties for a counter/timer output channel.</summary>
<threadsafety safety="safe" />
<remarks>
Use the <see cref="P:NationalInstruments.DAQmx.Task.COChannels" /> property to create or access a counter/timer output channel. A <see cref="T:NationalInstruments.DAQmx.COChannel" /> might contain more than one virtual channel because the <see cref="T:NationalInstruments.DAQmx.COChannel" /> is defined by providing a valid NI-DAQmx channel string to the <see cref="P:NationalInstruments.DAQmx.Task.COChannels" /> indexer or to a <see cref="T:NationalInstruments.DAQmx.COChannelCollection" /> create channel method. If you set a property on a <see cref="T:NationalInstruments.DAQmx.COChannel" /> object that represents multiple channels, that property is set for all of the channels that the object represents.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.COChannelCollection" />
</member>
    <member name="M:NationalInstruments.DAQmx.COChannel.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.COChannel.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.COChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.COChannel.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:08 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.OutputType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OutputType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::COOutputType">
      <summary>Indicates how to define pulses generated on the channel.</summary>
<value>Indicates how to define pulses generated on the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseIdleState" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseIdleState" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::COPulseIdleState">
      <summary>Specifies the resting state of the output terminal.</summary>
<value>Specifies the resting state of the output terminal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies on which <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to generate pulses.</summary>
<value>Specifies on which <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to generate pulses.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseTimeUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::COPulseTimeUnits">
      <summary>Specifies the units in which to define high and low pulse time.</summary>
<value>Specifies the units in which to define high and low pulse time.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseHighTime" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseHighTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the amount of time that the pulse is at a high voltage. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.COChannel.PulseTimeUnits" /> or when you create the channel.</summary>
<value>Specifies the amount of time that the pulse is at a high voltage. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.COChannel.PulseTimeUnits" /> or when you create the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseLowTime" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseLowTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the amount of time that the pulse is at a low voltage. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.COChannel.PulseTimeUnits" /> or when you create the channel.</summary>
<value>Specifies the amount of time that the pulse is at a low voltage. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.COChannel.PulseTimeUnits" /> or when you create the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseTimeInitialDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseTimeInitialDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time to wait before generating the first pulse.</summary>
<value>Specifies in seconds the amount of time to wait before generating the first pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseDutyCycle" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseDutyCycle" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the duty cycle of the pulses. The duty cycle of a signal is the width of the pulse divided by period. NI-DAQmx uses this ratio and the pulse frequency to determine the width of the pulses and the delay between pulses.</summary>
<value>Specifies the duty cycle of the pulses. The duty cycle of a signal is the width of the pulse divided by period. NI-DAQmx uses this ratio and the pulse frequency to determine the width of the pulses and the delay between pulses.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseFrequencyUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::COPulseFrequencyUnits">
      <summary>Specifies the units in which to define pulse frequency.</summary>
<value>Specifies the units in which to define pulse frequency.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the frequency of the pulses to generate. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.COChannel.PulseFrequencyUnits" /> or when you create the channel.</summary>
<value>Specifies the frequency of the pulses to generate. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.COChannel.PulseFrequencyUnits" /> or when you create the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseFrequencyInitialDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequencyInitialDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time to wait before generating the first pulse.</summary>
<value>Specifies in seconds the amount of time to wait before generating the first pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseHighTicks" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseHighTicks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of ticks the pulse is high.</summary>
<value>Specifies the number of ticks the pulse is high.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseLowTicks" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseLowTicks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of ticks the pulse is low.</summary>
<value>Specifies the number of ticks the pulse is low.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseTicksInitialDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseTicksInitialDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of ticks to wait before generating the first pulse.</summary>
<value>Specifies the number of ticks to wait before generating the first pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the terminal of the timebase to use for the counter. Typically, NI-DAQmx uses one of the internal counter timebases when generating pulses. Use this property to specify an external timebase and produce custom pulse widths that are not possible using the internal timebases.</summary>
<value>Specifies the terminal of the timebase to use for the counter. Typically, NI-DAQmx uses one of the internal counter timebases when generating pulses. Use this property to specify an external timebase and produce custom pulse widths that are not possible using the internal timebases.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in Hertz the frequency of the counter timebase. Specifying the rate of a counter timebase allows you to define output pulses in seconds rather than in ticks of the timebase. If you use an external timebase and do not specify the rate, you can define output pulses only in ticks of the timebase.</summary>
<value>Specifies in Hertz the frequency of the counter timebase. Specifying the rate of a counter timebase allows you to define output pulses in seconds rather than in ticks of the timebase. If you use an external timebase and do not specify the rate, you can define output pulses only in ticks of the timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseActiveEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseActiveEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::COCounterTimebaseActiveEdge">
      <summary>Specifies whether a timebase cycle is from rising edge to rising edge or from falling edge to falling edge.</summary>
<value>Specifies whether a timebase cycle is from rising edge to rising edge or from falling edge to falling edge.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.Count" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the current value of the count register.</summary>
<value>Indicates the current value of the count register.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.OutputState" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OutputState" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::COOutputState">
      <summary>Indicates the current state of the output terminal of the counter.</summary>
<value>Indicates the current state of the output terminal of the counter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.AutoIncrementCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AutoIncrementCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies a number of timebase ticks by which to increase the time spent in the idle state for each successive pulse.</summary>
<value>Specifies a number of timebase ticks by which to increase the time spent in the idle state for each successive pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
When this value is greater than 0, NI-DAQmx generates progressively longer pulses until the count register rolls over. At that point, the generated 
pulses return to the original pulse width and grow progressively longer until the count register rolls over again.
</para>

<para>
Use this property to provide a clock to an analog input channel for equivalent time sampling (ETS).  ETS is a data acquisition technique in which 
data on a periodic waveform with a frequency higher than the Nyquist frequency of the system is obtained by sampling the waveform at instants in 
time skewed in relation to the beginning of each period of the waveform.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseMasterTimebaseDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterTimebaseMasterTimebaseDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the divisor for an external counter timebase. You can divide the counter timebase in order to generate slower signals without causing the count register to roll over.</summary>
<value>Specifies the divisor for an external counter timebase. You can divide the counter timebase in order to generate slower signals without causing the count register to roll over.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.PulseDone" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseDone" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the task completed pulse generation. Use this value for retriggerable pulse generation when you need to determine if the device generated the current pulse. For retriggerable tasks, when you query this property, NI-DAQmx resets it to <see langword="false" />.</summary>
<value>Indicates if the task completed pulse generation. Use this value for retriggerable pulse generation when you need to determine if the device generated the current pulse. For retriggerable tasks, when you query this property, NI-DAQmx resets it to <see langword="false" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.EnableInitialDelayOnRetrigger" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="EnableInitialDelayOnRetrigger" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the <see href="javascript:launchSharedHelp('mxcncpts.chm::/pulseTrainPolarity.html');">initial delay</see> to retriggered pulse trains.</summary>
<value>Specifies whether to apply the <see href="javascript:launchSharedHelp('mxcncpts.chm::/pulseTrainPolarity.html');">initial delay</see> to retriggered pulse trains.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.ConstrainedGenerationMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ConstrainedGenerationMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::COConstrainedGenerationMode">
      <summary>Specifies constraints to apply when the counter generates pulses. Constraining the counter reduces the device resources required for counter operation. Constraining the counter can also allow additional analog or counter tasks on the device to run concurrently. For continuous counter tasks, NI-DAQmx consumes no device resources when the counter is constrained. For finite counter tasks, resource use increases with the frequency regardless of the constraint mode. However, fixed frequency constraints significantly reduce resource usage, and fixed duty cycle constraint marginally reduces it.</summary>
<value>Specifies constraints to apply when the counter generates pulses. Constraining the counter reduces the device resources required for counter operation. Constraining the counter can also allow additional analog or counter tasks on the device to run concurrently. For continuous counter tasks, NI-DAQmx consumes no device resources when the counter is constrained. For finite counter tasks, resource use increases with the frequency regardless of the constraint mode. However, fixed frequency constraints significantly reduce resource usage, and fixed duty cycle constraint marginally reduces it.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.UseOnlyOnBoardMemory" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="UseOnlyOnBoardMemory" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to write samples directly to the onboard memory of the device, bypassing the memory buffer. Generally, you cannot update onboard memory directly after you start the task. Onboard memory includes data FIFOs.</summary>
<value>Specifies whether to write samples directly to the onboard memory of the device, bypassing the memory buffer. Generally, you cannot update onboard memory directly after you start the task. Onboard memory includes data FIFOs.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.DataTransferMechanism" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DataTransferMechanism" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CODataTransferMechanism">
      <summary>Specifies the data transfer mode for the device. For buffered operations, use DMA or USB Bulk. For non-buffered operations, use Polled.</summary>
<value>Specifies the data transfer mode for the device. For buffered operations, use DMA or USB Bulk. For non-buffered operations, use Polled.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.DataTransferRequestCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DataTransferRequestCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CODataTransferRequestCondition">
      <summary>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</summary>
<value>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.UsbTransferRequestSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum size of a USB transfer request in bytes. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.UsbTransferRequestCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="UsbTransferRequestCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</summary>
<value>Specifies the maximum number of simultaneous USB transfers used to stream data. Modify this value to affect performance under different combinations of operating system and device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.MemoryMappingEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="MemoryMappingEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</summary>
<value>Specifies for NI-DAQmx to map hardware registers to the memory space of the application, if possible. Normally, NI-DAQmx maps hardware registers to memory accessible only to the kernel. Mapping the registers to the memory space of the application increases performance. However, if the application accesses the memory space mapped to the registers, it can adversely affect the operation of the device and possibly result in a system crash.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.Prescaler" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Prescaler" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the divisor to apply to the signal you connect to the counter source terminal. Pulse generations defined by frequency or time take this setting into account, but pulse generations defined by ticks do not. You should use a prescaler only when you connect an external signal to the counter source terminal and when that signal has a higher frequency than the fastest onboard timebase.</summary>
<value>Specifies the divisor to apply to the signal you connect to the counter source terminal. Pulse generations defined by frequency or time take this setting into account, but pulse generations defined by ticks do not. You should use a prescaler only when you connect an external signal to the counter source terminal and when that signal has a higher frequency than the fastest onboard timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannel.ReadyForNewValue" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForNewValue" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the counter is ready for new continuous pulse train values.</summary>
<value>Indicates whether the counter is ready for new continuous pulse train values.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.Timing" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Timing" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/smpleTimingType.html');">sample timing</see> and duration of the <see cref="T:NationalInstruments.DAQmx.Task" />. 
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.Timing" />
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureSampleClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureSampleClock" nihasget="0" nihasset="0" niparameters="signalSource,rate,activeEdge,sampleMode,samplesPerChannel" niparametertypes="System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32" nireturnvaluetype="System.Void">
      <summary>Sets the source of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/sampClock.html');">sample clock</see>, the rate of the sample clock, and the number of samples to acquire or generate.</summary>
<param name="signalSource">The source <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> of the clock. To use the internal clock of the device, set this value to <see cref="F:System.String.Empty" />. </param>
<param name="rate">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/smpleRate.html');">sampling rate</see> in samples per second. If you use an external source for the sample clock, set this input to the maximum expected rate of that clock. 
</param>
<param name="activeEdge">The edges of sample clock pulses on which to acquire or generate samples.
</param>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples have been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<param name="samplesPerChannel">The number of samples to acquire or generate if <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />. If sample mode is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  this method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
<para>You cannot apply  this method to a subset of devices in the task, and you must apply  this method to the task as a whole.  You must call  this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing  this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureHandshaking(NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureHandshaking" nihasget="0" nihasset="0" niparameters="sampleMode,samplesPerChannel" niparametertypes="NationalInstruments.DAQmx.SampleQuantityMode,System.Int32" nireturnvaluetype="System.Void">
      <summary>Determines the sample timing and duration of the task with the specified number of samples, using standard 8255/82C55 <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Handshaking.html');">digital handshaking</see> between the device and a peripheral device.</summary>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples has been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<param name="samplesPerChannel">The number of samples to acquire or generate for each channel in the task if <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />. If <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.
</param>
<remarks>
<para>
Use this method if the task requires a finite number of samples. These <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/handTiming.html');">devices</see> support handshake timing.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<para>You cannot apply this method to a subset of devices in the task, and you must apply this method to the task as a whole.  You must call this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureImplicit(NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureImplicit" nihasget="0" nihasset="0" niparameters="sampleMode,samplesPerChannel" niparametertypes="NationalInstruments.DAQmx.SampleQuantityMode,System.Int32" nireturnvaluetype="System.Void">
      <summary>Sets only the duration of the task and the number of samples to acquire or generate without specifying timing.</summary>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples have been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<param name="samplesPerChannel">
The number of samples to acquire or generate for each channel in the task if <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />.  For finite counter output tasks, <paramref name="samplesPerChannel" /> is the number of pulses to generate. If sample mode is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.</param>
<remarks>
<para>
Typically, you use <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/smpleTimingType.html');">implicit timing</see> when sample timing is not required for the task, such as for a task that uses counters for buffered frequency measurement, buffered period measurement, or pulse train generation. Use this method if the task requires a finite number of samples.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified. This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<para>You cannot apply this method to a subset of devices in the task, and you must apply this method to the task as a whole.  You must call  this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureSampleClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.SampleQuantityMode)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureSampleClock" nihasget="0" nihasset="0" niparameters="signalSource,rate,activeEdge,sampleMode" niparametertypes="System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.SampleQuantityMode" nireturnvaluetype="System.Void">
      <summary>Sets the source of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/sampClock.html');">sample clock</see> and the rate of the sample clock.</summary>
<param name="signalSource">The source <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> of the clock. To use the internal clock of the device, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="rate">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/smpleRate.html');">sampling rate</see> in samples per second. If you use an external source for the sample clock, set this input to the maximum expected rate of that clock. 
</param>
<param name="activeEdge">The edges of sample clock pulses on which to acquire or generate samples.
</param>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples have been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
<para>You cannot apply  this method to a subset of devices in the task, and you must apply  this method to the task as a whole.  You must call  this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing  this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureImplicit(NationalInstruments.DAQmx.SampleQuantityMode)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureImplicit" nihasget="0" nihasset="0" niparameters="sampleMode" niparametertypes="NationalInstruments.DAQmx.SampleQuantityMode" nireturnvaluetype="System.Void">
      <summary>Sets only the duration of the task without specifying timing.</summary>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples have been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<remarks>
<para>
Typically, you use <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/smpleTimingType.html');">implicit timing</see> when sample timing is not required for the task, such as for a task that uses counters for buffered frequency measurement, buffered period measurement, or pulse train generation. Use this method for continuous operations.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<para>You cannot apply this method to a subset of devices in the task, and you must apply this method to the task as a whole.  You must call  this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureHandshaking(NationalInstruments.DAQmx.SampleQuantityMode)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureHandshaking" nihasget="0" nihasset="0" niparameters="sampleMode" niparametertypes="NationalInstruments.DAQmx.SampleQuantityMode" nireturnvaluetype="System.Void">
      <summary>Determines the sample timing and duration of the task using standard 8255/82C55 <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Handshaking.html');">digital handshaking</see> between the device and a peripheral device.</summary>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples has been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<remarks>
<para>
Use this method for continuous operations. These <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/handTiming.html');">devices</see> support handshake timing.

</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<para>You cannot apply this method to a subset of devices in the task, and you must apply this method to the task as a whole.  You must call this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureChangeDetection(System.String,System.String,NationalInstruments.DAQmx.SampleQuantityMode)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureChangeDetection" nihasget="0" nihasset="0" niparameters="diRisingEdgePhysicalChannels,diFallingEdgePhysicalChannels,sampleMode" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.SampleQuantityMode" nireturnvaluetype="System.Void">
      <summary>Configures the task to acquire samples on the rising and/or falling edges of the specified lines or ports.
</summary>
<param name="diRisingEdgePhysicalChannels">The names of the digital lines or ports on which to detect rising edges. The lines or ports must be contained in the task.  You can specify a string that defines a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">list or range</see> of channels for this parameter.
</param>
<param name="diFallingEdgePhysicalChannels">The names of the digital lines or ports on which to detect falling edges. The lines or ports must be contained in the task.  You can specify a string that defines a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">list or range</see> of channels for this parameter.
</param>
<param name="sampleMode">The duration of the task. A task is either finite and stops when the specified number of samples have been acquired, or it is continuous and continues to acquire samples until the task is explicitly stopped.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>Use this method to configure a task to continuously acquire samples using <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/smpleTimingType.html');">change detection timing</see>.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="Overload:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task. You start the task with <see cref="M:NationalInstruments.DAQmx.Task.Start" />, by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<para>You cannot apply this method to a subset of devices in the task, and you must apply this method to the task as a whole.  You must call  this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureChangeDetection(System.String,System.String,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureChangeDetection" nihasget="0" nihasset="0" niparameters="diRisingEdgePhysicalChannels,diFallingEdgePhysicalChannels,sampleMode,samplesPerChannel" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32" nireturnvaluetype="System.Void">
      <summary>Configures the task to acquire samples on the rising and/or falling edges of the specified lines or ports and sets the number of samples to acquire.</summary>
<param name="diRisingEdgePhysicalChannels">The names of the digital lines or ports on which to detect rising edges. The lines or ports must be contained in the task.  You can specify a string that defines a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">list or range</see> of channels for this parameter.
</param>
<param name="diFallingEdgePhysicalChannels">The names of the digital lines or ports on which to detect falling edges. The lines or ports must be contained in the task.  You can specify a string that defines a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">list or range</see> of channels for this parameter.
</param>
<param name="sampleMode">The duration of the task. A task is either finite and stops when the specified number of samples have been acquired, or it is continuous and continues to acquire samples until the task is explicitly stopped.</param>
<param name="samplesPerChannel">The number of samples to acquire from each channel in the task if <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />. If <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
</para>Use this  method to configure a task to acquire a finite number of samples using <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/smpleTimingType.html');">change detection timing</see>.<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para><para>You cannot apply this method to a subset of devices in the task, and you must apply this method to the task as a whole.  You must call  this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para></remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SinglePoint" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SinglePoint" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SinglePoint">
      <summary>Gets an instance of <see cref="T:NationalInstruments.DAQmx.SinglePoint" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.SinglePoint" /> instance.</value>
<remarks>
<para>You cannot apply <see cref="T:NationalInstruments.DAQmx.SinglePoint" /> to a subset of devices in the task and you must apply <see cref="T:NationalInstruments.DAQmx.SinglePoint" /> to the task as a whole.  Call <see cref="T:NationalInstruments.DAQmx.SinglePoint" /> on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing <see cref="T:NationalInstruments.DAQmx.SinglePoint" /> on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstImportClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureHandshakingBurstImportClock" nihasget="0" nihasset="0" niparameters="signalSource,rate,activeEdge,pauseCondition,level,sampleMode,samplesPerChannel" niparametertypes="System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32" nireturnvaluetype="System.Void">
      <summary>Determines when the DAQ device transfers data to a peripheral device, using an imported sample clock to control
<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/smpleTimingType.html');">burst handshake timing</see>.</summary>
<param name="signalSource">The source <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> of the sample clock. To use the internal clock of the device, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="rate">The rate of the sample clock, in hertz.  
</param>
<param name="activeEdge">The edges of the sample clock pulses on which to acquire or generate samples.
</param>
<param name="pauseCondition">Specifies whether the task pauses while the trigger signal is high or low.
</param>
<param name="level">The active level for the data transfer event.
</param>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples has been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<param name="samplesPerChannel">The number of samples to acquire or generate for each channel in the task if <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />. If <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.
</param>
<remarks>
<para>These <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/burstHandTiming.html');">devices</see> support burst handshake timing for digital I/O.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstImportClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<para>You cannot apply <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstImportClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> to a subset of devices in the task, and you must apply <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstImportClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> to the task as a whole.  You must call <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstImportClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstExportClock(System.String,System.Double,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleClockPulsePolarity,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureHandshakingBurstExportClock" nihasget="0" nihasset="0" niparameters="sampleClockOutputTerminal,rate,pauseCondition,level,pulsePolarity,sampleMode,samplesPerChannel" niparametertypes="System.String,System.Double,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleClockPulsePolarity,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32" nireturnvaluetype="System.Void">
      <summary>Determines when the DAQ device transfers data to a peripheral device, using the onboard sample clock of the DAQ device to control  <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/smpleTimingType.html');">burst handshake timing</see> and exporting that clock for use by the peripheral device.
</summary>
<param name="sampleClockOutputTerminal">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> to which to export the sample clock.
</param>
<param name="rate">The rate of the sample clock, in hertz.  
</param>
<param name="pauseCondition">Specifies whether the task pauses while the trigger signal is high or low.
</param>
<param name="level">The active level for the data transfer event.
</param>
<param name="pulsePolarity">The polarity of the exported sample clock.
</param>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples has been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<param name="samplesPerChannel">The number of samples to acquire or generate for each channel in the task if <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />. If <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.
</param>
<remarks>
<para>These <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/burstHandTiming.html');">devices</see> support burst handshake timing for digital I/O.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstExportClock(System.String,System.Double,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleClockPulsePolarity,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<para>You cannot apply <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstExportClock(System.String,System.Double,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleClockPulsePolarity,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> to a subset of devices in the task, and you must apply <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstExportClock(System.String,System.Double,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleClockPulsePolarity,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> to the task as a whole.  You must call  <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureHandshakingBurstExportClock(System.String,System.Double,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition,NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel,NationalInstruments.DAQmx.SampleClockPulsePolarity,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.Item(System.String)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="deviceNames" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.Timing">
      <summary>Gets  an instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> that contains settings for only the specified devices.  In Visual C#, this property is the indexer.</summary>
<param name="deviceNames">One or more device names that the retrieved <see cref="T:NationalInstruments.DAQmx.Timing" /> class operates on.  Use a comma to separate multiple device names.  You may pass <see cref="F:System.String.Empty" /> or <see langword="null" /> to specify all devices in the task.</param>
<value>The specified instance of <see cref="T:NationalInstruments.DAQmx.Timing" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>Use the  <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property to retrieve an instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> that applies only to certain devices in your task.  <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> allows you to set timing properties differently on different devices in your task.  If you want to set a property on all devices in the task, you can use the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property of the <see cref="T:NationalInstruments.DAQmx.Task" /> class.</para>
<para>This property is only supported by certain National Instruments devices.  Please refer to your product-specific documentation to determine which properties, if any, you can set on a device-specific basis.</para>
<para>Some members of the <see cref="T:NationalInstruments.DAQmx.Timing" /> class do not apply to a subset of devices in the task and apply only to the task as a whole.  You must call these members on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property of the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing these members on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from this  property throws an exception.  These members include the <see cref="P:NationalInstruments.DAQmx.Timing.SinglePoint" /> property, this property, and configuration methods, like <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureSampleClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" />.</para>
<para>You can use the <see cref="P:NationalInstruments.DAQmx.Task.Devices" /> property to determine what devices are in a task.</para>
</remarks>
<seealso cref="P:NationalInstruments.DAQmx.Task.Devices" />
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.ConfigurePipelinedSampleClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigurePipelinedSampleClock" nihasget="0" nihasset="0" niparameters="signalSource,rate,activeEdge,sampleMode,samplesPerChannel" niparametertypes="System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32" nireturnvaluetype="System.Void">
      <summary>Sets the source of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/sampClock.html');">sample clock</see>, the rate of the sample clock, the number of samples to acquire or generate, and configures the sample clock for pipelining. </summary>
<param name="signalSource">The source <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> of the clock. To use the internal clock of the device, set this value to <see cref="F:System.String.Empty" />. </param>
<param name="rate">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/smpleRate.html');">sampling rate</see> in samples per second. If you use an external source for the sample clock, set this input to the maximum expected rate of that clock. 
</param>
<param name="activeEdge">The edges of sample clock pulses on which to acquire or generate samples.
</param>
<param name="sampleMode">The duration of the task. A task is either finite and stops once the specified number of samples have been acquired or generated, or it is continuous and continues to acquire or generate samples until the task is explicitly stopped.</param>
<param name="samplesPerChannel">The number of samples to acquire or generate if <paramref name="sampleMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />. If sample mode is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The device acquires or generates samples on each sample clock edge, but does not respond to certain triggers until a few sample clock edges later. Pipelining allows higher data transfer rates at the cost of increased trigger response latency. Refer to the device documentation for information about which triggers pipelining affects. 
This timing type allows handshaking using the Pause trigger, the Ready for Transfer event, or the Data Active event. Refer to the device documentation for more information. 
<para>This timing type is supported only by the NI 6536 and NI 6537.</para><para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para><para>You cannot apply this method to a subset of devices in the task, and you must apply  this method to the task as a whole.  You must call  this method on the instance of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Task.Timing" /> property on the <see cref="T:NationalInstruments.DAQmx.Task" /> class.  Accessing  this method on instances of <see cref="T:NationalInstruments.DAQmx.Timing" /> returned from the <see cref="P:NationalInstruments.DAQmx.Timing.Item(System.String)" /> property throws an exception.</para></remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockTimingResponseMode" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleClockTimingResponseMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SampleClockTimingResponseMode">
      <summary>Specifies how the device responds to the sample clock and to triggers.  This property has been deprecated in favor of the <see cref="M:NationalInstruments.DAQmx.Timing.ConfigurePipelinedSampleClock(System.String,System.Double,NationalInstruments.DAQmx.SampleClockActiveEdge,NationalInstruments.DAQmx.SampleQuantityMode,System.Int32)" /> method.</summary>
<value>Specifies how the device responds to the sample clock and to triggers.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Timing.GetService(System.Type)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetService" nihasget="0" nihasset="0" niparameters="serviceType" niparametertypes="System.Type" nireturnvaluetype="System.Object">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.ChangeDetectionOverflowed" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ChangeDetectionOverflowed" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if samples were missed because change detection events occurred faster than the device could handle them. <see href="javascript:launchSharedHelp('mxdevconsid.chm::/ChangeDetStaticDIO.html');">Some devices</see> detect overflows differently than others.</summary>
<value>Indicates if samples were missed because change detection events occurred faster than the device could handle them. <see href="javascript:launchSharedHelp('mxdevconsid.chm::/ChangeDetStaticDIO.html');">Some devices</see> detect overflows differently than others.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleQuantityMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleQuantityMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::SampleQuantityMode">
      <summary>Specifies if a task acquires or generates a finite number of samples or if it continuously acquires or generates samples.</summary>
<value>Specifies if a task acquires or generates a finite number of samples or if it continuously acquires or generates samples.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For an analog input task with a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>, you must set this property to <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" /> even though the task runs continuously until the Reference Trigger occurs.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SamplesPerChannel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of samples to acquire or generate for each channel if <see cref="P:NationalInstruments.DAQmx.Timing.SampleQuantityMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />. If <see cref="P:NationalInstruments.DAQmx.Timing.SampleQuantityMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:launchSharedHelp('mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.</summary>
<value>Specifies the number of samples to acquire or generate for each channel if <see cref="P:NationalInstruments.DAQmx.Timing.SampleQuantityMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" />. If <see cref="P:NationalInstruments.DAQmx.Timing.SampleQuantityMode" /> is <see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" />, NI-DAQmx uses this value to <see href="javascript:launchSharedHelp('mxcncpts.chm::/bufferSize.html');">determine the buffer size</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
To configure an analog output task to generate a finite number of cycles of a waveform, set this property to 
(desired number of cycles) * (number of samples per cycle). 
</para>

<para>
This property affects the
<see href="javascript:launchSharedHelp('mxcncpts.chm::/bufferSize.html');">buffer allocation</see> for the task.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleTimingType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleTimingType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::SampleTimingType">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/smpleTimingType.html');">type of sample timing</see> to use for the task.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/smpleTimingType.html');">type of sample timing</see> to use for the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
Select <see cref="F:NationalInstruments.DAQmx.SampleTimingType.SampleClock" /> when a hardware signal (usually a clock) must acquire or produce samples. To perform buffered edge 
counting, for example, select <see cref="F:NationalInstruments.DAQmx.SampleTimingType.SampleClock" /> and use <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockSource" /> to specify the source of the Sample clock. 
</para>

<para>
Select <see cref="F:NationalInstruments.DAQmx.SampleTimingType.Handshake" /> to use bidirectional hardware signals to time the exchange of digital data between two devices. 
</para>

<para>
Select <see cref="F:NationalInstruments.DAQmx.SampleTimingType.BurstHandshake" /> to run at a slower rate but with the capability for per sample evaluation of triggers and events to pause the operation.
</para>

<para>
Select <see cref="F:NationalInstruments.DAQmx.SampleTimingType.PipelinedSampleClock" /> on supported devices to run at the maximum sample rate with a few Sample clock cycles delay before the device can respond to triggers and events.
</para>

<para>
Select <see cref="F:NationalInstruments.DAQmx.SampleTimingType.OnDemand" /> to acquire data only when reading from the task executes or to generate data only when writing to the task
executes. 
</para>

<para>
Select <see cref="F:NationalInstruments.DAQmx.SampleTimingType.Implicit" /> to perform a buffered period or frequency counter measurement or to generate a finite pulse train. 
</para>

<para>
Select <see cref="F:NationalInstruments.DAQmx.SampleTimingType.ChangeDetection" /> to capture data only when certain digital lines change states and without continuously transferring unnecessary data during periods of inactivity.
</para>

</remarks>


</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the sampling rate in samples per channel per second. If you use an external source for the Sample Clock, set this input to the maximum expected rate of that clock.</summary>
<value>Specifies the sampling rate in samples per channel per second. If you use an external source for the Sample Clock, set this input to the maximum expected rate of that clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockMaximumRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockMaximumRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the maximum Sample Clock rate supported by the task, based on other timing settings. For output tasks, the maximum Sample Clock rate is the maximum rate of the DAC. For input tasks, NI-DAQmx calculates the maximum sampling rate differently for <see href="javascript:launchSharedHelp('mxcncpts.chm::/MultiSimulSamp.html');">multiplexed devices than simultaneous sampling devices</see>.</summary>
<value>Indicates the maximum Sample Clock rate supported by the task, based on other timing settings. For output tasks, the maximum Sample Clock rate is the maximum rate of the DAC. For input tasks, NI-DAQmx calculates the maximum sampling rate differently for <see href="javascript:launchSharedHelp('mxcncpts.chm::/MultiSimulSamp.html');">multiplexed devices than simultaneous sampling devices</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For multiplexed devices, NI-DAQmx calculates the maximum sample clock rate based on the maximum AI Convert Clock rate unless you set <see cref="P:NationalInstruments.DAQmx.Timing.AIConvertRate" />. If you set that property, 
NI-DAQmx calculates the maximum sample clock rate based on that setting. Use <see cref="P:NationalInstruments.DAQmx.Timing.AIConvertMaximumRate" /> to query the maximum AI Convert Clock rate.
NI-DAQmx also uses the minimum sample clock delay to calculate the maximum sample clock rate unless you set <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClock" />.
</para>
<para>
For simultaneous sampling devices, the maximum Sample Clock rate is the maximum rate of the ADC. 
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the Sample Clock.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the Sample Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockActiveEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockActiveEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::SampleClockActiveEdge">
      <summary>Specifies on which edge of a clock pulse sampling takes place. This property is useful primarily when the signal you use as the Sample Clock is not a periodic clock.</summary>
<value>Specifies on which edge of a clock pulse sampling takes place. This property is useful primarily when the signal you use as the Sample Clock is not a periodic clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockOverrunBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockOverrunBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::SampleClockOverrunBehavior">
      <summary>Specifies the action to take if Sample Clock edges occur faster than the device can handle them.</summary>
<value>Specifies the action to take if Sample Clock edges occur faster than the device can handle them.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockUnderflowBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockUnderflowBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::SampleClockUnderflowBehavior">
      <summary>Specifies the action to take when the onboard memory of the device becomes empty.</summary>
<value>Specifies the action to take when the onboard memory of the device becomes empty.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTimebaseDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of Sample Clock Timebase pulses needed to produce a single Sample Clock pulse.</summary>
<value>Specifies the number of Sample Clock Timebase pulses needed to produce a single Sample Clock pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
The rate of the Sample Clock is equal to (frequency of Sample Clock Timebase) / (value of this property).
</para>

<para>
If the Sample Clock Timebase is not a periodic clock, the value of this property determines the number 
of Sample Clock Timebase edges that the device must receive before producing each Sample Clock pulse. Use <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseActiveEdge" /> to specify
the polarity of these edges.
</para>

<para>
Setting this property has a similar effect to setting <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockRate" />. Use <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockRate" /> when you know the rate of the Sample Clock Timebase 
and you want to acquire or generate samples at the specified rate. Use this property when you have an external timebase that 
you want to divide down and use as the Sample Clock, but you do not know rate of the external timebase.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTerminal" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the name of the internal Sample Clock terminal for the task. This property does not return the name of the Sample Clock source terminal specified with <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockSource" />.</summary>
<value>Indicates the name of the internal Sample Clock terminal for the task. This property does not return the name of the Sample Clock source terminal specified with <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockSource" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the rate of the Sample Clock Timebase. Some applications require that you specify a rate when you use any signal other than the onboard Sample Clock Timebase. NI-DAQmx requires this rate to calculate other timing parameters.</summary>
<value>Specifies the rate of the Sample Clock Timebase. Some applications require that you specify a rate when you use any signal other than the onboard Sample Clock Timebase. NI-DAQmx requires this rate to calculate other timing parameters.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the Sample Clock Timebase.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the Sample Clock Timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseActiveEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTimebaseActiveEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::SampleClockTimebaseActiveEdge">
      <summary>Specifies on which edge to recognize a Sample Clock Timebase pulse. This property is useful primarily when the signal you use as the Sample Clock Timebase is not a periodic clock.</summary>
<value>Specifies on which edge to recognize a Sample Clock Timebase pulse. This property is useful primarily when the signal you use as the Sample Clock Timebase is not a periodic clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseMasterTimebaseDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTimebaseMasterTimebaseDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of pulses of the Master Timebase needed to produce a single pulse of the Sample Clock Timebase.</summary>
<value>Specifies the number of pulses of the Master Timebase needed to produce a single pulse of the Sample Clock Timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
The rate of the Sample Clock Timebase is equal to (frequency of Master Timebase) / (value of this property). The only valid values for this property are 1 and 200.
</para>

<para>
Setting this property has a similar effect to setting <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseRate" />. Use <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseRate" /> when you know the rate of the Master Timebase 
and you want to produce a Sample Clock Timebase at the specified rate. Use this property when you have an external Master Timebase that 
you want to divide down and use as the Sample Clock Timebase, but you do not know rate of that external Master Timebase.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTimebaseTerminal" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the name of the internal Sample Clock Timebase terminal for the task. This property does not return the name of the Sample Clock Timebase source terminal specified with <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseSource" />.</summary>
<value>Indicates the name of the internal Sample Clock Timebase terminal for the task. This property does not return the name of the Sample Clock Timebase source terminal specified with <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseSource" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockDigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockDigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockDigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockDigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockDigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockDigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockDigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockDigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleClockDigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockDigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.HandshakeDelayAfterTransfer" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HandshakeDelayAfterTransfer" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the number of seconds to wait after a handshake cycle before starting a new handshake cycle.</summary>
<value>Specifies the number of seconds to wait after a handshake cycle before starting a new handshake cycle.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.HandshakeStartCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HandshakeStartCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::HandshakeStartCondition">
      <summary>Specifies the point in the handshake cycle that the device is in when the task starts.</summary>
<value>Specifies the point in the handshake cycle that the device is in when the task starts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.HandshakeSampleInputDataCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HandshakeSampleInputDataCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::HandshakeSampleInputDataCondition">
      <summary>Specifies on which edge of the Handshake Trigger an input task latches the data from the peripheral device.</summary>
<value>Specifies on which edge of the Handshake Trigger an input task latches the data from the peripheral device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.ChangeDetectionDIRisingEdgePhysicalChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ChangeDetectionDIRisingEdgePhysicalChannels" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the names of the digital lines or ports on which to detect rising edges. The lines or ports must be used by virtual channels in the task. You also can specify a string that contains a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list or range</see> of digital lines or ports.</summary>
<value>Specifies the names of the digital lines or ports on which to detect rising edges. The lines or ports must be used by virtual channels in the task. You also can specify a string that contains a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list or range</see> of digital lines or ports.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.ChangeDetectionDIFallingEdgePhysicalChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ChangeDetectionDIFallingEdgePhysicalChannels" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the names of the digital lines or ports on which to detect falling edges. The lines or ports must be used by virtual channels in the task. You also can specify a string that contains a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list or range</see> of digital lines or ports.</summary>
<value>Specifies the names of the digital lines or ports on which to detect falling edges. The lines or ports must be used by virtual channels in the task. You also can specify a string that contains a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list or range</see> of digital lines or ports.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.ChangeDetectionDITristate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ChangeDetectionDITristate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to tristate lines specified with <see cref="P:NationalInstruments.DAQmx.Timing.ChangeDetectionDIRisingEdgePhysicalChannels" /> and <see cref="P:NationalInstruments.DAQmx.Timing.ChangeDetectionDIFallingEdgePhysicalChannels" /> that are not in a virtual channel in the task. If you set this property to <see langword="true" />, NI-DAQmx tristates rising/falling edge lines that are not in a virtual channel in the task. If you set this property to <see langword="false" />, NI-DAQmx does not modify the configuration of rising/falling edge lines that are not in a virtual channel in the task, even if the lines were previously tristated. Set this property to <see langword="false" /> to detect changes on lines in other tasks or to detect changes on output-only lines.</summary>
<value>Specifies whether to tristate lines specified with <see cref="P:NationalInstruments.DAQmx.Timing.ChangeDetectionDIRisingEdgePhysicalChannels" /> and <see cref="P:NationalInstruments.DAQmx.Timing.ChangeDetectionDIFallingEdgePhysicalChannels" /> that are not in a virtual channel in the task. If you set this property to <see langword="true" />, NI-DAQmx tristates rising/falling edge lines that are not in a virtual channel in the task. If you set this property to <see langword="false" />, NI-DAQmx does not modify the configuration of rising/falling edge lines that are not in a virtual channel in the task, even if the lines were previously tristated. Set this property to <see langword="false" /> to detect changes on lines in other tasks or to detect changes on output-only lines.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.OnDemandAOIsSimultaneous" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="OnDemandAOIsSimultaneous" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to update all channels in the task simultaneously, rather than updating channels independently when you write a sample to that channel.</summary>
<value>Specifies whether to update all channels in the task simultaneously, rather than updating channels independently when you write a sample to that channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.ImplicitUnderflowBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ImplicitUnderflowBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ImplicitUnderflowBehavior">
      <summary>Specifies the action to take when the onboard memory of the device becomes empty.</summary>
<value>Specifies the action to take when the onboard memory of the device becomes empty.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.AIConvertRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AIConvertRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in Hertz the rate at which to clock the analog-to-digital converter. This clock is specific to the analog input section of <see href="javascript:launchSharedHelp('mxcncpts.chm::/MultiSimulSamp.html');">multiplexed devices</see>.</summary>
<value>Specifies in Hertz the rate at which to clock the analog-to-digital converter. This clock is specific to the analog input section of <see href="javascript:launchSharedHelp('mxcncpts.chm::/MultiSimulSamp.html');">multiplexed devices</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>
By default, NI-DAQmx selects the maximum convert rate supported by the device, plus up to 10 microseconds per channel settling time. 
Other task settings, such as high channel counts or setting <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClock" />, can result in a faster default convert rate.
</para>
<para>
CompactDAQ applies up to 10 microseconds of settling time for all C Series devices even if the maximum convert rates of the devices differ.
</para>
<para>
If you connect signal conditioning accessories with track and hold capabilities, such as an SCXI module, to the device, NI-DAQmx uses the fastest
convert rate possible that meets the settling requirements for the slowest module sampled. Refer to the device documentation for the signal conditioning accessory 
for more information.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.AIConvertMaximumRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AIConvertMaximumRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the maximum convert rate supported by the task, given the current devices and channel count.</summary>
<value>Indicates the maximum convert rate supported by the task, given the current devices and channel count.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This rate is generally faster than the default AI Convert Clock rate selected by NI-DAQmx, because NI-DAQmx adds in an additional 10 microseconds per channel settling time to 
compensate for most potential system settling constraints.
</para>
<para>
For single channel tasks, the maximum AI Convert Clock rate is the maximum rate of the ADC. 
For multiple channel tasks, the maximum AI Convert Clock rate is the maximum convert rate of the analog hardware, including the ADC, filters, multiplexers, and amplifiers.
Signal conditioning accessories can further constrain the maximum AI Convert Clock based on timing and settling requirements.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.AIConvertSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AIConvertSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the AI Convert Clock.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the AI Convert Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.AIConvertActiveEdge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AIConvertActiveEdge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIConvertActiveEdge">
      <summary>Specifies on which edge of the clock pulse an analog-to-digital conversion takes place.</summary>
<value>Specifies on which edge of the clock pulse an analog-to-digital conversion takes place.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>
This property is useful primarily when the signal you use as the AI Convert Clock is not a periodic clock. For example, set this property 
to <see cref="F:NationalInstruments.DAQmx.AIConvertActiveEdge.Rising" /> to perform an analog to digital conversion on each rising edge of an aperiodic signal.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.AIConvertTimebaseDivisor" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AIConvertTimebaseDivisor" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of AI Convert Clock Timebase pulses needed to produce a single AI Convert Clock pulse.</summary>
<value>Specifies the number of AI Convert Clock Timebase pulses needed to produce a single AI Convert Clock pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.AIConvertTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AIConvertTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIConvertTimebaseSource">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see>  of the signal to use as the AI Convert Clock Timebase.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see>  of the signal to use as the AI Convert Clock Timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClockUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DelayFromSampleClockUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DelayFromSampleClockUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClock" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClock" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>
NI-DAQmx uses the AI Convert Clock timebase to produce the delay.
</para>
<para>
If you set this property to <see cref="F:NationalInstruments.DAQmx.DelayFromSampleClockUnits.Ticks" /> and N is the value of <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClock" />, N pulses of the AI Convert Clock Timebase 
occur after receiving a Sample Clock pulse before the acquisition of the sample begins. 
</para>
<para>
If you set this property to <see cref="F:NationalInstruments.DAQmx.DelayFromSampleClockUnits.Seconds" />, that number of seconds elapses after receiving a Sample Clock pulse before the acquisition of the 
sample begins.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClock" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DelayFromSampleClock" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the amount of time to wait after receiving a Sample Clock edge before beginning to acquire the sample. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClockUnits" />.</summary>
<value>Specifies the amount of time to wait after receiving a Sample Clock edge before beginning to acquire the sample. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClockUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the AI Convert Clock.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the AI Convert Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.MasterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="MasterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the rate of the Master Timebase.</summary>
<value>Specifies the rate of the Master Timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>
This property is useful only when the source of the Master Timebase is not the onboard 20 MHz timebase. NI-DAQmx requires the Master Timebase
rate to calculate other timing parameters.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.MasterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="MasterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the Master Timebase. On an E Series device, you can choose only between the onboard 20MHz Timebase or the RTSI7 terminal.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the Master Timebase. On an E Series device, you can choose only between the onboard 20MHz Timebase or the RTSI7 terminal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.ReferenceClockRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReferenceClockRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the frequency of the Reference Clock.</summary>
<value>Specifies the frequency of the Reference Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.ReferenceClockSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReferenceClockSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the Reference Clock.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the Reference Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationPulseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the synchronization pulse. The synchronization pulse resets the clock dividers and the ADCs/DACs on the device.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the synchronization pulse. The synchronization pulse resets the clock dividers and the ADCs/DACs on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseTime" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationPulseTime" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates in seconds the delay required to reset the ADCs/DACs after the device receives the synchronization pulse.</summary>
<value>Indicates in seconds the delay required to reset the ADCs/DACs after the device receives the synchronization pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This time is the minimum delay required by the device between the receipt of the synchronization pulse and the start of the acquisition. Read this 
property for all slave devices and set <see cref="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseMinimumDelayToStart" /> for the master device to the maximum of these delays.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseMinimumDelayToStart" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationPulseMinimumDelayToStart" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time that elapses after the master device issues the synchronization pulse before the task starts.</summary>
<value>Specifies in seconds the amount of time that elapses after the master device issues the synchronization pulse before the task starts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
Read <see cref="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseTime" /> for all slave devices, and set this property for the master device to the maximum of those values.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseResetTime" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationPulseResetTime" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates in seconds the amount of time required for the ADCs or DACs on the device to reset. When synchronizing devices, query this property on all devices and note the largest reset time. Then, for each device, subtract the value of this property from the largest reset time and set <see cref="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseResetDelay" /> to the resulting value.</summary>
<value>Indicates in seconds the amount of time required for the ADCs or DACs on the device to reset. When synchronizing devices, query this property on all devices and note the largest reset time. Then, for each device, subtract the value of this property from the largest reset time and set <see cref="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseResetDelay" /> to the resulting value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseResetDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationPulseResetDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time to wait after the Synchronization Pulse before resetting the ADCs or DACs on the device. When synchronizing devices, query <see cref="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseResetTime" /> on all devices and note the largest reset time. Then, for each device, subtract the reset time from the largest reset time and set this property to the resulting value.</summary>
<value>Specifies in seconds the amount of time to wait after the Synchronization Pulse before resetting the ADCs or DACs on the device. When synchronizing devices, query <see cref="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseResetTime" /> on all devices and note the largest reset time. Then, for each device, subtract the reset time from the largest reset time and set this property to the resulting value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SynchronizationPulseTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationPulseTerminal" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the name of the internal Synchronization Pulse terminal for the task. This property does not return the name of the source terminal.</summary>
<value>Indicates the name of the internal Synchronization Pulse terminal for the task. This property does not return the name of the source terminal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.ForceSynchronizationPulse" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ForceSynchronizationPulse" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether a synchronization pulse should be generated at start regardless of whether devices in the task are synchronized. When set to false, a synchronization pulse will be generated only if all devices in the task are not synchronized. Some DSA AO devices have unexpected behavior during DAC synchronization. Refer to your device's documentation for more information.</summary>
<value>Specifies whether a synchronization pulse should be generated at start regardless of whether devices in the task are synchronized. When set to false, a synchronization pulse will be generated only if all devices in the task are not synchronized. Some DSA AO devices have unexpected behavior during DAC synchronization. Refer to your device's documentation for more information.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SynchronizationClockInterval" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationClockInterval" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the interval, in Sample Clock periods, between each internal Synchronization Clock pulse. NI-DAQmx uses this pulse for synchronization of triggers between multiple devices at different rates. Refer to device documentation for information about how to calculate this value.</summary>
<value>Specifies the interval, in Sample Clock periods, between each internal Synchronization Clock pulse. NI-DAQmx uses this pulse for synchronization of triggers between multiple devices at different rates. Refer to device documentation for information about how to calculate this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Timing.SampleTimingEngine" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleTimingEngine" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies which <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multitimingengines.html');">timing engine</see> to use for the task.</summary>
<value>Specifies which <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multitimingengines.html');">timing engine</see> to use for the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.StartTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="StartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/startTrig.html');">how the task begins measurement or generation</see>.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Triggers" />
<seealso cref="P:NationalInstruments.DAQmx.Triggers.StartTrigger" />
</member>
    <member name="M:NationalInstruments.DAQmx.StartTrigger.ConfigureNone" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>
Configures the task to start acquiring or generating samples immediately upon starting the task.

</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.StartTrigger.ConfigureNone" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.AnalogWindow" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogWindow" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AnalogWindowStartTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AnalogWindowStartTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.AnalogWindowStartTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.AnalogEdge" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogEdge" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AnalogEdgeStartTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AnalogEdgeStartTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.AnalogEdgeStartTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.DigitalEdge" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalEdgeStartTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalEdgeStartTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalEdgeStartTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.StartTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeStartTriggerEdge)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalEdgeTrigger" nihasget="0" nihasset="0" niparameters="source,edge" niparametertypes="System.String,NationalInstruments.DAQmx.DigitalEdgeStartTriggerEdge" nireturnvaluetype="System.Void">
      <summary>Configures the task to start acquiring or generating samples on a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">rising or falling edge of a digital signal</see>.

</summary>
<param name="source">
The name of a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is a digital signal to use as the source of the trigger.
</param>
<param name="edge">
The edge of the digital signal to start acquiring or generating samples. 
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.StartTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeStartTriggerEdge)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.StartTrigger.ConfigureAnalogWindowTrigger(System.String,NationalInstruments.DAQmx.AnalogWindowStartTriggerCondition,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureAnalogWindowTrigger" nihasget="0" nihasset="0" niparameters="source,condition,top,bottom" niparametertypes="System.String,NationalInstruments.DAQmx.AnalogWindowStartTriggerCondition,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>
Configures the task to start acquiring or generating samples when an <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/algwindowtrig.html');">analog signal enters or leaves a range you specify</see>.
</summary>
<param name="source">
The name of a virtual channel or <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is a digital signal to use as the source of the trigger. For E Series devices, if you use a channel name, the channel must be the first channel in the task. The only terminal you can use for E Series devices is PFI0.
</param>
<param name="condition">
Specifies if the reference trigger occurs when the signal enters the window or leaves the window. Use <paramref name="bottom" /> and <paramref name="top" /> to specify the limits of the window.
</param>
<param name="top">The upper limit of the voltage window, in the units of the measurement or generation.</param>
<param name="bottom">The lower limit of the voltage window, in the units of the measurement or generation.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.StartTrigger.ConfigureAnalogWindowTrigger(System.String,NationalInstruments.DAQmx.AnalogWindowStartTriggerCondition,System.Double,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.StartTrigger.ConfigureAnalogEdgeTrigger(System.String,NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureAnalogEdgeTrigger" nihasget="0" nihasset="0" niparameters="source,slope,level" niparametertypes="System.String,NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the task to start acquiring or generating samples when an <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/analogTriggering.html');">analog signal crosses the level you specify</see>.
</summary>
<param name="source">
The name of a virtual channel or <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is a digital signal to use as the source of the trigger. For E Series devices, if you use a channel name, the channel must be the first channel in the task. The only terminal you can use for E Series devices is PFI0.
</param>
<param name="slope">
The slope of the signal to start acquiring or generating samples when the signal crosses <paramref name="level" />.</param>
<param name="level">The threshold to start acquiring or generating samples, in the units of the measurement or generation. Use <paramref name="slope" /> to specify on which slope to trigger at this threshold. 
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.StartTrigger.ConfigureAnalogEdgeTrigger(System.String,NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.StartTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.StartTrigger.ConfigureDigitalPatternTrigger(System.String,System.String,NationalInstruments.DAQmx.DigitalPatternStartTriggerCondition)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalPatternTrigger" nihasget="0" nihasset="0" niparameters="source,pattern,condition" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.DigitalPatternStartTriggerCondition" nireturnvaluetype="System.Void">
      <summary>Configures the task to start acquiring or generating samples when a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see> is matched.</summary>
<param name="source">
The physical channels to use for pattern matching. The order of the physical channels determines the order of the pattern. If a port is included, the order of the physical channels within the port is in ascending order. 
</param>
<param name="pattern">
The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the trigger to occur. 
</param>
<param name="condition">The condition under which the trigger occurs.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.StartTrigger.ConfigureDigitalPatternTrigger(System.String,System.String,NationalInstruments.DAQmx.DigitalPatternStartTriggerCondition)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.DigitalPattern" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalPattern" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalPatternStartTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalPatternStartTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalPatternStartTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.StartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.StartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.Type" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Type" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::StartTriggerType">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/triggertypes.html');">type</see> of trigger to use to start a task.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/triggertypes.html');">type</see> of trigger to use to start a task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.Terminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Terminal" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the name of the internal Start Trigger terminal for the task. This property does not return the name of the trigger source terminal.</summary>
<value>Indicates the name of the internal Start Trigger terminal for the task. This property does not return the name of the trigger source terminal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.Delay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Delay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies an amount of time to wait after the Start Trigger is received before acquiring or generating the first sample. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.StartTrigger.DelayUnits" />.</summary>
<value>Specifies an amount of time to wait after the Start Trigger is received before acquiring or generating the first sample. This value is in the units you specify with <see cref="P:NationalInstruments.DAQmx.StartTrigger.DelayUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.DelayUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DelayUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::StartTriggerDelayUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.StartTrigger.Delay" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.StartTrigger.Delay" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.StartTrigger.Retriggerable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Retriggerable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether a finite task resets and waits for another Start Trigger after the task completes. When you set this property to <see langword="true" />, the device performs a finite acquisition or generation each time the Start Trigger occurs until the task stops. The device ignores a trigger if it is in the process of acquiring or generating signals.</summary>
<value>Specifies whether a finite task resets and waits for another Start Trigger after the task completes. When you set this property to <see langword="true" />, the device performs a finite acquisition or generation each time the Start Trigger occurs until the task stops. The device ignores a trigger if it is in the process of acquiring or generating signals.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.ReferenceTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReferenceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure the trigger that creates the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/referenceTrigger.html');">reference point between the pretrigger samples and the post-trigger samples</see>. 
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Triggers" />
<seealso cref="P:NationalInstruments.DAQmx.Triggers.ReferenceTrigger" />
</member>
    <member name="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureNone" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Disables <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/referenceTrigger.html');">reference triggering</see> for the measurement.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureNone" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.AnalogWindow" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogWindow" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AnalogWindowReferenceTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.AnalogEdge" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogEdge" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.DigitalEdge" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeReferenceTriggerEdge,System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalEdgeTrigger" nihasget="0" nihasset="0" niparameters="source,edge,pretriggerSamples" niparametertypes="System.String,NationalInstruments.DAQmx.DigitalEdgeReferenceTriggerEdge,System.Int64" nireturnvaluetype="System.Void">
      <summary>Configures the task to stop the acquisition when the device acquires all pretrigger samples, <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">detects a rising or falling edge of a digital signal</see>, and acquires all post-trigger samples.</summary>
<param name="source">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is a digital signal to use as the source of the trigger.</param>
<param name="edge">The edge of the digital signal on which the reference trigger occurs.
</param>
<param name="pretriggerSamples">The minimum number of samples to acquire per channel before recognizing the reference trigger. 
</param>
<remarks>
<para>
The number of post-trigger samples is equal to the value of <see cref="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" /> minus the value of <paramref name="pretriggerSamples" />. If <paramref name="pretriggerSamples" /> equals <see cref="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" />, the measurement or generation stops when the reference trigger occurs. 
</para>
<para>
When you use a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>, the default value of the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadRelativeTo" /> property is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstPretriggerSample" /> with a <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" /> value of 0.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeReferenceTriggerEdge,System.Int64)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureAnalogWindowTrigger(System.String,NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCondition,System.Double,System.Double,System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureAnalogWindowTrigger" nihasget="0" nihasset="0" niparameters="source,condition,top,bottom,pretriggerSamples" niparametertypes="System.String,NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCondition,System.Double,System.Double,System.Int64" nireturnvaluetype="System.Void">
      <summary>Configures the task to stop the acquisition when the device acquires all pretrigger samples; an <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/algwindowtrig.html');">analog signal enters or leaves a range you specify</see>; and the device acquires all post-trigger samples.
</summary>
<param name="source">
The name of a virtual channel or <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is an analog signal to use as the source of the trigger. For E Series devices, if you use a virtual channel, it must be the only channel in the task. The only terminal you can use for E Series devices is PFI0.
</param>
<param name="condition">
Specifies if the reference trigger occurs when the signal enters the window or leaves the window. Use <paramref name="bottom" /> and <paramref name="top" /> to specify the limits of the window.
</param>
<param name="top">The upper limit of the voltage window, in the units of the measurement or generation.</param>
<param name="bottom">The lower limit of the voltage window, in the units of the measurement or generation.</param>
<param name="pretriggerSamples">
The minimum number of samples per channel to acquire before recognizing the reference trigger.
</param>
<remarks>
<para>
The number of post-trigger samples is equal to the value of <see cref="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" /> minus the value of <paramref name="pretriggerSamples" />. If <paramref name="pretriggerSamples" /> equals <see cref="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" />, the measurement or generation stops when the reference trigger occurs. 
</para>
<para>
When you use a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>, the default value of the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadRelativeTo" /> property is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstPretriggerSample" /> with a <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" /> value of 0.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureAnalogWindowTrigger(System.String,NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCondition,System.Double,System.Double,System.Int64)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureAnalogEdgeTrigger(System.String,NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope,System.Double,System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureAnalogEdgeTrigger" nihasget="0" nihasset="0" niparameters="source,slope,level,pretriggerSamples" niparametertypes="System.String,NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope,System.Double,System.Int64" nireturnvaluetype="System.Void">
      <summary>Configures the task to stop the acquisition when the device acquires all pretrigger samples; an <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/analogTriggering.html');">analog signal reaches the level you specify</see>; and the device acquires all post-trigger samples.</summary>
<param name="source">
The name of a virtual channel or <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is an analog signal to use as the source of the trigger. For E Series devices, if you use a virtual channel, it must be the only channel in the task. The only terminal you can use for E Series devices is PFI0.
</param>
<param name="slope">
The slope of the signal on which the reference trigger occurs.</param>
<param name="level">
The threshold, in the units of the measurement or generation, to trigger. Use <paramref name="slope" /> to specify on which slope to trigger 
at this threshold. 
</param>
<param name="pretriggerSamples">
The minimum number of samples per channel to acquire before recognizing the reference trigger.
</param>
<remarks>
<para>
The number of post-trigger samples is equal to the value of <see cref="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" /> minus the value of <paramref name="pretriggerSamples" />. If <paramref name="pretriggerSamples" /> equals <see cref="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" />, the measurement or generation stops when the reference trigger occurs. 
</para>
<para>
When you use a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>, the default value of the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadRelativeTo" /> property is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstPretriggerSample" /> with a <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" /> value of 0.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureAnalogEdgeTrigger(System.String,NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope,System.Double,System.Int64)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ReferenceTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureDigitalPatternTrigger(System.String,System.String,NationalInstruments.DAQmx.DigitalPatternReferenceTriggerCondition,System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalPatternTrigger" nihasget="0" nihasset="0" niparameters="source,pattern,condition,pretriggerSamples" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.DigitalPatternReferenceTriggerCondition,System.Int64" nireturnvaluetype="System.Void">
      <summary>Configures a task to stop the acquisition when the device acquires all pretrigger samples, matches a  <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see>, and acquires all posttrigger samples.</summary>
<param name="source">
The physical channels to use for pattern matching. The order of the physical channels determines the order of the pattern. If a port is included, the order of the physical channels within the port is in ascending order. 
</param>
<param name="pattern">
The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the trigger to occur. 
</param>
<param name="condition">The condition under which the trigger occurs.</param>
<param name="pretriggerSamples">The minimum number of samples to acquire per channel before recognizing the reference trigger.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureDigitalPatternTrigger(System.String,System.String,NationalInstruments.DAQmx.DigitalPatternReferenceTriggerCondition,System.Int64)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.DigitalPattern" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalPattern" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalPatternReferenceTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.ReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.ReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.Type" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Type" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ReferenceTriggerType">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/triggertypes.html');">type</see> of trigger to use to mark a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">reference</see> point for the measurement.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/triggertypes.html');">type</see> of trigger to use to mark a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">reference</see> point for the measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.PretriggerSamples" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PretriggerSamples" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the minimum number of pretrigger samples to acquire from each channel before recognizing the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">reference trigger</see>. Post-trigger samples per channel are equal to <see cref="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" /> minus the number of pretrigger samples per channel.</summary>
<value>Specifies the minimum number of pretrigger samples to acquire from each channel before recognizing the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">reference trigger</see>. Post-trigger samples per channel are equal to <see cref="P:NationalInstruments.DAQmx.Timing.SamplesPerChannel" /> minus the number of pretrigger samples per channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.Terminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Terminal" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the name of the internal Reference Trigger terminal for the task. This property does not return the name of the trigger source terminal.</summary>
<value>Indicates the name of the internal Reference Trigger terminal for the task. This property does not return the name of the trigger source terminal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.AutoTriggerEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AutoTriggerEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to send a software trigger to the device when a hardware trigger is no longer active in order to prevent a timeout.</summary>
<value>Specifies whether to send a software trigger to the device when a hardware trigger is no longer active in order to prevent a timeout.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.AutoTriggered" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AutoTriggered" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether a completed acquisition was triggered by the auto trigger. If an acquisition has not completed after the task starts, this property returns <see langword="false" />. This property is only applicable when <see cref="P:NationalInstruments.DAQmx.ReferenceTrigger.AutoTriggerEnable" />  is <see langword="true" />.</summary>
<value>Indicates whether a completed acquisition was triggered by the auto trigger. If an acquisition has not completed after the task starts, this property returns <see langword="false" />. This property is only applicable when <see cref="P:NationalInstruments.DAQmx.ReferenceTrigger.AutoTriggerEnable" />  is <see langword="true" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ReferenceTrigger.Delay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Delay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the time to wait after the device receives the Reference Trigger before switching from pretrigger to posttrigger samples.</summary>
<value>Specifies in seconds the time to wait after the device receives the Reference Trigger before switching from pretrigger to posttrigger samples.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AdvanceTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdvanceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure how the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/adTrig.html');">switch task advances to the next entry in the scan list</see> and causes the switch to advance programmatically.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Triggers" />
<seealso cref="P:NationalInstruments.DAQmx.Triggers.AdvanceTrigger" />
</member>
    <member name="P:NationalInstruments.DAQmx.AdvanceTrigger.DigitalEdge" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.AdvanceTrigger.ConfigureNone" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Disables <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/adTrig.html');">advance triggering</see> for the task.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AdvanceTrigger.ConfigureNone" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AdvanceTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeAdvanceTriggerEdge)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalEdgeTrigger" nihasget="0" nihasset="0" niparameters="source,edge" niparametertypes="System.String,NationalInstruments.DAQmx.DigitalEdgeAdvanceTriggerEdge" nireturnvaluetype="System.Void">
      <summary>Configures a task to advance to the next entry in a scan list upon a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">rising or falling edge of a digital signal</see>.</summary>
<param name="source">The terminal of the trigger signal.</param>
<param name="edge">The edge of the trigger signal that causes an advance trigger to occur.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AdvanceTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeAdvanceTriggerEdge)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AdvanceTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Overrides <see cref="M:System.Object.ToString" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AdvanceTrigger.ConfigureSoftwareTrigger" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureSoftwareTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Configures a task to advance to the next entry in a scan list upon a software trigger.</summary>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AdvanceTrigger.ConfigureSoftwareTrigger" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AdvanceTrigger.SendSoftwareTrigger" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SendSoftwareTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Sends a notification to the hardware from the running program to advance to the next entry in the switch scan list.</summary>
<param name="triggerName">The name of the software trigger to generate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AdvanceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AdvanceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AdvanceTrigger.Type" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Type" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AdvanceTriggerType">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/analogTriggering.html');">type</see> of trigger to use to advance to the next entry in a switch scan list.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/analogTriggering.html');">type</see> of trigger to use to advance to the next entry in a switch scan list.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.PauseTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PauseTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/PauseTrigger.html');">signals and triggers that pause a task</see>.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Triggers" />
<seealso cref="P:NationalInstruments.DAQmx.Triggers.PauseTrigger" />
</member>
    <member name="P:NationalInstruments.DAQmx.PauseTrigger.DigitalLevel" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalLevel" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalLevelPauseTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalLevelPauseTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalLevelPauseTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PauseTrigger.AnalogLevel" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogLevel" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AnalogLevelPauseTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AnalogLevelPauseTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.AnalogLevelPauseTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PauseTrigger.AnalogWindow" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogWindow" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AnalogWindowPauseTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AnalogWindowPauseTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.AnalogWindowPauseTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.PauseTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureNone" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>
Disables <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/PauseTrigger.html');">pause triggering</see> for the task.  Once started, samples are acquired or generated until the requested number has been acquired or generated, or the task has stopped.
</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureNone" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureDigitalLevelTrigger(System.String,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalLevelTrigger" nihasget="0" nihasset="0" niparameters="source,condition" niparametertypes="System.String,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition" nireturnvaluetype="System.Void">
      <summary>Configures the task to pause acquisition or generation based on the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">level of a digital signal</see>.
</summary>
<param name="source">
The name of a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is a digital signal to use as the source of the trigger.
</param>
<param name="condition">
The level of the digital signal that pauses acquiring or generating samples.
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureDigitalLevelTrigger(System.String,NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureAnalogWindowTrigger(System.String,NationalInstruments.DAQmx.AnalogWindowPauseTriggerCondition,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureAnalogWindowTrigger" nihasget="0" nihasset="0" niparameters="source,condition,top,bottom" niparametertypes="System.String,NationalInstruments.DAQmx.AnalogWindowPauseTriggerCondition,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>
Configures the task to pause acquisition or generation when an analog signal is <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/algwindowtrig.html');">inside or outside of a range you specify</see>.</summary>
<param name="source">
The name of a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/virtChanTypes.html');">virtual channel</see> or <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is an analog signal to use as the source of the trigger.
</param>
<param name="condition">Specifies if the task pauses acquiring and generating samples when the signal is inside the window or outside the window.  Use <paramref name="bottom" /> and <paramref name="top" /> to specify the limits of the window.
</param>
<param name="top">The upper limit of the voltage window, in the units of the measurement or generation.</param>
<param name="bottom">The lower limit of the voltage window, in the units of the measurement or generation.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureAnalogWindowTrigger(System.String,NationalInstruments.DAQmx.AnalogWindowPauseTriggerCondition,System.Double,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureAnalogLevelTrigger(System.String,NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureAnalogLevelTrigger" nihasget="0" nihasset="0" niparameters="source,condition,level" niparametertypes="System.String,NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the task to pause acquisition or generation when an analog signal is <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/analogTriggering.html');">above or below a level you specify</see>.
</summary>
<param name="source">
The name of a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/virtChanTypes.html');">virtual channel</see> or <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is an analog signal to use as the source of the trigger.
</param>
<param name="condition">
Specifies if the task pauses acquiring and generating samples when the signal is below <paramref name="level" /> or above <paramref name="level" />.
</param>
<param name="level">The analog threshold level, in the units of the measurement or generation. Use <paramref name="condition" /> to specify if the task pauses above or below this threshold.
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureAnalogLevelTrigger(System.String,NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.PauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureDigitalPatternTrigger(System.String,System.String,NationalInstruments.DAQmx.DigitalPatternPauseTriggerCondition)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalPatternTrigger" nihasget="0" nihasset="0" niparameters="source,pattern,condition" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.DigitalPatternPauseTriggerCondition" nireturnvaluetype="System.Void">
      <summary>Configures a task to pause the acquisition or generation when the device matches a  <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see>.</summary>
<param name="source">
The physical channels to use for pattern matching. The order of the physical channels determines the order of the pattern. If a port is included, the order of the physical channels within the port is in ascending order. 
</param>
<param name="pattern">
The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the trigger to occur. 
</param>
<param name="condition">The condition under which the trigger occurs.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureDigitalPatternTrigger(System.String,System.String,NationalInstruments.DAQmx.DigitalPatternPauseTriggerCondition)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task. You start the task with <see cref="M:NationalInstruments.DAQmx.Task.Start" />, by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.PauseTrigger.DigitalPattern" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalPattern" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalPatternPauseTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalPatternPauseTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalPatternPauseTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PauseTrigger.Type" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Type" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::PauseTriggerType">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/analogTriggering.html');">type</see> of trigger to use to pause a task.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/analogTriggering.html');">type</see> of trigger to use to pause a task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PauseTrigger.Terminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Terminal" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the name of the internal Pause Trigger terminal for the task. This property does not return the name of the trigger source terminal.</summary>
<value>Indicates the name of the internal Pause Trigger terminal for the task. This property does not return the name of the trigger source terminal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.Task" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Task" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents a collection of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/virtChanTypes.html');">virtual channels</see> and their per-channel properties and timing, triggering, and other properties that apply to the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">DAQmx Task</see>.</summary>
<threadsafety safety="safe" />
<remarks>
<see cref="T:NationalInstruments.DAQmx.Task" /> is the principal class that represents the channels, timing, triggering, exported signals, and other information about an NI-DAQmx task.  For most tasks, in addition to the <see cref="T:NationalInstruments.DAQmx.Task" /> object, you must create an instance of a reader or writer class to read samples from or write samples to the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> of the task.  To create a reader or writer for a particular <see cref="T:NationalInstruments.DAQmx.Task" />, pass the <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property of that <see cref="T:NationalInstruments.DAQmx.Task" /> to the reader or writer constructor.
<note type="note">
Some DAQ devices are not currently supported by the NI-DAQmx driver. Refer to <format type="italics">NI-DAQ Readme</format> for a complete listing of supported hardware.
</note></remarks>
<seealso cref="M:NationalInstruments.DAQmx.DaqSystem.LoadTask(System.String)" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogUnscaledReader" />
<seealso cref="T:NationalInstruments.DAQmx.CounterSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.CounterMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogSingleChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogMultiChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogUnscaledWriter" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalSingleChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalMultiChannelWriter" />
</member>
    <member name="M:NationalInstruments.DAQmx.Task.#ctor(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Task" nihasget="0" nihasset="0" niparameters="name" niparametertypes="System.String" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.Task" /> class with the specified name.</summary>
<security condition="unmanagedcode" />
<param name="name">The name of the task to create.  If you specify <see cref="F:System.String.Empty" /> or <see langword="null" />, the NI-DAQmx driver assigns a unique name to the new task.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This constructor creates a new task in the current process. To load a task from Measurement <entity value="amp" /> Automation Explorer (MAX), use the <see cref="M:NationalInstruments.DAQmx.DaqSystem.LoadTask(System.String)" /> method on the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Local" /> instance of <see cref="T:NationalInstruments.DAQmx.DaqSystem" />.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.Timing" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Timing" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.Timing">
      <summary>Gets the timing configurations for the task.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.Timing" /> for the task.</value>
<seealso cref="T:NationalInstruments.DAQmx.Timing" />
</member>
    <member name="P:NationalInstruments.DAQmx.Task.Triggers" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Triggers" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.Triggers">
      <summary>Gets the triggers for the task.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.Triggers" /> for the task.</value>
<seealso cref="T:NationalInstruments.DAQmx.Triggers" />
</member>
    <member name="M:NationalInstruments.DAQmx.Task.Start" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Start" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Transitions the task to the running <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/taskStateModel.html');">state</see>, which begins the measurement or generation. 
</summary>
<remarks>
If you do not use this method, a measurement task starts automatically when you call a read method. How you set the write method <paramref name="autoStart" /> parameter determines if calling the write method automatically starts a generation task. If you do not use <see cref="M:NationalInstruments.DAQmx.Task.Start" /> and <see cref="M:NationalInstruments.DAQmx.Task.Stop" /> when you use a read or write method multiple times, the task starts and stops repeatedly, which reduces the performance of the application. Refer to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/startFunction.html');">When Should You Use the Start Function</see> for more information.</remarks>
<seealso cref="T:NationalInstruments.DAQmx.AnalogSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.CounterSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.CounterMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogUnscaledReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogSingleChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogMultiChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalSingleChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalMultiChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogUnscaledWriter" />
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.Stop" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Stop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Transitions the task from the running to the committed <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/taskStateModel.html');">state</see>, which ends the measurement or generation. 
</summary>
<remarks>
<para>If you do not use this method, the read method ends a measurement task automatically before returning. How you set the <paramref name="autoStart" /> parameter of the write method determines if calling the write method automatically ends a generation task before returning. If you do not use <see cref="M:NationalInstruments.DAQmx.Task.Start" /> and <see cref="M:NationalInstruments.DAQmx.Task.Stop" /> when you use a read or write method multiple times, the task starts and stops repeatedly, which reduces the performance of the application.</para>
<para>If an asynchronous read or write on the task is in progress, <see cref="M:NationalInstruments.DAQmx.Task.Stop" /> does not return until the data from the pending read or write has been transferred to or from the task buffer.  <see cref="M:NationalInstruments.DAQmx.Task.Stop" /> does not wait for read or write asynchronous callback methods to finish, however.</para>
<para>You may pass <see cref="F:NationalInstruments.DAQmx.TaskAction.Abort" /> to the <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> method stop the task immediately, without waiting for any currently running operation to complete.</para>
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.AnalogSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.CounterSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.CounterMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogUnscaledReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogSingleChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogMultiChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalSingleChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalMultiChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogUnscaledWriter" />
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.ExportSignals" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ExportSignals" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.ExportSignals">
      <summary>Gets the exported signal configuration for the task.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.ExportSignals" /> for the task.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.SwitchScan" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchScan" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SwitchScan">
      <summary>Gets the switch scan configuration for the task.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.SwitchScan" /> for the task.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Control" nihasget="0" nihasset="0" niparameters="mode" niparametertypes="NationalInstruments.DAQmx.TaskAction" nireturnvaluetype="System.Void">
      <summary>Alters the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/taskStateModel.html');">state</see> of the task according to the mode you specify.</summary>
<param name="mode">The action to use to alter the state of the task.</param>
<seealso cref="T:NationalInstruments.DAQmx.TaskAction" />
<remarks>
<para>To start a task more quickly, set <paramref name="mode" /> to <see cref="F:NationalInstruments.DAQmx.TaskAction.Commit" /> to program the hardware with all parameters of the task  prior to starting it.</para>
<para>
If the task is in the running state and an asynchronous read or write on the task is in progress, calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> to move the task out of the running state does not return until the data from the pending read or write has been transferred to or from the task buffer.  However, if <paramref name="mode" /> is <see cref="F:NationalInstruments.DAQmx.TaskAction.Abort" />, then <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> does not wait for the asynchronous read or write callback methods to finish. The pending asynchronous call stops immediately and raises a <see cref="T:NationalInstruments.DAQmx.DaqException" />.
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.Stream" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Stream" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DaqStream">
      <summary>Gets the stream for the task.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> for the task.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.COChannels" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="COChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.COChannelCollection">
      <summary>Gets the collection of counter output channels in the task.</summary>
<value>
A <see cref="T:NationalInstruments.DAQmx.COChannelCollection" /> that contains the <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in the task.
</value>
<remarks>
Each task can contain
only one type of channel. You must use the channels property that corresponds to the type of channels in the task to access the channels in the task.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.COChannelCollection" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.CIChannels" />
</member>
    <member name="P:NationalInstruments.DAQmx.Task.CIChannels" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIChannelCollection">
      <summary>Gets the collection of counter input channels in the task.</summary>
<value>
A <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" /> that contains the <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in the task.
</value>
<remarks>
Each task can contain
only one type of channel. You must use the channels property that corresponds to the type of channels in the task to access the channels in the task.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.CIChannelCollection" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.COChannels" />
</member>
    <member name="P:NationalInstruments.DAQmx.Task.DOChannels" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DOChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DOChannelCollection">
      <summary>Gets the collection of digital output channels in the task.</summary>
<value>
An <see cref="T:NationalInstruments.DAQmx.DOChannelCollection" /> that contains the <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in the task.
</value>
<remarks>
Each task can contain
only one type of channel. You must use the channels property that corresponds to the type of channels in the task to access the channels in the task.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.DOChannelCollection" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.CIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.COChannels" />
</member>
    <member name="P:NationalInstruments.DAQmx.Task.DIChannels" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DIChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DIChannelCollection">
      <summary>Gets the collection of digital input channels in the task.</summary>
<value>
A <see cref="T:NationalInstruments.DAQmx.DIChannelCollection" /> that contains the <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in the task.
</value>
<remarks>
Each task can contain
only one type of channel. You must use the channels property that corresponds to the type of channels in the task to access the channels in the task.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.DIChannelCollection" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.CIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.COChannels" />
</member>
    <member name="P:NationalInstruments.DAQmx.Task.AOChannels" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AOChannelCollection">
      <summary>Gets the collection of analog output channels in the task.</summary>
<value>
An <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" /> that contains the <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in the task.
</value>
<remarks>
Each task can contain
only one type of channel. You must use the channels property that corresponds to the type of channels in the task to access the channels in the  task.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.AIChannelCollection" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.CIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.COChannels" />
</member>
    <member name="P:NationalInstruments.DAQmx.Task.AIChannels" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AIChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AIChannelCollection">
      <summary>Gets the collection of analog input channels in the task.</summary>
<value>
An <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" /> that contains the <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in the task.
</value>
<remarks>
Each task can contain
only one type of channel. You must use the channels property that corresponds to the type of channels in the task to access the channels in the  task.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.AIChannelCollection" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.CIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.COChannels" />
</member>
    <member name="M:NationalInstruments.DAQmx.Task.AddGlobalChannel(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AddGlobalChannel" nihasget="0" nihasset="0" niparameters="channelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.Channel">
      <summary>Adds a preconfigured, global channel to the task.</summary>
<param name="channelName">The name of the global channel to add to the task.</param>
<returns>The global <see cref="T:NationalInstruments.DAQmx.Channel" />.</returns>
<remarks>
<para>
A task can contain global or local channels. Global channels are accessible to all tasks on the system. Local channels are accessible only to the task you use to create them. 
</para>
<para>
Use local channels in a typical application. Use the create channel methods on <see cref="P:NationalInstruments.DAQmx.Task.AIChannels" />,
<see cref="P:NationalInstruments.DAQmx.Task.AOChannels" />, 
<see cref="P:NationalInstruments.DAQmx.Task.DIChannels" />, 
<see cref="P:NationalInstruments.DAQmx.Task.DOChannels" />,
<see cref="P:NationalInstruments.DAQmx.Task.CIChannels" />, or
<see cref="P:NationalInstruments.DAQmx.Task.COChannels" /> to create local channels and add them to the task. 
Use Measurement &amp; Automation Explorer (MAX) to create, configure, and store global channels.
</para>
</remarks>
<seealso cref="P:NationalInstruments.DAQmx.Task.AIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DOChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.CIChannels" />
<seealso cref="P:NationalInstruments.DAQmx.Task.COChannels" />
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WaitUntilDone" nihasget="0" nihasset="0" niparameters="millisecToWait" niparametertypes="System.Int32" nireturnvaluetype="System.Void">
      <summary>Waits for the measurement or generation to complete and returns if it has completed execution before the specified time elapses.</summary>
<param name="millisecToWait">The maximum amount of time in milliseconds to wait for the measurement or generation to complete. This method returns an error if the time elapses. If you set the timeout to <entity value="ndash" />1, the method always waits for the task to complete, regardless of the amount of time needed.</param>
<returns>
<see langword="true" /> if the task has completed execution.</returns>
<remarks>
<see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.Int32)" /> waits for the task to finish acquiring or generating the number of samples per channel specified on the <see cref="T:NationalInstruments.DAQmx.Timing" /> class.  <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.Int32)" /> does not wait for pending asynchronous operations to complete.  Use the methods and properties on the <see cref="T:System.IAsyncResult" /> to verify that asynchronous reads and writes are complete.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Task.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.TimeSpan)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WaitUntilDone" nihasget="0" nihasset="0" niparameters="timeout" niparametertypes="System.TimeSpan" nireturnvaluetype="System.Void">
      <summary>
Waits for the measurement or generation to complete and returns if it has completed execution before the specified <see cref="T:System.TimeSpan" /> elapses.</summary>
<param name="timeout">
The maximum <see cref="T:System.TimeSpan" /> to wait for the measurement or generation to complete. This method returns an error if the time elapses. 
</param>
<returns>
<see langword="true" /> if the task has completed execution.
</returns>
<remarks>
<see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.TimeSpan)" /> waits for the task to finish acquiring or generating the number of samples per channel specified on the <see cref="T:NationalInstruments.DAQmx.Timing" /> class.  <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.TimeSpan)" /> does not wait for pending asynchronous operations to complete.  Use the methods and properties on the <see cref="T:System.IAsyncResult" /> to verify that asynchronous reads and writes are complete.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso cref="T:System.TimeSpan" />
</member>
    <member name="P:NationalInstruments.DAQmx.Task.Watchdog" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Watchdog" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.Watchdog">
      <summary>Gets the watchdog configuration and control object for the task.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.Watchdog" /> for the task.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. By default, callbacks are executed from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />.<note type="note">For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. For more information about the effects and purpose of <see cref="P:NationalInstruments.DAQmx.Task.SynchronizingObject" />, refer to <see keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</see>.</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</seealso>
</member>
    <member name="E:NationalInstruments.DAQmx.Task.DigitalChangeDetection" nitypekind="Event" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalChangeDetection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Occurs when a digital change is detected on any of the digital lines used in the task.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>For more information about events in NI-DAQmx, refer to <see keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</see>.</remarks>
<seealso keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</seealso>
</member>
    <member name="E:NationalInstruments.DAQmx.Task.CounterOutput" nitypekind="Event" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterOutput" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Occurs when any of the counters used in the task reaches its terminal count.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>For more information about events in NI-DAQmx, refer to <see keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</see>.</remarks>
<seealso keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</seealso>
</member>
    <member name="E:NationalInstruments.DAQmx.Task.SampleComplete" nitypekind="Event" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleComplete" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Occurs when each sample is acquired into the NI-DAQmx driver buffer and is ready for reading.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>For more information about events in NI-DAQmx, refer to <see keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</see>.</remarks>
<seealso keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</seealso>
</member>
    <member name="E:NationalInstruments.DAQmx.Task.Done" nitypekind="Event" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Done" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Occurs when the task completes.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This event occurs whether the  task completed successfully or stopped prematurely due to an error.  If the task stops due to a call to <see cref="M:NationalInstruments.DAQmx.Task.Stop" /> or <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />, this event does not occur.  
<note type="note">
For more information about events in NI-DAQmx, refer to <see keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</see>.
</note></remarks>
<seealso keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.OnDone(NationalInstruments.DAQmx.TaskDoneEventArgs)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OnDone" nihasget="0" nihasset="0" niparameters="e" niparametertypes="NationalInstruments.DAQmx.TaskDoneEventArgs" nireturnvaluetype="System.Void">
      <summary>Raises the <see cref="E:NationalInstruments.DAQmx.Task.Done" /> event.</summary>
<param name="e">A <see cref="T:NationalInstruments.DAQmx.TaskDoneEventArgs" /> that contains the event data.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2" keywordType="msdn">Raising an Event</seealso>
</member>
    <member name="E:NationalInstruments.DAQmx.Task.SampleClock" nitypekind="Event" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Occurs on each pulse of the task's sample clock.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>For more information about events in NI-DAQmx, refer to <see keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</see>.</remarks>
<seealso keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.OnSampleClock(NationalInstruments.DAQmx.SampleClockEventArgs)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OnSampleClock" nihasget="0" nihasset="0" niparameters="e" niparametertypes="NationalInstruments.DAQmx.SampleClockEventArgs" nireturnvaluetype="System.Void">
      <summary>Raises the <see cref="E:NationalInstruments.DAQmx.Task.SampleClock" /> event.</summary>
<param name="e">A <see cref="T:NationalInstruments.DAQmx.SampleClockEventArgs" /> that contains the event data.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2" keywordType="msdn">Raising an Event</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.OnDigitalChangeDetection(NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OnDigitalChangeDetection" nihasget="0" nihasset="0" niparameters="e" niparametertypes="NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs" nireturnvaluetype="System.Void">
      <summary>Raises the <see cref="E:NationalInstruments.DAQmx.Task.DigitalChangeDetection" /> event.</summary>
<param name="e">A <see cref="T:NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs" /> that contains the event data.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2" keywordType="msdn">Raising an Event</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.OnCounterOutput(NationalInstruments.DAQmx.CounterOutputEventArgs)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OnCounterOutput" nihasget="0" nihasset="0" niparameters="e" niparametertypes="NationalInstruments.DAQmx.CounterOutputEventArgs" nireturnvaluetype="System.Void">
      <summary>Raises the <see cref="E:NationalInstruments.DAQmx.Task.CounterOutput" /> event.</summary>
<param name="e">A <see cref="T:NationalInstruments.DAQmx.CounterOutputEventArgs" /> that contains the event data.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2" keywordType="msdn">Raising an Event</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.OnSampleComplete(NationalInstruments.DAQmx.SampleCompleteEventArgs)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OnSampleComplete" nihasget="0" nihasset="0" niparameters="e" niparametertypes="NationalInstruments.DAQmx.SampleCompleteEventArgs" nireturnvaluetype="System.Void">
      <summary>Raises the <see cref="E:NationalInstruments.DAQmx.Task.SampleComplete" /> event.</summary>
<param name="e">A <see cref="T:NationalInstruments.DAQmx.SampleCompleteEventArgs" /> that contains the event data.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2" keywordType="msdn">Raising an Event</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Task" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.Task" /> class with a unique name.</summary>
<security condition="unmanagedcode" />
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This constructor creates a new task in the current process. To load a task from Measurement <entity value="amp" /> Automation Explorer (MAX), use the <see cref="M:NationalInstruments.DAQmx.DaqSystem.LoadTask(System.String)" /> method on the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Local" /> instance of <see cref="T:NationalInstruments.DAQmx.DaqSystem" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Task.WaitUntilDone" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WaitUntilDone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Waits for the measurement or generation to complete, regardless of the amount of time needed, and returns if it has completed execution.</summary>
<returns>
<see langword="true" /> if the task has completed execution.</returns>
<remarks>
<see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> waits for the task to finish acquiring or generating the number of samples per channel specified on the <see cref="T:NationalInstruments.DAQmx.Timing" /> class.  <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> does not wait for pending asynchronous operations to complete.  Use the methods and properties on <see cref="T:System.IAsyncResult" /> to verify that asynchronous reads and writes are complete.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.ConfigureLogging(System.String,NationalInstruments.DAQmx.TdmsLoggingOperation,NationalInstruments.DAQmx.LoggingMode)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureLogging" nihasget="0" nihasset="0" niparameters="filePath,loggingOperation,loggingMode" niparametertypes="System.String,NationalInstruments.DAQmx.TdmsLoggingOperation,NationalInstruments.DAQmx.LoggingMode" nireturnvaluetype="System.Void">
      <summary>Configures logging to a <format type="monospace">.tdms</format> file when the acquisition starts. 
</summary>
<param name="filePath">The path to the <format type="monospace">.tdms</format> file to which you want to log data. If you use this method to create a new file, the file
extension of the filename you specify in <paramref name="filePath" /> must be <format type="monospace">.tdms</format>. Otherwise, this method automatically
appends <format type="monospace">.tdms</format> to the filename you specify. If you use this method to open or update an existing file, you do
not have to ensure that the file extension is <format type="monospace">.tdms</format>.</param>
<param name="loggingOperation">A <see cref="T:NationalInstruments.DAQmx.TdmsLoggingOperation" crefType="Unqualified" /> value that specifies how to open the <format type="monospace">.tdms</format> file.</param>
<param name="loggingMode">A <see cref="T:NationalInstruments.DAQmx.LoggingMode" crefType="Unqualified" /> value that specifies how to log data.</param>
<remarks>        When you enable TDMS logging, NI-DAQmx streams the data acquired to the specified
file once the acquisition starts. The data written on the file is in TDMS
file format, and the driver also creates a TDMS index file. The name of the TDMS channel group that the driver creates
is the same as the task name. Refer to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/datalogging.html');">TDMS Streaming</see> for more information.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.ConfigureLogging(System.String,NationalInstruments.DAQmx.TdmsLoggingOperation,NationalInstruments.DAQmx.LoggingMode,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureLogging" nihasget="0" nihasset="0" niparameters="filePath,loggingOperation,loggingMode,groupName" niparametertypes="System.String,NationalInstruments.DAQmx.TdmsLoggingOperation,NationalInstruments.DAQmx.LoggingMode,System.String" nireturnvaluetype="System.Void">
      <summary>Configures logging to a  <format type="monospace">.tdms</format> file when the acquisition starts with the specified TDMS channel group name.
</summary>
<param name="filePath">The path to the <format type="monospace">.tdms</format> file to which you want to log data. If you use this method to create a new file, the file
extension of the filename you specify in <paramref name="filePath" /> must be <format type="monospace">.tdms</format>. Otherwise, this method automatically
appends <format type="monospace">.tdms</format> to the filename you specify. If you use this method to open or update an existing file, you do
not have to ensure that the file extension is <format type="monospace">.tdms</format>.</param>
<param name="loggingOperation">A <see cref="T:NationalInstruments.DAQmx.TdmsLoggingOperation" crefType="Unqualified" /> value which specifies how to open the <format type="monospace">.tdms</format> file.</param>
<param name="loggingMode">A <see cref="T:NationalInstruments.DAQmx.LoggingMode" crefType="Unqualified" /> value which specifies how to log data.</param>
<param name="groupName">The name of the channel group to create within the <format type="monospace">.tdms</format> file for data from this task. When set to <see langword="null" />, <see cref="F:System.String.Empty" />, or a string
with only white space, the driver sets the TDMS channel group name to the task name.</param>
<remarks>        When you enable TDMS logging, NI-DAQmx streams the data acquired to the specified
file once the acquisition starts. The data written on the file is in TDMS
file format, and the driver also creates a TDMS index file. Refer to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/datalogging.html');">TDMS Streaming</see> for more information.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.StartNewFile(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="StartNewFile" nihasget="0" nihasset="0" niparameters="filePath" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Starts a new TDMS file the next time data is written to disk.



</summary>
<param name="filePath">
The path to the TDMS file to which you want to log data. 
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.OnEveryNSamplesRead(NationalInstruments.DAQmx.EveryNSamplesReadEventArgs)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OnEveryNSamplesRead" nihasget="0" nihasset="0" niparameters="e" niparametertypes="NationalInstruments.DAQmx.EveryNSamplesReadEventArgs" nireturnvaluetype="System.Void">
      <summary>Raises the <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesRead" /> event.</summary>
<param name="e">An <see cref="T:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs" /> that contains the event data.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2" keywordType="msdn">Raising an Event</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.Task.OnEveryNSamplesWritten(NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OnEveryNSamplesWritten" nihasget="0" nihasset="0" niparameters="e" niparametertypes="NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs" nireturnvaluetype="System.Void">
      <summary>Raises the <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesWritten" /> event.</summary>
<param name="e">An <see cref="T:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs" /> that contains the event data.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2" keywordType="msdn">Raising an Event</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.EveryNSamplesWrittenEventInterval" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesWrittenEventInterval" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>
Gets or sets the interval, in number of samples per channel, at which <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesWritten" /> is called.
</summary>
<value>The interval, in number of samples.</value>
<remarks>

If this property is set to zero, registering the <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesWritten" /> event is not successful.

</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.EveryNSamplesReadEventInterval" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesReadEventInterval" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>
Gets or sets the interval, in number of samples per channel, at which <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesRead" /> is called.
</summary>
<value>The interval, in number of samples per channel.</value>
<remarks>

If this property is set to zero, registering the <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesRead" />  event is not successful.

</remarks>
</member>
    <member name="E:NationalInstruments.DAQmx.Task.EveryNSamplesWritten" nitypekind="Event" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesWritten" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Occurs when N number of samples per channel, as defined by <see cref="P:NationalInstruments.DAQmx.Task.EveryNSamplesWrittenEventInterval" />, have been written from the PC buffer to the device.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You must set <see cref="P:NationalInstruments.DAQmx.Task.EveryNSamplesWrittenEventInterval" /> to a value greater than zero before registering this event.

<note type="note">
For more information about events in NI-DAQmx, refer to <see keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</see>.
</note></remarks>
<seealso keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</seealso>
<seealso cref="P:NationalInstruments.DAQmx.Task.EveryNSamplesWrittenEventInterval" />
</member>
    <member name="E:NationalInstruments.DAQmx.Task.EveryNSamplesRead" nitypekind="Event" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesRead" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Occurs when N number of samples per channel, as defined by <see cref="P:NationalInstruments.DAQmx.Task.EveryNSamplesReadEventInterval" />, is written from the device to the PC buffer.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You must set <see cref="P:NationalInstruments.DAQmx.Task.EveryNSamplesReadEventInterval" /> to a value greater than zero before registering this event.

<note type="note">
For more information about events in NI-DAQmx, refer to <see keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</see>.
</note></remarks>
<seealso keyword="UsingDAQEvents" keywordType="mstudio">Using NI-DAQmx Events</seealso>
<seealso cref="P:NationalInstruments.DAQmx.Task.EveryNSamplesReadEventInterval" />
</member>
    <member name="P:NationalInstruments.DAQmx.Task.Devices" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Devices" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of all devices in the task.</summary>
<value>Indicates an array containing the names of all devices in the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Task.IsDone" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="IsDone" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the task <see href="javascript:launchSharedHelp('mxcncpts.chm::/whenTaskDone.html');">completed execution</see>.</summary>
<value>Indicates whether the task <see href="javascript:launchSharedHelp('mxcncpts.chm::/whenTaskDone.html');">completed execution</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.AccessoryInsertionOrRemovalDetected" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AccessoryInsertionOrRemovalDetected" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if any devices in the task detected the insertion or removal of an accessory since the task started. Reading this property clears the accessory change status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.Task.DevicesWithInsertedOrRemovedAccessories" />. Otherwise, you will receive an error.</summary>
<value>Indicates if any devices in the task detected the insertion or removal of an accessory since the task started. Reading this property clears the accessory change status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.Task.DevicesWithInsertedOrRemovedAccessories" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Task.DevicesWithInsertedOrRemovedAccessories" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DevicesWithInsertedOrRemovedAccessories" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the names of any devices that detected the insertion or removal of an accessory since the task started. You must read <see cref="P:NationalInstruments.DAQmx.Task.AccessoryInsertionOrRemovalDetected" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates the names of any devices that detected the insertion or removal of an accessory since the task started. You must read <see cref="P:NationalInstruments.DAQmx.Task.AccessoryInsertionOrRemovalDetected" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="T:NationalInstruments.DAQmx.DaqException" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqException" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the exception that is thrown when an NI-DAQmx driver error occurs.</summary>
<threadsafety safety="safe" />
<seealso keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqException.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqException" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.DaqException" /> class.
</summary>
<seealso keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqException.#ctor(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqException" nihasget="0" nihasset="0" niparameters="message" niparametertypes="System.String" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.DaqException" /> class with the specified error message.
</summary>
<param name="message">
The error message that explains the cause of the exception.
</param>
<seealso keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqException.#ctor(System.String,System.Exception)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqException" nihasget="0" nihasset="0" niparameters="message,inner" niparametertypes="System.String,System.Exception" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.DaqException" /> class with the specified error message and a reference to the inner exception that is the
cause of the exception.
</summary>
<param name="message">
The error message that explains the cause of the exception.
</param>
<param name="inner">
The exception that caused this exception.
</param>
<seealso keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqException.Error" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Error" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>
Gets the NI-DAQmx driver code for the error that occurred.
</summary>
<value>
The NI-DAQmx driver code for the error that occurred.</value>
<remarks>
Refer to 

<see keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</see> for a list of possible
values.
</remarks>
<seealso keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqException" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.DaqException" /> class with serialized data.</summary>
<param name="info">The object that holds the serialized object data. </param>
<param name="context">The contextual information about the source or destination.</param>
<remarks>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, refer to <see keyword="832ac524-21bc-419a-a27b-ca8bfc45840f" keywordType="msdn">XML and SOAP Serialization</see> in the Microsoft .NET Framework documentation.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqException.#ctor(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqException" nihasget="0" nihasset="0" niparameters="message,errorCode" niparametertypes="System.String,System.Int32" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.DaqException" /> class with the specified error message and NI-DAQmx driver error code.
</summary>
<param name="message">
The error message that explains the cause of the exception.
</param>
<param name="errorCode">
The NI-DAQmx driver error code that caused this exception to be thrown.  Refer to <see keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</see> for a list of possible values.</param>
<seealso keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqException.#ctor(System.String,System.Int32,System.Exception)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqException" nihasget="0" nihasset="0" niparameters="message,errorCode,inner" niparametertypes="System.String,System.Int32,System.Exception" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.DaqException" /> class with the specified error message, NI-DAQmx driver error code, and reference to the inner exception that is the cause of the exception.
</summary>
<param name="message">
The error message that explains the cause of the exception.
</param>
<param name="errorCode">
The NI-DAQmx driver error code that caused this exception to be thrown.  Refer to 
<see keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</see> for a list of possible
values.</param>
<param name="inner">
The exception that caused this exception.
</param>
<seealso keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.Device" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Device" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a DAQ device and contains methods and properties that operate on devices outside the context of a task.</summary>
<threadsafety safety="safe" />
<remarks>Use the <see cref="M:NationalInstruments.DAQmx.DaqSystem.LoadDevice(System.String)" /> method on the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Local" /> instance of <see cref="T:NationalInstruments.DAQmx.DaqSystem" /> to create an instance of this class for a device on your system.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.Reset" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Reset" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Immediately aborts all active tasks associated with a device and returns the device to an <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/initstates.html');">initialized</see> state.</summary>
<remarks>Aborting a task stops the task and releases any resources the task reserved.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.Switch" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Switch" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.Switch">
      <summary>Gets a <see cref="T:NationalInstruments.DAQmx.Switch" /> class for this device that contains properties and methods specific to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/switches.html');">switch devices</see>.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.Switch" /> class for this device that contains properties and methods specific to switch devices.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.DeviceID" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DeviceID" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Gets the name of the device, as configured in Measurement <entity value="#38" /> Automation Explorer (MAX), to which this operation applies.</summary>
<value>The name of the device in MAX.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Device.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Device.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.Device" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Use this method only if the application you create runs on a low memory system.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.SelfCalibrate" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SelfCalibrate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Measures the onboard reference voltage of the device and adjusts the self-calibration constants to account for any error caused by short-term fluctuation in the operating environment.</summary>
<seealso cref="P:NationalInstruments.DAQmx.Device.IsSelfCalibrationSupported" />
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.RestoreLastExternalCalibration" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RestoreLastExternalCalibration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Sets the self-calibration constants of the device to the current external calibration constants.</summary>
<remarks>
National Instruments sets the external calibration constants at the factory, and those constants remain in effect until you perform a new external calibration on the device.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.StartExternalCalibration(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="StartExternalCalibration" nihasget="0" nihasset="0" niparameters="password" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.ExternalCalibrationSession">
      <summary>Starts an external calibration session on a device.</summary>
<param name="password">The current calibration password for the device. The default password for all NI products is <format type="monospace">NI</format>. </param>
<returns>A reference to the <see cref="T:NationalInstruments.DAQmx.ExternalCalibrationSession" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.ChangeExternalCalibrationPassword(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ChangeExternalCalibrationPassword" nihasget="0" nihasset="0" niparameters="currentPassword,newPassword" niparametertypes="System.String,System.String" nireturnvaluetype="System.Void">
      <summary>Changes the external calibration password of the device.</summary>
<param name="currentPassword">The current calibration password for the device. The default password for all NI products is <format type="monospace">NI</format>. </param>
<param name="newPassword">The new password for the device. This password can be no longer than four characters.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.ExternalCalibrationDate" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ExternalCalibrationDate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.DateTime">
      <summary>Gets the last date and time that the device underwent an external calibration.</summary>
<value>The date and time of the external calibration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.SelfCalibrationDateTime" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SelfCalibrationDateTime" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.DateTime">
      <summary>Gets the last date and time that the device underwent a self-calibration.</summary>
<value>The date and time of the self-calibration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.GetPhysicalChannels(NationalInstruments.DAQmx.PhysicalChannelTypes,NationalInstruments.DAQmx.PhysicalChannelAccess)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetPhysicalChannels" nihasget="0" nihasset="0" niparameters="physicalChannelTypes,physicalChannelAccess" niparametertypes="NationalInstruments.DAQmx.PhysicalChannelTypes,NationalInstruments.DAQmx.PhysicalChannelAccess" nireturnvaluetype="System.String[]">
      <summary>Gets an array that contains the names of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> on this device.</summary>
<param name="physicalChannelTypes">The types of physical channels to include.</param>
<param name="physicalChannelAccess">The access types of physical channels to include.</param>
<returns>An array that contains the names of the requested physical channels on this device.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.GetTerminals(NationalInstruments.DAQmx.TerminalTypes)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetTerminals" nihasget="0" nihasset="0" niparameters="terminalTypes" niparametertypes="NationalInstruments.DAQmx.TerminalTypes" nireturnvaluetype="System.String[]">
      <summary>Gets an array that contains the names of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminals</see> on this device.</summary>
<param name="terminalTypes">The types of terminals to include.</param>
<returns>An array that contains the names of the requested terminals on this device.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.Device.DOTriggerUsage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DOTriggerUsage" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.TriggerUsageTypes">
      <summary>Indicates the digital output trigger types supported by this device.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.TriggerUsageTypes" /> that indicates the digital output trigger types supported by this device. The default value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Advance" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.ArmStart" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Handshake" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.None" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Pause" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Reference" />, and <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Start" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.DITriggerUsage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DITriggerUsage" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.TriggerUsageTypes">
      <summary>Indicates the digital input trigger types supported by this device.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.TriggerUsageTypes" /> that indicates the digital input trigger types supported by this device. The default value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Advance" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.ArmStart" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Handshake" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.None" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Pause" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Reference" />, and <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Start" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.COTriggerUsage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="COTriggerUsage" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.TriggerUsageTypes">
      <summary>Indicates the counter output trigger types supported by this device.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.TriggerUsageTypes" /> that indicates the counter output trigger types supported by this device. The value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Advance" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.ArmStart" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Handshake" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.None" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Pause" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Reference" />, and <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Start" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.CITriggerUsage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CITriggerUsage" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.TriggerUsageTypes">
      <summary>Indicates the counter input trigger types supported by this device.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.TriggerUsageTypes" /> that indicates the counter input trigger types supported by this device. The value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Advance" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.ArmStart" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Handshake" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.None" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Pause" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Reference" />, and <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Start" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AOTriggerUsage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOTriggerUsage" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.TriggerUsageTypes">
      <summary>Indicates the analog output trigger types supported by this device.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.TriggerUsageTypes" /> that indicates the analog output trigger types supported by this device. The value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Advance" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.ArmStart" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Handshake" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.None" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Pause" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Reference" />, and <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Start" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AICouplings" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AICouplings" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CouplingTypes">
      <summary>Indicates the coupling types supported by this device.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.CouplingTypes" /> that indicates the coupling types supported by this device. The value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.CouplingTypes.AC" />, <see cref="F:NationalInstruments.DAQmx.CouplingTypes.DC" />, <see cref="F:NationalInstruments.DAQmx.CouplingTypes.Ground" />, and <see cref="F:NationalInstruments.DAQmx.CouplingTypes.None" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AITriggerUsage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AITriggerUsage" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.TriggerUsageTypes">
      <summary>Indicates the analog input trigger types supported by this device.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.TriggerUsageTypes" /> that indicates the analog input trigger types supported by this device. The value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Advance" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.ArmStart" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Handshake" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.None" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Pause" />, <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Reference" />, and <see cref="F:NationalInstruments.DAQmx.TriggerUsageTypes.Start" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.SelfTest" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SelfTest" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Performs a brief test of the device resources. If a failure occurs, refer to your device documentation for more information.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.MSeriesLegacyCompatibility" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MSeriesLegacyCompatibility" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Device.ReserveNetworkDevice(System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReserveNetworkDevice" nihasget="0" nihasset="0" niparameters="overrideReservation" niparametertypes="System.Boolean" nireturnvaluetype="System.Void">
      <summary>Reserves the Network DAQ device for the current host. Reservation is required to run NI-DAQmx tasks, and the device must be added in MAX before it can be reserved. Use this method to specify whether to override an existing reservation.
</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<note type="note">
This functionality is performed implicitly for the NI 9163, so this method is not supported on the NI 9163 carrier.

</note>
<param name="overrideReservation">Specifies whether an existing reservation on the device should be overridden by this reservation.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.ReserveNetworkDevice" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReserveNetworkDevice" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Reserves the Network DAQ device for the current host. Reservation is required to run NI-DAQmx tasks, and the device must be added in MAX before it can be reserved. This method does not override any existing reservations on the device.

</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<note type="note">
This functionality is performed implicitly for the NI 9163, so this method is not supported on the NI 9163 carrier.

</note>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.UnreserveNetworkDevice" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="UnreserveNetworkDevice" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Unreserves or releases a Network DAQ device previously reserved by the host.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.DeleteNetworkDevice" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DeleteNetworkDevice" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Deletes a Network DAQ device previously added to the host.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
If the device is reserved, the device is unreserved before it is removed.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Device.GetPossibleSCExpressCalibrationAccessoryConnections(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetPossibleSCExpressCalibrationAccessoryConnections" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.String[]">
      <summary>
Gets the available connections on an SC Express accessory for the specified physical channel(s).
</summary>
<param name="physicalChannels">The physical channel(s) to use.

</param>
<returns>
An array of strings representing the available connections on an SC Express accessory for the specified physical channel(s).

</returns>
<remarks>
Connections specify how channels on the SC Express accessory should be configured. The resulting configuration connects channels to a particular external signal or an onboard terminal. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.COSampleModes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="COSampleModes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SampleQuantityMode[]">
      <summary>Gets sample modes supported by devices that support sample clocked counter output. 

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.SampleQuantityMode" /> of the device.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.COSupportedOutputTypes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="COSupportedOutputTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.COOutputType[]">
      <summary>Gets the generation types supported by the physical channels of the device.

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.COOutputType" /> of the device.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.CISampleModes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CISampleModes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SampleQuantityMode[]">
      <summary>Gets sample modes supported by devices that support sample clocked counter input.

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.SampleQuantityMode" /> of the device.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.CISupportedMeasurementTypes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CISupportedMeasurementTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIMeasurementType[]">
      <summary>Gets the measurement types supported by the physical channels of the device.

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.CIMeasurementType" /> of the device.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AOSampleModes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOSampleModes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SampleQuantityMode[]">
      <summary> Gets sample modes supported by devices that support sample clocked analog output.


</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.SampleQuantityMode" /> of the device.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AOSupportedOutputTypes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOSupportedOutputTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AOOutputType[]">
      <summary> Gets generation types supported by the physical channels of the device. 

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.AOOutputType" /> of the device.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AISampleModes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AISampleModes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SampleQuantityMode[]">
      <summary>Gets the sample modes from devices that support sample clocked analog input.

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.SampleQuantityMode" /> of the device.
</value>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class  Libraries</seealso>. </member>
    <member name="P:NationalInstruments.DAQmx.Device.AISupportedMeasurementTypes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AISupportedMeasurementTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AIMeasurementType[]">
      <summary>Gets the measurement types supported by the physical channels of the device. 

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.AIMeasurementType" /> of the device.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.IsSelfCalibrationSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="IsSelfCalibrationSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the device supports self-calibration.</summary>
<value>Indicates whether the device supports self-calibration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.SelfCalibrationTemperature" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SelfCalibrationTemperature" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates in degrees Celsius the temperature of the device at the time of the last self-calibration. Compare this temperature to the current onboard temperature to determine if you should perform another calibration.</summary>
<value>Indicates in degrees Celsius the temperature of the device at the time of the last self-calibration. Compare this temperature to the current onboard temperature to determine if you should perform another calibration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>
The temperature returned by this property is the calibration temperature as measured by an onboard temperature sensor and may differ from the temperature displayed 
on a printed calibration certificate. Calibration certificates usually display the ambient temperature rather than the onboard 
temperature.
</para>

<para>
Using Traditional NI-DAQ (Legacy) to perform calibration does not update this property. This property is updated only when you use NI-DAQmx 
to perform calibration.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Device.ExternalCalibrationRecommendedInterval" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ExternalCalibrationRecommendedInterval" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in months the National Instruments recommended interval between each external calibration of the device.</summary>
<value>Indicates in months the National Instruments recommended interval between each external calibration of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.ExternalCalibrationTemperature" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ExternalCalibrationTemperature" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates in degrees Celsius the temperature of the device at the time of the last external calibration. Compare this temperature to the current onboard temperature to determine if you should perform another calibration.</summary>
<value>Indicates in degrees Celsius the temperature of the device at the time of the last external calibration. Compare this temperature to the current onboard temperature to determine if you should perform another calibration.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>
The temperature returned by this property is the calibration temperature as measured by an onboard temperature sensor and may differ from the temperature displayed 
on a printed calibration certificate. Calibration certificates usually display the ambient temperature rather than the onboard 
temperature.
</para>

<para>
Using Traditional NI-DAQ (Legacy) to perform calibration does not update this property. This property is updated only when you use NI-DAQmx 
to perform calibration.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.Device.UserDefinedCalibrationInfo" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="UserDefinedCalibrationInfo" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies a string that contains arbitrary, user-defined information. This number of characters in this string can be no more than <see cref="P:NationalInstruments.DAQmx.Device.MaxUserDefinedCalibrationInfoSize" />.</summary>
<value>Specifies a string that contains arbitrary, user-defined information. This number of characters in this string can be no more than <see cref="P:NationalInstruments.DAQmx.Device.MaxUserDefinedCalibrationInfoSize" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.MaxUserDefinedCalibrationInfoSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="MaxUserDefinedCalibrationInfoSize" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the maximum length in characters of <see cref="P:NationalInstruments.DAQmx.Device.UserDefinedCalibrationInfo" />.</summary>
<value>Indicates the maximum length in characters of <see cref="P:NationalInstruments.DAQmx.Device.UserDefinedCalibrationInfo" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.Temperature" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Temperature" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates in degrees Celsius the current temperature of the device.</summary>
<value>Indicates in degrees Celsius the current temperature of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AccessoryConnectionCount" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AccessoryConnectionCount" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of times a particular connection that results in tangible wear and tear of onboard components has been made on the accessory. This connection count is useful for tracking accessory life and usage.</summary>
<value>Specifies the number of times a particular connection that results in tangible wear and tear of onboard components has been made on the accessory. This connection count is useful for tracking accessory life and usage.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.RecommendedAccessoryConnectionCountLimit" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="RecommendedAccessoryConnectionCountLimit" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the recommended connection count limit for an accessory. If the accessory connection count exceeds this limit, the accessory could require maintenance.</summary>
<value>Indicates the recommended connection count limit for an accessory. If the accessory connection count exceeds this limit, the accessory could require maintenance.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.IsSimulated" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="IsSimulated" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device is a simulated device.</summary>
<value>Indicates if the device is a simulated device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.ProductCategory" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ProductCategory" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ProductCategory">
      <summary>Indicates the product category of the device. This category corresponds to the category displayed in MAX when creating NI-DAQmx simulated devices.</summary>
<value>Indicates the product category of the device. This category corresponds to the category displayed in MAX when creating NI-DAQmx simulated devices.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.ProductType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ProductType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the product name of the device.</summary>
<value>Indicates the product name of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.ProductNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ProductNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the unique <see href="javascript:launchSharedHelp('mxdevconsid.chm::/hardwareIDs.html');">hardware identification number</see> for the device.</summary>
<value>Indicates the unique <see href="javascript:launchSharedHelp('mxdevconsid.chm::/hardwareIDs.html');">hardware identification number</see> for the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.SerialNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SerialNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the serial number of the device. This value is zero if the device does not have a serial number.</summary>
<value>Indicates the serial number of the device. This value is zero if the device does not have a serial number.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AccessoryProductTypes" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AccessoryProductTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the model names of accessories connected to the device. Each array element corresponds to a connector. For example, index 0 corresponds to connector 0. The array contains an empty string for each connector with no accessory connected.</summary>
<value>Indicates the model names of accessories connected to the device. Each array element corresponds to a connector. For example, index 0 corresponds to connector 0. The array contains an empty string for each connector with no accessory connected.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AccessoryProductNumbers" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AccessoryProductNumbers" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the unique hardware identification number for accessories connected to the device. Each array element corresponds to a connector. For example, index 0 corresponds to connector 0. The array contains 0 for each connector with no accessory connected.</summary>
<value>Indicates the unique hardware identification number for accessories connected to the device. Each array element corresponds to a connector. For example, index 0 corresponds to connector 0. The array contains 0 for each connector with no accessory connected.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AccessorySerialNumbers" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AccessorySerialNumbers" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the serial number for accessories connected to the device. Each array element corresponds to a connector. For example, index 0 corresponds to connector 0. The array contains 0 for each connector with no accessory connected.</summary>
<value>Indicates the serial number for accessories connected to the device. Each array element corresponds to a connector. For example, index 0 corresponds to connector 0. The array contains 0 for each connector with no accessory connected.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.CarrierSerialNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CarrierSerialNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the serial number of the device carrier. This value is zero if the carrier does not have a serial number.</summary>
<value>Indicates the serial number of the device carrier. This value is zero if the carrier does not have a serial number.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.ChassisModuleDeviceNames" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ChassisModuleDeviceNames" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the modules in the chassis.</summary>
<value>Indicates an array containing the names of the modules in the chassis.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AnalogTriggerSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AnalogTriggerSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device supports analog triggering.</summary>
<value>Indicates if the device supports analog triggering.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.DigitalTriggerSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DigitalTriggerSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device supports digital triggering.</summary>
<value>Indicates if the device supports digital triggering.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AIPhysicalChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIPhysicalChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the analog input physical channels available on the device.</summary>
<value>Indicates an array containing the names of the analog input physical channels available on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AIMaximumSingleChannelRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIMaximumSingleChannelRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the maximum rate for an analog input task if the task contains only a single channel from this device.</summary>
<value>Indicates the maximum rate for an analog input task if the task contains only a single channel from this device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AIMaximumMultiChannelRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIMaximumMultiChannelRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the maximum sampling rate for an analog input task from this device. To find the maximum rate for the task, take the minimum of <see cref="P:NationalInstruments.DAQmx.Device.AIMaximumSingleChannelRate" /> or the indicated sampling rate of this device divided by the number of channels to acquire data from (including cold-junction compensation and autozero channels).</summary>
<value>Indicates the maximum sampling rate for an analog input task from this device. To find the maximum rate for the task, take the minimum of <see cref="P:NationalInstruments.DAQmx.Device.AIMaximumSingleChannelRate" /> or the indicated sampling rate of this device divided by the number of channels to acquire data from (including cold-junction compensation and autozero channels).</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AIMinimumRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIMinimumRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the minimum rate for an analog input task on this device. NI-DAQmx returns a warning or error if you attempt to sample at a slower rate.</summary>
<value>Indicates the minimum rate for an analog input task on this device. NI-DAQmx returns a warning or error if you attempt to sample at a slower rate.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AISimultaneousSamplingSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AISimultaneousSamplingSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device supports simultaneous sampling.</summary>
<value>Indicates if the device supports simultaneous sampling.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AIVoltageRanges" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIVoltageRanges" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates pairs of input voltage ranges supported by this device. Each pair consists of the low value, followed by the high value.</summary>
<value>Indicates pairs of input voltage ranges supported by this device. Each pair consists of the low value, followed by the high value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AIVoltageInternalExcitationDiscreteValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIVoltageInternalExcitationDiscreteValues" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the set of discrete internal voltage excitation values supported by this device. If the device supports ranges of internal excitation values, use <see cref="P:NationalInstruments.DAQmx.Device.AIVoltageInternalExcitationRangeValues" /> to determine supported excitation values.</summary>
<value>Indicates the set of discrete internal voltage excitation values supported by this device. If the device supports ranges of internal excitation values, use <see cref="P:NationalInstruments.DAQmx.Device.AIVoltageInternalExcitationRangeValues" /> to determine supported excitation values.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AIVoltageInternalExcitationRangeValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIVoltageInternalExcitationRangeValues" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates pairs of internal voltage excitation ranges supported by this device. Each pair consists of the low value, followed by the high value. If the device supports a set of discrete internal excitation values, use <see cref="P:NationalInstruments.DAQmx.Device.AIVoltageInternalExcitationDiscreteValues" /> to determine the supported excitation values.</summary>
<value>Indicates pairs of internal voltage excitation ranges supported by this device. Each pair consists of the low value, followed by the high value. If the device supports a set of discrete internal excitation values, use <see cref="P:NationalInstruments.DAQmx.Device.AIVoltageInternalExcitationDiscreteValues" /> to determine the supported excitation values.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AICurrentRanges" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AICurrentRanges" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the pairs of current input ranges supported by this device. Each pair consists of the low value, followed by the high value.</summary>
<value>Indicates the pairs of current input ranges supported by this device. Each pair consists of the low value, followed by the high value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AICurrentInternalExcitationDiscreteValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AICurrentInternalExcitationDiscreteValues" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the set of discrete internal current excitation values supported by this device.</summary>
<value>Indicates the set of discrete internal current excitation values supported by this device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AIBridgeRanges" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIBridgeRanges" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates pairs of input voltage ratio ranges, in volts per volt, supported by devices that acquire using ratiometric measurements. Each pair consists of the low value followed by the high value.</summary>
<value>Indicates pairs of input voltage ratio ranges, in volts per volt, supported by devices that acquire using ratiometric measurements. Each pair consists of the low value followed by the high value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AIFrequencyRanges" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIFrequencyRanges" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the pairs of frequency input ranges supported by this device. Each pair consists of the low value, followed by the high value.</summary>
<value>Indicates the pairs of frequency input ranges supported by this device. Each pair consists of the low value, followed by the high value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AIGains" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AIGains" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the input gain settings supported by this device.</summary>
<value>Indicates the input gain settings supported by this device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.LowpassCutoffFrequenciesDiscreteValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="LowpassCutoffFrequenciesDiscreteValues" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the set of discrete lowpass cutoff frequencies supported by this device. If the device supports ranges of lowpass cutoff frequencies, use <see cref="P:NationalInstruments.DAQmx.Device.LowpassCutoffFrequenciesRangeValues" /> to determine supported frequencies.</summary>
<value>Indicates the set of discrete lowpass cutoff frequencies supported by this device. If the device supports ranges of lowpass cutoff frequencies, use <see cref="P:NationalInstruments.DAQmx.Device.LowpassCutoffFrequenciesRangeValues" /> to determine supported frequencies.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.LowpassCutoffFrequenciesRangeValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="LowpassCutoffFrequenciesRangeValues" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates pairs of lowpass cutoff frequency ranges supported by this device. Each pair consists of the low value, followed by the high value. If the device supports a set of discrete lowpass cutoff frequencies, use <see cref="P:NationalInstruments.DAQmx.Device.LowpassCutoffFrequenciesDiscreteValues" /> to determine the supported  frequencies.</summary>
<value>Indicates pairs of lowpass cutoff frequency ranges supported by this device. Each pair consists of the low value, followed by the high value. If the device supports a set of discrete lowpass cutoff frequencies, use <see cref="P:NationalInstruments.DAQmx.Device.LowpassCutoffFrequenciesDiscreteValues" /> to determine the supported  frequencies.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.DigitalFilterLowpassCutoffFrequencyDiscreteValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterLowpassCutoffFrequencyDiscreteValues" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the set of discrete lowpass cutoff frequencies supported by this device. If the device supports ranges of lowpass cutoff frequencies, use AI.DigFltr.Lowpass.CutoffFreq.RangeVals to determine supported frequencies.</summary>
<value>Indicates the set of discrete lowpass cutoff frequencies supported by this device. If the device supports ranges of lowpass cutoff frequencies, use AI.DigFltr.Lowpass.CutoffFreq.RangeVals to determine supported frequencies.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.DigitalFilterLowpassCutoffFrequencyRangeValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterLowpassCutoffFrequencyRangeValues" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates pairs of lowpass cutoff frequency ranges supported by this device. Each pair consists of the low value, followed by the high value. If the device supports a set of discrete lowpass cutoff frequencies, use AI.DigFltr.Lowpass.CutoffFreq.DiscreteVals to determine the supported frequencies.</summary>
<value>Indicates pairs of lowpass cutoff frequency ranges supported by this device. Each pair consists of the low value, followed by the high value. If the device supports a set of discrete lowpass cutoff frequencies, use AI.DigFltr.Lowpass.CutoffFreq.DiscreteVals to determine the supported frequencies.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AOPhysicalChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AOPhysicalChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the analog output physical channels available on the device.</summary>
<value>Indicates an array containing the names of the analog output physical channels available on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AOSampleClockSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AOSampleClockSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device supports the sample clock timing  type for analog output tasks.</summary>
<value>Indicates if the device supports the sample clock timing  type for analog output tasks.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AOMaximumRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AOMaximumRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the maximum analog output rate of the device.</summary>
<value>Indicates the maximum analog output rate of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AOMinimumRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AOMinimumRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the minimum analog output rate of the device.</summary>
<value>Indicates the minimum analog output rate of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.AOVoltageRanges" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AOVoltageRanges" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates pairs of output voltage ranges supported by this device. Each pair consists of the low value, followed by the high value.</summary>
<value>Indicates pairs of output voltage ranges supported by this device. Each pair consists of the low value, followed by the high value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AOCurrentRanges" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AOCurrentRanges" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates pairs of output current ranges supported by this device. Each pair consists of the low value, followed by the high value.</summary>
<value>Indicates pairs of output current ranges supported by this device. Each pair consists of the low value, followed by the high value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.AOGains" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AOGains" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the output gain settings supported by this device.</summary>
<value>Indicates the output gain settings supported by this device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.DILines" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DILines" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the digital input lines available on the device.</summary>
<value>Indicates an array containing the names of the digital input lines available on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.DIPorts" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DIPorts" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the digital input ports available on the device.</summary>
<value>Indicates an array containing the names of the digital input ports available on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.DIMaximumRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DIMaximumRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the maximum digital input rate of the device.</summary>
<value>Indicates the maximum digital input rate of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.DOLines" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DOLines" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the digital output lines available on the device.</summary>
<value>Indicates an array containing the names of the digital output lines available on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.DOPorts" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DOPorts" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the digital output ports available on the device.</summary>
<value>Indicates an array containing the names of the digital output ports available on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.DOMaximumRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DOMaximumRate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the maximum digital output rate of the device.</summary>
<value>Indicates the maximum digital output rate of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.CIPhysicalChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CIPhysicalChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the counter input physical channels available on the device.</summary>
<value>Indicates an array containing the names of the counter input physical channels available on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.CISampleClockSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CISampleClockSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device supports the sample clock timing type for counter input tasks.</summary>
<value>Indicates if the device supports the sample clock timing type for counter input tasks.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.CIMaxSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CIMaxSize" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in bits the size of the counters on the device.</summary>
<value>Indicates in bits the size of the counters on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.CIMaximumTimebase" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CIMaximumTimebase" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates in hertz the maximum counter timebase frequency.</summary>
<value>Indicates in hertz the maximum counter timebase frequency.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.COPhysicalChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="COPhysicalChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array containing the names of the counter output physical channels available on the device.</summary>
<value>Indicates an array containing the names of the counter output physical channels available on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.Device.COSampleClockSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="COSampleClockSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device supports Sample Clock timing for counter output tasks.</summary>
<value>Indicates if the device supports Sample Clock timing for counter output tasks.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.COMaxSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="COMaxSize" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in bits the size of the counters on the device.</summary>
<value>Indicates in bits the size of the counters on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.COMaximumTimebase" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="COMaximumTimebase" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates in hertz the maximum counter timebase frequency.</summary>
<value>Indicates in hertz the maximum counter timebase frequency.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.TedsHardwareTedsSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="TedsHardwareTedsSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the device supports hardware TEDS.</summary>
<value>Indicates whether the device supports hardware TEDS.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.NumberOfDmaChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="NumberOfDmaChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of DMA channels on the device.</summary>
<value>Indicates the number of DMA channels on the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.BusType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BusType" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DeviceBusType">
      <summary>Indicates the bus type of the device.</summary>
<value>Indicates the bus type of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.PciBusNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="PciBusNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the PCI bus number of the device.</summary>
<value>Indicates the PCI bus number of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.PciDeviceNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="PciDeviceNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the PCI slot number of the device.</summary>
<value>Indicates the PCI slot number of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.PxiChassisNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="PxiChassisNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the PXI chassis number of the device, as identified in MAX.</summary>
<value>Indicates the PXI chassis number of the device, as identified in MAX.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.PxiSlotNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="PxiSlotNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the PXI slot number of the device.</summary>
<value>Indicates the PXI slot number of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.CompactDaqChassisDeviceName" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CompactDaqChassisDeviceName" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the name of the CompactDAQ chassis that contains this module.</summary>
<value>Indicates the name of the CompactDAQ chassis that contains this module.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.CompactDaqChassisSlotNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CompactDaqChassisSlotNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the slot number in which this module is located in the CompactDAQ chassis.</summary>
<value>Indicates the slot number in which this module is located in the CompactDAQ chassis.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.TcpipHostname" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="TcpipHostname" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the IPv4 hostname of the device.</summary>
<value>Indicates the IPv4 hostname of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.TcpipEthernetIP" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="TcpipEthernetIP" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the IPv4 address of the Ethernet interface in dotted decimal format. This property returns 0.0.0.0 if the Ethernet interface cannot acquire an address.</summary>
<value>Indicates the IPv4 address of the Ethernet interface in dotted decimal format. This property returns 0.0.0.0 if the Ethernet interface cannot acquire an address.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Device.TcpipWirelessIP" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="TcpipWirelessIP" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the IPv4 address of the 802.11 wireless interface in dotted decimal format. This property returns 0.0.0.0 if the wireless interface cannot acquire an address.</summary>
<value>Indicates the IPv4 address of the 802.11 wireless interface in dotted decimal format. This property returns 0.0.0.0 if the wireless interface cannot acquire an address.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.Scale" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Scale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> that translates between prescaled quantities in device units and quantities scaled to the units of interest.</summary>
<threadsafety safety="safe" />
<remarks>
<para>
<see cref="T:NationalInstruments.DAQmx.Scale" /> is the base class for <see cref="T:NationalInstruments.DAQmx.LinearScale" />, <see cref="T:NationalInstruments.DAQmx.PolynomialScale" />, <see cref="T:NationalInstruments.DAQmx.RangeMapScale" />, and <see cref="T:NationalInstruments.DAQmx.TableScale" />. All instances of <see cref="T:NationalInstruments.DAQmx.Scale" /> are of one of the derived class types. Refer to the derived class documentation for more information.
</para>
<para>
When you create a scale, you must provide the scale with a name because the scale is associated with channels through its name. You can create and configure a scale in Measurement <entity value="amp" /> Automation Explorer (MAX) or with the constructor of a class that derives from <see cref="T:NationalInstruments.DAQmx.Scale" />.
</para>
</remarks>
<seealso cref="M:NationalInstruments.DAQmx.DaqSystem.LoadScale(System.String)" />
<seealso cref="T:NationalInstruments.DAQmx.LinearScale" />
<seealso cref="T:NationalInstruments.DAQmx.PolynomialScale" />
<seealso cref="T:NationalInstruments.DAQmx.RangeMapScale" />
<seealso cref="T:NationalInstruments.DAQmx.TableScale" />
</member>
    <member name="P:NationalInstruments.DAQmx.Scale.Name" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Name" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Gets the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">scale</see>.</summary>
<value>A <see cref="T:System.String" /> that represents the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">scale</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Scale.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Scale.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Scale.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Scale.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.Scale" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Use this method only if the application you create runs on a low memory system.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Scale.Type" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Type" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.ScaleType">
      <summary>Gets the type of scale.</summary>
<value>The type of scale.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.Scale.#ctor(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Scale" nihasget="0" nihasset="0" niparameters="name" niparametertypes="System.String" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.Scale" /> class with the specified scale name.</summary>
<param name="name">The name of the scale.</param>
<remarks>This constructor is only for the use of classes derived from <see cref="T:NationalInstruments.DAQmx.Scale" />. To load a scale from Measurement <entity value="amp" /> Automation Explorer (MAX), use the <see cref="M:NationalInstruments.DAQmx.DaqSystem.LoadScale(System.String)" /> method on the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Local" /> instance of <see cref="T:NationalInstruments.DAQmx.DaqSystem" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Scale.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.Scale.Description" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Description" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies a description for the scale.</summary>
<value>Specifies a description for the scale.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Scale.ScaledUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ScaledUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the units to use for scaled values. You can use an arbitrary string.</summary>
<value>Specifies the units to use for scaled values. You can use an arbitrary string.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Scale.PreScaledUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PreScaledUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ScalePreScaledUnits">
      <summary>Specifies the units of the values that you want to scale.</summary>
<value>Specifies the units of the values that you want to scale.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.LinearScale" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LinearScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a linear <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> that scales values using the equation <format type="italics">y = mx + b</format>.
</summary>
<seealso cref="M:NationalInstruments.DAQmx.DaqSystem.LoadScale(System.String)" />
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.LinearScale.#ctor(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LinearScale" nihasget="0" nihasset="0" niparameters="name,slope,yIntercept" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.LinearScale" /> class that scales values using the equation <format type="italics">y = mx + b</format>, where <format type="italics">x</format> is the prescaled value, and <format type="italics">y</format> is the scaled value.</summary>
<security condition="unmanagedcode" />
<param name="name">The name of the custom scale for later use, such as when you create a virtual channel.</param>
<param name="slope">The slope, <format type="italics">m</format>, in the equation. 
</param>
<param name="yIntercept">The y-intercept, <format type="italics">b</format>, in the equation.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
The equation is identical for input and output. If the equation is in the form <format type="italics">x = my + b</format>, you must first solve for <format type="italics">y</format> in terms of <format type="italics">x</format>.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.LinearScale.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.LinearScale.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.LinearScale.Slope" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Slope" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the slope, m, in the equation y=mx+b.</summary>
<value>Specifies the slope, m, in the equation y=mx+b.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.LinearScale.YIntercept" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="YIntercept" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the y-intercept, b, in the equation y=mx+b.</summary>
<value>Specifies the y-intercept, b, in the equation y=mx+b.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DaqWarningEventArgs" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqWarningEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides data for the <see cref="E:NationalInstruments.DAQmx.DaqSystem.DaqWarning" /> event. 
</summary>
<threadsafety safety="safe" />
</member>
    <member name="P:NationalInstruments.DAQmx.DaqWarningEventArgs.Message" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Message" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Gets a message that describes the warning.</summary>
<value>A message that describes the warning.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqWarningEventArgs.Error" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Error" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets the NI-DAQmx driver code for the warning that occurred. Zero means no warning occurred.</summary>
<value>The NI-DAQmx driver code for the warning that occurred.</value>
<remarks>
Refer to 
<see keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</see> for a list of possible
values.
</remarks>
<seealso keyword="NIDAQmxdrivererrors" keywordType="mstudio">NI-DAQmx Driver Error Codes</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqWarningEventArgs.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqWarningEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqWarningEventArgs" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DaqWarningEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqWarningEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.DaqSystem" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqSystem" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods that access tasks, scales, and global channels stored in Measurement <entity value="amp" /> Automation Explorer (MAX), performs immediate operations on DAQ hardware, and creates classes from which you can get information about the hardware.
</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.LoadScale(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LoadScale" nihasget="0" nihasset="0" niparameters="persistedName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.Scale">
      <summary>Loads a scale that is stored in Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<param name="persistedName">The name of the scale to load.</param>
<returns>A <see cref="T:NationalInstruments.DAQmx.Scale" /> that represents the scale that is stored in MAX.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can use the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Scales" /> property to get a list of custom scales on the system.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.LoadTask(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LoadTask" nihasget="0" nihasset="0" niparameters="persistedName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.Task">
      <summary>Loads a task that is stored in Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<param name="persistedName">The name of the task to load.</param>
<returns>A <see cref="T:NationalInstruments.DAQmx.Task" /> that represents the task that is stored in MAX.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can use the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Tasks" /> property to get a list of tasks on the system.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.LoadDevice(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LoadDevice" nihasget="0" nihasset="0" niparameters="deviceName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.Device">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.Device" /> that you can use to control the specified device or get information about that device.</summary>
<param name="deviceName">The name of the device.</param>
<returns>A <see cref="T:NationalInstruments.DAQmx.Device" /> that represents the device.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can use the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Devices" /> property to get a list of devices installed on the system.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.DisconnectTerminals(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DisconnectTerminals" nihasget="0" nihasset="0" niparameters="sourceTerminal,destinationTerminal" niparametertypes="System.String,System.String" nireturnvaluetype="System.Void">
      <summary>Removes signal routes you created by using <see cref="M:NationalInstruments.DAQmx.DaqSystem.ConnectTerminals(System.String,System.String,NationalInstruments.DAQmx.SignalRoutingModifiers)" />.</summary>
<param name="sourceTerminal">The originating <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> of the route.</param>
<param name="destinationTerminal">The receiving <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> of the route.</param>
<remarks>
This method cannot remove task-based routes, such as those you create through timing and triggering configuration. When this method is called, it immediately unreserves the route. This type of routing is called <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/immediateRouting.html');">immediate routing</see>. 
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.TristateOutputTerminal(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TristateOutputTerminal" nihasget="0" nihasset="0" niparameters="outputTerminal" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Sets a terminal to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/triStating.html');">high-impedance state</see>.

</summary>
<param name="outputTerminal">The terminal on the I/O connector to set to high-impedance state.</param>
<remarks>
<para>If you connect an external signal to a terminal on the I/O connector, the terminal must be in high-impedance state. Otherwise, the device could double-drive the terminal and damage the hardware. If you call this method on a terminal in an active route, the method fails and reports no error back to the user.</para>
<para>
<see cref="M:NationalInstruments.DAQmx.Device.Reset" /> sets all terminals on the I/O connector to high-impedance state, but also clears any active tasks associated with the device. 
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.LoadSwitchChannel(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LoadSwitchChannel" nihasget="0" nihasset="0" niparameters="switchChannelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.SwitchChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.SwitchChannel" /> that you can use to get the switch channel capabilities and set the usage type for the switch channel.</summary>
<param name="switchChannelName">The name of the switch channel. </param>
<returns>A <see cref="T:NationalInstruments.DAQmx.SwitchChannel" /> that represents the switch channel.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.CreateSwitchScanTask(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateSwitchScanTask" nihasget="0" nihasset="0" niparameters="taskName,scanList" niparametertypes="System.String,System.String" nireturnvaluetype="NationalInstruments.DAQmx.Task">
      <summary>Creates a new switch scanning task with the sequence specified in the scan list.</summary>
<param name="taskName">The name of the task to create.  If you specify <see cref="F:System.String.Empty" /> or <see langword="null" />, the NI-DAQmx driver assigns a unique name to the new task.</param>
<param name="scanList">The sequence of connections and disconnections for the task. This sequence is specified using a special <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/ConDisconSyntax.html');">syntax</see>.</param>
<returns>The <see cref="T:NationalInstruments.DAQmx.Task" /> that this method creates.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.DaqSystem.CreateSwitchScanTask(System.String,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.ConnectSwitchChannels(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConnectSwitchChannels" nihasget="0" nihasset="0" niparameters="connectionList,waitForSettling" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Makes one or more connections between switch channels as specified by the connection list.</summary>
<param name="connectionList">A list of connections to make between switch channels. This list uses a special <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/ConDisconSyntax.html');">syntax</see>.</param>
<param name="waitForSettling">If  <see langword="true" />, this method waits for the switches to settle before returning. If <see langword="false" />, the method returns immediately after the operation. This settling time is controlled through the <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> property.</param>
<remarks>
<para>You can specify only the two endpoints, or you can specify the explicit path between two endpoints. This method can make connections on multiple devices, but each individual connection must reside on a single device. In the event of an error, connecting stops at the point in the list where the error occurred.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.ConnectSwitchChannels(System.String,System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConnectSwitchChannels" nihasget="0" nihasset="0" niparameters="switchChannel1,switchChannel2,waitForSettling" niparametertypes="System.String,System.String,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Makes a connection between two switch channels.</summary>
<param name="switchChannel1">The first channel to connect.</param>
<param name="switchChannel2">The second channel to connect.</param>
<param name="waitForSettling">If  <see langword="true" />, this method waits for the switches to settle before returning. If <see langword="false" />, the method returns immediately after the operation. This settling time is controlled through the <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> property.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.DisconnectSwitchChannels(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DisconnectSwitchChannels" nihasget="0" nihasset="0" niparameters="disconnectionList,waitForSettling" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Terminates one or more connections between switch channels as specified by the disconnection list.</summary>
<param name="disconnectionList">A list of switch connections to terminate. This list uses a special <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/ConDisconSyntax.html');">syntax</see>. </param>
<param name="waitForSettling">If  <see langword="true" />, this method waits for the switches to settle before returning. If <see langword="false" />, the method returns immediately after the operation. This settling time is controlled through the <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> property.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.DisconnectSwitchChannels(System.String,System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DisconnectSwitchChannels" nihasget="0" nihasset="0" niparameters="switchChannel1,switchChannel2,waitForSettling" niparametertypes="System.String,System.String,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Terminates a connection between two channels.</summary>
<param name="switchChannel1">The first channel in the connection.</param>
<param name="switchChannel2">The second channel in the connection.</param>
<param name="waitForSettling">If  <see langword="true" />, this method waits for the switches to settle before returning. If <see langword="false" />, the method returns immediately after the operation. This settling time is controlled through the <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> property.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SwitchFindPath(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchFindPath" nihasget="0" nihasset="0" niparameters="switchChannel1,switchChannel2" niparametertypes="System.String,System.String" nireturnvaluetype="System.String">
      <summary>Returns information about the path between two switch channels.</summary>
<param name="switchChannel1">The first channel in the connection.
</param>
<param name="switchChannel2">The second channel in the connection.
</param>
<returns>If the channels are connected, this method returns the path by which they are connected. If the channels are not connected, the method returns a path by which they can be connected, if one is available. </returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.OpenSwitchRelays(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OpenSwitchRelays" nihasget="0" nihasset="0" niparameters="relays,waitForSettling" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Opens the specified relays.</summary>
<param name="relays">A set of relays to open. You can specify a string that contains a comma-delimited list of relays.</param>
<param name="waitForSettling">If  <see langword="true" />, this method waits for the switches to settle before returning. If <see langword="false" />, the method returns immediately after the operation. This settling time is controlled through the <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> property. 
</param>
<remarks>When you operate relays directly, you circumvent the protection that channel <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/ChanUsage.html');">usage types</see> offer. Avoid using this method when you use the <see cref="M:NationalInstruments.DAQmx.DaqSystem.ConnectSwitchChannels(System.String,System.Boolean)" /> or <see cref="M:NationalInstruments.DAQmx.DaqSystem.DisconnectSwitchChannels(System.String,System.Boolean)" /> methods because this method does not pass the changes that you make to those methods.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.CloseSwitchRelays(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CloseSwitchRelays" nihasget="0" nihasset="0" niparameters="relays,waitForSettling" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Closes the specified relays.</summary>
<param name="relays">A set of relays to close. You can specify a string that contains a comma-delimited list of relays.</param>
<param name="waitForSettling">If  <see langword="true" />, this method waits for the switches to settle before returning. If <see langword="false" />, the method returns immediately after the operation. This settling time is controlled through the <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> property.</param>
<remarks>When you operate relays directly, you circumvent the protection that channel <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/ChanUsage.html');">usage types</see> offer. Avoid using this method when you use the <see cref="M:NationalInstruments.DAQmx.DaqSystem.ConnectSwitchChannels(System.String,System.Boolean)" /> or <see cref="M:NationalInstruments.DAQmx.DaqSystem.DisconnectSwitchChannels(System.String,System.Boolean)" /> methods because this method does not pass the changes that you make to those methods.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetSwitchRelayCount(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetSwitchRelayCount" nihasget="0" nihasset="0" niparameters="relay" niparametertypes="System.String" nireturnvaluetype="System.Int64">
      <summary>Returns the number of times a relay has actuated on switches that support querying the relay count.</summary>
<returns>The number of times the relay has been activated.</returns>
<param name="relay">The relay you want to query.</param>
<remarks>You must wait for the switch to settle before this method can determine an accurate relay count. Use this method to track relay lifetime and usage.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetSwitchRelayCounts(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetSwitchRelayCounts" nihasget="0" nihasset="0" niparameters="relays" niparametertypes="System.String" nireturnvaluetype="System.Int64[]">
      <summary>Returns the number of times a set of relays have actuated.</summary>
<returns>The number of times each specified relay has been activated. The order of this array corresponds to the order of <paramref name="relays" />.</returns>
<param name="relays">The set of relays you want to query. You can use a string that contains a comma-delimited list of relays.</param>
<remarks>You must wait for the switch to settle before this method can determine an accurate relay count. Use this method to track relay lifetime and usage.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetSwitchRelayPosition(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetSwitchRelayPosition" nihasget="0" nihasset="0" niparameters="relay" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.SwitchRelayPosition">
      <summary>Returns the current position of a single relay.</summary>
<returns>The position of the relay.</returns>
<param name="relay">The relay you want to query.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetSwitchRelayPositions(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetSwitchRelayPositions" nihasget="0" nihasset="0" niparameters="relays" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.SwitchRelayPosition[]">
      <summary>Returns the current position of a set of relays.</summary>
<returns>The position of each specified relay. The order of this array corresponds to the order of <paramref name="relays" />.</returns>
<param name="relays">The set of relays you want to query. You can use a string that contains a comma-delimited list of relays.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.LastDaqWarning" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LastDaqWarning" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DaqWarningEventArgs">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DaqWarningEventArgs" /> for the last <see cref="E:NationalInstruments.DAQmx.DaqSystem.DaqWarning" /> event that occurred.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DaqWarningEventArgs" />  for the <see cref="E:NationalInstruments.DAQmx.DaqSystem.DaqWarning" /> event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
This property returns information only about warnings that occur in the thread from which the property is accessed. This behavior distinguishes warnings that are caused by actions in one thread from warnings that are caused by independent actions that occur at the same time  in another thread.
</remarks>
</member>
    <member name="E:NationalInstruments.DAQmx.DaqSystem.DaqWarning" nitypekind="Event" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqWarning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Occurs when the NI-DAQmx driver issues a warning.</summary>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.Local" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Local" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DaqSystem">
      <summary>Gets an instance of the <see cref="T:NationalInstruments.DAQmx.DaqSystem" /> class that represents the local DAQ system.</summary>
<security condition="unmanagedcode" />
<value>An instance of the <see cref="T:NationalInstruments.DAQmx.DaqSystem" /> class.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.ConnectTerminals(System.String,System.String,NationalInstruments.DAQmx.SignalRoutingModifiers)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConnectTerminals" nihasget="0" nihasset="0" niparameters="sourceTerminal,destinationTerminal,signalModifiers" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.SignalRoutingModifiers" nireturnvaluetype="System.Void">
      <summary>Creates a route between a source and destination <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> with the specified signal modification.</summary>
<param name="sourceTerminal">The originating <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> of the route.</param>
<param name="destinationTerminal">The receiving <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> of the route.</param>
<param name="signalModifiers">Specifies if the signal routed from the source terminal to the destination terminal is inverted. If the device is not capable of signal inversion or if a previous route reserved the inversion circuitry in an incompatible configuration, attempting to invert the signal causes an error.</param>
<remarks>
The route can carry a variety of digital signals such as triggers, clocks, and hardware events. These source and destination terminals can be on different devices, as long as a connecting public bus, such as RTSI or the PXI backplane, is available. This method does not modify a task. When the method is called, the route is immediately reserved and committed to hardware. This type of routing is called <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/immediateRouting.html');">immediate routing</see>. 
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.ConnectTerminals(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConnectTerminals" nihasget="0" nihasset="0" niparameters="sourceTerminal,destinationTerminal" niparametertypes="System.String,System.String" nireturnvaluetype="System.Void">
      <summary>Creates a route between a source and destination <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see>.</summary>
<param name="sourceTerminal">The originating <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> of the route.</param>
<param name="destinationTerminal">The receiving <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> of the route.</param>
<remarks>
The route can carry a variety of digital signals such as triggers, clocks, and hardware events. These source and destination terminals can be on different devices, as long as a connecting public bus, such as RTSI or the PXI backplane, is available. This method does not modify a task. When the method is called, the route is immediately reserved and committed to hardware. This type of routing is called <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/immediateRouting.html');">immediate routing</see>. 
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.DisconnectAll(System.String,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DisconnectAll" nihasget="0" nihasset="0" niparameters="switchDevice,waitForSettling" niparametertypes="System.String,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Terminates all active connections on the device, which places the relays into the topology reset state.</summary>
<param name="switchDevice">The switch device on which connections are to be terminated.
</param>
<param name="waitForSettling">If  <see langword="true" />, this method waits for the switches to settle before returning. If <see langword="false" />, the method returns immediately after the operation. This settling time is controlled through the <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> property.</param>
<remarks>
You can use this method to terminate connections made by <see cref="M:NationalInstruments.DAQmx.DaqSystem.ConnectSwitchChannels(System.String,System.Boolean)" />, <see cref="M:NationalInstruments.DAQmx.DaqSystem.OpenSwitchRelays(System.String,System.Boolean)" />, or <see cref="M:NationalInstruments.DAQmx.DaqSystem.CloseSwitchRelays(System.String,System.Boolean)" />. This method does not alter the settling time or channel usage settings. To reset those settings, use <see cref="M:NationalInstruments.DAQmx.Device.Reset" />.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.OnDaqWarning(NationalInstruments.DAQmx.DaqWarningEventArgs)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OnDaqWarning" nihasget="0" nihasset="0" niparameters="e" niparametertypes="NationalInstruments.DAQmx.DaqWarningEventArgs" nireturnvaluetype="System.Void">
      <summary>Objects in the NI-DAQmx API call this method to indicate that a warning condition occurred. To get notification of warnings, attach an event handler to the  <see cref="E:NationalInstruments.DAQmx.DaqSystem.DaqWarning" /> event.</summary>
<param name="sender">the object that generated the event. </param>
<param name="e">The <see cref="T:NationalInstruments.DAQmx.DaqWarningEventArgs" /> that contains event data.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SetDevicePowerUpState(System.String,System.String[],NationalInstruments.DAQmx.DigitalPowerUpState[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetDevicePowerUpState" nihasget="0" nihasset="0" niparameters="deviceName,virtualChannels,powerUpStates" niparametertypes="System.String,System.String[],NationalInstruments.DAQmx.DigitalPowerUpState[]" nireturnvaluetype="System.Void">
      <summary>Updates the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/initstates.html');">power up states</see> to which to set digital physical channels on a device when the device powers up or when you reset the device. 
</summary>
<param name="deviceName">The name, as configured in Measurement <entity value="amp" /> Automation Explorer (MAX), of the device to which this operation applies.</param>
<param name="virtualChannels">The digital lines or ports for which to set new power up states. Each value in this array specifies a virtual channel string that is assigned the power up state at the corresponding position in the <paramref name="powerUpStates" /> parameter. 
You cannot set power up states for dedicated digital input lines. You can specify a string that contains a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">list or range</see> of digital lines or ports. 
</param>
<param name="powerUpStates">The physical channels and power up states to set.
Each value in this array applies to the virtual channel name at the corresponding position of the <paramref name="virtualChannels" /> parameter.
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Power up states are stored in EEPROMs that you can write to only a limited number of times. Therefore, you should use this method as infrequently as possible. This method writes to the EEPROM only if a setting you request is different from the one currently stored on the EEPROM. This method writes power up states in the sequential order of the power up states array. Therefore, any physical channels with multiple entries in that array use the highest array index. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SetDevicePowerUpState(System.String,System.String[],System.Double[],System.String[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetDevicePowerUpState" nihasget="0" nihasset="0" niparameters="deviceName,voltageChannels,voltageValues,currentChannels,currentValues" niparametertypes="System.String,System.String[],System.Double[],System.String[],System.Double[]" nireturnvaluetype="System.Void">
      <summary>Updates the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/initstates.html');">power up states</see> to which to set analog physical channels on a device when the device powers up or when you reset the device. 
</summary>
<param name="deviceName">The name, as configured in Measurement <entity value="amp" /> Automation Explorer (MAX), of the device to which this operation applies.</param>
<param name="voltageChannels">The voltage channels for which to set new power up values. Each value in this array specifies a virtual channel string that is assigned the voltage at the corresponding position in the <paramref name="voltageValues" /> parameter. You can set voltage power up states only for physical channels that support voltage output.  
</param>
<param name="voltageValues">The voltages to set.
Each value in this array applies to the virtual channel name at the corresponding position of the <paramref name="voltageChannels" /> parameter. You can set voltage power up states only for physical channels that support voltage output. 
</param>
<param name="currentChannels">The current channels for which to set new power up values. Each value in this array specifies a virtual channel string that is assigned the current at the corresponding position in the <paramref name="currentValues" /> parameter. You can set current power up states only for physical channels that support current output. 
</param>
<param name="currentValues">The currents to set. Each value in this array applies to the virtual channel name at the corresponding position of the <paramref name="currentChannels" /> parameter. You can set current power up states only for physical channels that support current output. 
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>Power up states are stored in EEPROMs that you can write to only a limited number of times. Therefore, you should use this method as infrequently as possible. This method writes to the EEPROM only if a setting you request is different from the one currently stored on the EEPROM. This method writes power up states in the sequential order of the power up states array. Therefore, any physical channels with multiple entries in that array use the highest array index.</para>
<para>When you call this method, you can choose to not set either voltages or currents by passing in <see langword="null" /> for the voltage or current parameters, but not both.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.CreateWatchdogTimerTask(System.String,System.String,System.Double,System.String[],NationalInstruments.DAQmx.WatchdogDOExpirationState[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateWatchdogTimerTask" nihasget="0" nihasset="0" niparameters="taskName,device,timeout,physicalChannels,expirationStates" niparametertypes="System.String,System.String,System.Double,System.String[],NationalInstruments.DAQmx.WatchdogDOExpirationState[]" nireturnvaluetype="NationalInstruments.DAQmx.Task">
      <summary>Creates a task to configure and control the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/watchdogTimers.html');">watchdog timer</see>  of a static DIO device. The timer activates when you start the task.
</summary>
<param name="taskName">The name of the task to create.  If you specify <see cref="F:System.String.Empty" /> or <see langword="null" />, the NI-DAQmx driver assigns a unique name to the new task.</param>
<param name="device">The name of the device for which to create a watchdog timer task.</param>
<param name="timeout">The amount of time in seconds until the watchdog timer expires.  A value of <entity value="ndash" />1 means the internal timer never expires. Set <paramref name="timeout" /> to <entity value="ndash" />1 if you use an Expiration Trigger to expire the watchdog task.</param>
<param name="physicalChannels">The physical channel names for which to define watchdog expiration states.  Each value in this vector specifies a physical channel string that is assigned the expiration state at the corresponding position in the <paramref name="expirationStates" /> parameter.  You cannot modify the expiration state of dedicated digital input physical channels.</param>
<param name="expirationStates">The state to which to set the digital physical channel when the watchdog timer expires.</param>
<returns>The <see cref="T:NationalInstruments.DAQmx.Task" /> that this method creates.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Use the properties and methods on <see cref="T:NationalInstruments.DAQmx.Task" /> and <see cref="P:NationalInstruments.DAQmx.Task.Watchdog" /> to configure and control the watchdog timer task.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.LoadPhysicalChannel(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LoadPhysicalChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.PhysicalChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.PhysicalChannel" /> that you can use to configure and retrieve TEDS information for the specified physical channel.</summary>
<param name="physicalChannelName">The name of the physical channel.</param>
<returns>A <see cref="T:NationalInstruments.DAQmx.PhysicalChannel" /> that represents the physical channel.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.IsReadOrWriteLate" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsReadOrWriteLate" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Determines if a hardware-timed single-point read or write operation is overdue on the current thread.
The <see cref="P:NationalInstruments.DAQmx.DaqSystem.IsReadOrWriteLate" /> property has been deprecated in favor of the <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> method. </summary>
<value>
<see langword="true" /> if a read or write is overdue for a hardware-timed single-point task being read from or written to in the current thread.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>The value of this property is not meaningful unless reading or writing a task that has <see cref="P:NationalInstruments.DAQmx.Timing.SampleQuantityMode" /> set to
<see cref="F:NationalInstruments.DAQmx.SampleQuantityMode.HardwareTimedSinglePoint" />.</para>
<para>This property returns information only about warnings that occur in the thread from which the property is accessed. This behavior distinguishes warnings that are caused by actions in one thread from warnings that are caused by independent actions that occur at the same time  in another thread.</para>
</remarks>
<seealso cref="P:NationalInstruments.DAQmx.Timing.SinglePoint" />
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetPhysicalChannels(NationalInstruments.DAQmx.PhysicalChannelTypes,NationalInstruments.DAQmx.PhysicalChannelAccess)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetPhysicalChannels" nihasget="0" nihasset="0" niparameters="physicalChannelTypes,physicalChannelAccess" niparametertypes="NationalInstruments.DAQmx.PhysicalChannelTypes,NationalInstruments.DAQmx.PhysicalChannelAccess" nireturnvaluetype="System.String[]">
      <summary>Gets an array that contains the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channel names</see> of devices installed in the system.</summary>
<param name="physicalChannelTypes">The types of physical channels to include.</param>
<param name="physicalChannelAccess">The access types of physical channels to include.</param>
<returns>An array that contains the names of the requested physical channels in the system.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetTerminals(NationalInstruments.DAQmx.TerminalTypes)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetTerminals" nihasget="0" nihasset="0" niparameters="terminalTypes" niparametertypes="NationalInstruments.DAQmx.TerminalTypes" nireturnvaluetype="System.String[]">
      <summary>Gets an array that contains the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal names</see> of devices installed in the system.</summary>
<param name="terminalTypes">The types of terminals to include.</param>
<returns>An array that contains the names of the requested terminals in the system.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.SwitchTopologies" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchTopologies" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String[]">
      <summary>Gets an array containing the names of all <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Topology.html');">switch topologies</see>.</summary>
<value>An array of <see cref="T:System.String" /> that contains the names of all switch topologies.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.SwitchRelays" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchRelays" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String[]">
      <summary>Gets an array that contains the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/switchChanStrings.html');">switch relay names</see> of devices installed in the system.</summary>
<value>An array of <see cref="T:System.String" /> that contains the switch relay names of devices installed in the system.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.SwitchChannels" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String[]">
      <summary>Gets an array that contains the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/switchChanStrings.html');">switch channel names</see> of devices installed in the system.</summary>
<value>An array of <see cref="T:System.String" /> that contains the switch channel names of devices installed in the system.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetSavedTaskInfo(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetSavedTaskInfo" nihasget="0" nihasset="0" niparameters="persistedName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.SavedTaskInfo">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.SavedTaskInfo" /> object that you can use to retrieve information about the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see> stored in Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<param name="persistedName">The name of the task stored in MAX.</param>
<returns>A <see cref="T:NationalInstruments.DAQmx.SavedTaskInfo" /> object that represents the task stored in MAX.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetSavedChannelInfo(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetSavedChannelInfo" nihasget="0" nihasset="0" niparameters="persistedName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.SavedChannelInfo">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.SavedChannelInfo" /> object that you can use to retrieve information about the specified global channel stored in Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<param name="persistedName">The name of the global channel stored in MAX.</param>
<returns>A <see cref="T:NationalInstruments.DAQmx.SavedChannelInfo" /> object that represents the global channel stored in MAX.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetSavedScaleInfo(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetSavedScaleInfo" nihasget="0" nihasset="0" niparameters="persistedName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.SavedScaleInfo">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.SavedScaleInfo" /> object that you can use to retrieve information about the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> stored in Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<param name="persistedName">The name of the custom scale stored in MAX.</param>
<returns>A <see cref="T:NationalInstruments.DAQmx.SavedScaleInfo" /> object that represents the custom scale stored in MAX.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveTask(NationalInstruments.DAQmx.Task)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveTask" nihasget="0" nihasset="0" niparameters="task" niparametertypes="NationalInstruments.DAQmx.Task" nireturnvaluetype="System.Void">
      <summary>Saves the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task </see>and any 
<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local channels</see> it contains to Measurement <entity value="amp" /> Automation Explorer (MAX) under the name it was given when it was created.</summary>
<param name="task">The task instance to save.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>You may save a task under a different name by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveTaskAs(NationalInstruments.DAQmx.Task,System.String)" />. 
<para>
This method sets the <see cref="F:NationalInstruments.DAQmx.SaveOptions.Default" /> option for the saved task and uses an empty string for the task <see cref="P:NationalInstruments.DAQmx.SavedTaskInfo.Author" />.  You can specify your own options and author value by using the <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveTask(NationalInstruments.DAQmx.Task,System.String,NationalInstruments.DAQmx.SaveOptions)" /> overload. </para><para>
You cannot view programmatically saved tasks in the DAQ Assistant for versions of NI-DAQ earlier than 7.4. To view a programmatically saved task in an earlier version of NI-DAQ, first use the DAQ Assistant in NI-DAQ 7.4 or later to save the task.
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving tasks.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveTask(NationalInstruments.DAQmx.Task,System.String,NationalInstruments.DAQmx.SaveOptions)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveTask" nihasget="0" nihasset="0" niparameters="task,author,options" niparametertypes="NationalInstruments.DAQmx.Task,System.String,NationalInstruments.DAQmx.SaveOptions" nireturnvaluetype="System.Void">
      <summary>Saves the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task </see>and any 
<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local channels</see> it contains to Measurement <entity value="amp" /> Automation Explorer (MAX) under the name it was given when it was created, with specifed author and options values.</summary>
<param name="task">The task instance to save.</param>
<param name="author">A user-specified string that represents the name to store with the task.  For example, tasks created with the DAQ Assistant have the string "DAQ Assistant" as their author.  You may pass <see cref="F:System.String.Empty" />.</param>
<param name="options">One or more flags indicating various save options.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You may save a task under a different name by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveTaskAs(NationalInstruments.DAQmx.Task,System.String)" />.
<para>
You cannot view programmatically saved tasks in the DAQ Assistant for versions of NI-DAQ earlier than 7.4. To view a programmatically saved task in an earlier version of NI-DAQ, first use the DAQ Assistant in NI-DAQ 7.4 or later to save the task.
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving tasks.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveTaskAs(NationalInstruments.DAQmx.Task,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveTaskAs" nihasget="0" nihasset="0" niparameters="task,persistedName" niparametertypes="NationalInstruments.DAQmx.Task,System.String" nireturnvaluetype="System.Void">
      <summary>Saves the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see> and any 
<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local channels</see> it contains to Measurement <entity value="amp" /> Automation Explorer (MAX) under the specified name.</summary>
<param name="task">The task instance to save.</param>
<param name="persistedName">The name to use for the saved task.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This method sets the <see cref="F:NationalInstruments.DAQmx.SaveOptions.Default" /> option for the saved task and uses an empty string for the task <see cref="P:NationalInstruments.DAQmx.SavedTaskInfo.Author" />.  You can specify your own options and author value by using the <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveTaskAs(NationalInstruments.DAQmx.Task,System.String,System.String,NationalInstruments.DAQmx.SaveOptions)" /> overload.
<para>
You cannot view programmatically saved tasks in the DAQ Assistant for versions of NI-DAQ earlier than 7.4. To view a programmatically saved task in an earlier version of NI-DAQ, first use the DAQ Assistant in NI-DAQ 7.4 or later to save the task.
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving tasks.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveTaskAs(NationalInstruments.DAQmx.Task,System.String,System.String,NationalInstruments.DAQmx.SaveOptions)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveTaskAs" nihasget="0" nihasset="0" niparameters="task,persistedName,author,options" niparametertypes="NationalInstruments.DAQmx.Task,System.String,System.String,NationalInstruments.DAQmx.SaveOptions" nireturnvaluetype="System.Void">
      <summary>Saves the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see> and any 
<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local channels</see> it contains to Measurement <entity value="amp" /> Automation Explorer (MAX) under the specified name and with specified author and options values.</summary>
<param name="task">The task instance to save.</param>
<param name="persistedName">The name to use for the saved task.</param>
<param name="author">A user-specified string that represents the name to store with the task.  For example, tasks created with the DAQ Assistant have the string "DAQ Assistant" as their author.  You may pass <see cref="F:System.String.Empty" />.</param>
<param name="options">One or more flags indicating various save options.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
If you do not assign a value to the saved task, NI-DAQmx uses the name currently assigned to the task. 
<para>
You cannot view programmatically saved tasks in the DAQ Assistant for versions of NI-DAQ earlier than 7.4. To view a programmatically saved task in an earlier version of NI-DAQ, first use the DAQ Assistant in NI-DAQ 7.4 or later to save the task.
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving tasks.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.DeleteTask(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DeleteTask" nihasget="0" nihasset="0" niparameters="persistedName" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Deletes the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see> that is stored in Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<param name="persistedName">The name of the task to delete.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
This method does not clear the copy of the task stored in memory.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveGlobalChannel(NationalInstruments.DAQmx.Channel)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveGlobalChannel" nihasget="0" nihasset="0" niparameters="channel" niparametertypes="NationalInstruments.DAQmx.Channel" nireturnvaluetype="System.Void">
      <summary>Saves the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local or global channel</see> to Measurement <entity value="amp" /> Automation Explorer (MAX) as a global channel, under the virtual name it was given when it was created. </summary>
<param name="channel">The channel instance to save.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>You may save a channel under a different name by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveGlobalChannelAs(NationalInstruments.DAQmx.Channel,System.String)" />.
<para>
This method sets the <see cref="F:NationalInstruments.DAQmx.SaveOptions.Default" /> option for the saved channel and uses an empty string for the channel <see cref="P:NationalInstruments.DAQmx.SavedTaskInfo.Author" />.  You can specify your own options and author value by using the <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveGlobalChannel(NationalInstruments.DAQmx.Channel,System.String,NationalInstruments.DAQmx.SaveOptions)" /> overload. 
</para><para>
You cannot view programmatically saved global channels in the DAQ Assistant for versions of NI-DAQ earlier than 7.4. To view a programmatically saved global channel in an earlier version of NI-DAQ, first use the DAQ Assistant in NI-DAQ 7.4 or later to save the global channel.
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving global channels.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveGlobalChannel(NationalInstruments.DAQmx.Channel,System.String,NationalInstruments.DAQmx.SaveOptions)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveGlobalChannel" nihasget="0" nihasset="0" niparameters="channel,author,options" niparametertypes="NationalInstruments.DAQmx.Channel,System.String,NationalInstruments.DAQmx.SaveOptions" nireturnvaluetype="System.Void">
      <summary>Saves  the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local or global channel</see> to Measurement <entity value="amp" /> Automation Explorer (MAX) as a global channel, under the virtual name it was given when it was created and with specified author and options values.</summary>
<param name="channel">The channel instance to save.</param>
<param name="author">A user-specified string that represents the name to store with the channel.  For example, channels created with the DAQ Assistant have the string "DAQ Assistant" as their author.  You may pass <see cref="F:System.String.Empty" />.</param>
<param name="options">One or more flags indicating various save options.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You may save a channel under a different name by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveGlobalChannelAs(NationalInstruments.DAQmx.Channel,System.String)" />.
<para>
You cannot view programmatically saved global channels in the DAQ Assistant for versions of NI-DAQ earlier than 7.4. To view a programmatically saved global channel in an earlier version of NI-DAQ, first use the DAQ Assistant in NI-DAQ 7.4 or later to save the global channel.
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving global channels.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveGlobalChannelAs(NationalInstruments.DAQmx.Channel,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveGlobalChannelAs" nihasget="0" nihasset="0" niparameters="channel,persistedName" niparametertypes="NationalInstruments.DAQmx.Channel,System.String" nireturnvaluetype="System.Void">
      <summary>Saves  the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local or global channel</see> to Measurement <entity value="amp" /> Automation Explorer (MAX) as a global channel, under the specified name.</summary>
<param name="channel">The channel instance to save.</param>
<param name="persistedName">The name to use for the saved channel.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This method sets the <see cref="F:NationalInstruments.DAQmx.SaveOptions.Default" /> option for the saved channel and uses an empty string for the channel <see cref="P:NationalInstruments.DAQmx.SavedChannelInfo.Author" />.  You can specify your own options and author value by using the <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveGlobalChannelAs(NationalInstruments.DAQmx.Channel,System.String,System.String,NationalInstruments.DAQmx.SaveOptions)" /> overload.
<para>
If you do not assign a value to the saved channel, NI-DAQmx uses the name currently assigned to the channel. 
</para><para>
You cannot view programmatically saved global channels in the DAQ Assistant for versions of NI-DAQ earlier than 7.4. To view a programmatically saved global channel in an earlier version of NI-DAQ, first use the DAQ Assistant in NI-DAQ 7.4 or later to save the global channel.
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving global channels.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveGlobalChannelAs(NationalInstruments.DAQmx.Channel,System.String,System.String,NationalInstruments.DAQmx.SaveOptions)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveGlobalChannelAs" nihasget="0" nihasset="0" niparameters="channel,persistedName,author,options" niparametertypes="NationalInstruments.DAQmx.Channel,System.String,System.String,NationalInstruments.DAQmx.SaveOptions" nireturnvaluetype="System.Void">
      <summary>Saves  the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local or global channel</see> to Measurement <entity value="amp" /> Automation Explorer (MAX) as a global channel, under the specified name and specified author and options values.</summary>
<param name="channel">The channel instance to save.</param>
<param name="persistedName">The name to use for the saved channel.</param>
<param name="author">A user-specified string that represents the name to store with the channel.  For example, channels created with the DAQ Assistant have the string "DAQ Assistant" as their author.  You may pass <see cref="F:System.String.Empty" />.</param>
<param name="options">One or more flags indicating various save options.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
If you do not assign a value to the saved channel, NI-DAQmx uses the name currently assigned to the channel. 
<para>
You cannot view programmatically saved global channels in the DAQ Assistant for versions of NI-DAQ earlier than 7.4. To view a programmatically saved global channel in an earlier version of NI-DAQ, first use the DAQ Assistant in NI-DAQ 7.4 or later to save the global channel.
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving global channels.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.DeleteGlobalChannel(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DeleteGlobalChannel" nihasget="0" nihasset="0" niparameters="persistedName" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Deletes the specified  <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">global channel </see>that is stored in Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<param name="persistedName">The name of the global channel to delete.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
This method does not remove the global channel from <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">tasks</see> that use it.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveScale(NationalInstruments.DAQmx.Scale)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveScale" nihasget="0" nihasset="0" niparameters="scale" niparametertypes="NationalInstruments.DAQmx.Scale" nireturnvaluetype="System.Void">
      <summary>Saves the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to Measurement <entity value="amp" /> Automation Explorer (MAX) under the name it was given when it was created.</summary>
<param name="scale">The scale instance to save.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>You may save a scale under a different name by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveScaleAs(NationalInstruments.DAQmx.Scale,System.String)" />. 
<para>
This method sets the <see cref="F:NationalInstruments.DAQmx.SaveOptions.Default" /> option for the saved scale and uses an empty string for the scale <see cref="P:NationalInstruments.DAQmx.SavedScaleInfo.Author" />.  You can specify your own options and author value by using the <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveScale(NationalInstruments.DAQmx.Scale,System.String,NationalInstruments.DAQmx.SaveOptions)" /> overload. 
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving custom scales.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveScale(NationalInstruments.DAQmx.Scale,System.String,NationalInstruments.DAQmx.SaveOptions)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveScale" nihasget="0" nihasset="0" niparameters="scale,author,options" niparametertypes="NationalInstruments.DAQmx.Scale,System.String,NationalInstruments.DAQmx.SaveOptions" nireturnvaluetype="System.Void">
      <summary>Saves the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to Measurement <entity value="amp" /> Automation Explorer (MAX) under the name it was given when it was created and with specified author and options values.</summary>
<param name="scale">The scale instance to save.</param>
<param name="author">A user-specified string that represents the name to store with the scale.  For example, scales created with the DAQ Assistant have the string "DAQ Assistant" as their author.  You may pass <see cref="F:System.String.Empty" />.</param>
<param name="options">One or more flags indicating various save options.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You may save a scale under a different name by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveScaleAs(NationalInstruments.DAQmx.Scale,System.String)" />.
<para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving custom scales.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveScaleAs(NationalInstruments.DAQmx.Scale,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveScaleAs" nihasget="0" nihasset="0" niparameters="scale,persistedName" niparametertypes="NationalInstruments.DAQmx.Scale,System.String" nireturnvaluetype="System.Void">
      <summary>Saves the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to Measurement <entity value="amp" /> Automation Explorer (MAX) under the specified name.</summary>
<param name="scale">The scale instance to save.</param>
<param name="persistedName">The name to use for the saved scale.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This method sets the <see cref="F:NationalInstruments.DAQmx.SaveOptions.Default" /> option for the saved scale and uses an empty string for the scale <see cref="P:NationalInstruments.DAQmx.SavedScaleInfo.Author" />.  You can specify your own options and author value by using the <see cref="M:NationalInstruments.DAQmx.DaqSystem.SaveScaleAs(NationalInstruments.DAQmx.Scale,System.String,System.String,NationalInstruments.DAQmx.SaveOptions)" /> overload.
<para>
If you do not assign a value to the saved scale, NI-DAQmx uses the name currently assigned to the scale. 
</para><para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving custom scales.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SaveScaleAs(NationalInstruments.DAQmx.Scale,System.String,System.String,NationalInstruments.DAQmx.SaveOptions)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveScaleAs" nihasget="0" nihasset="0" niparameters="scale,persistedName,author,options" niparametertypes="NationalInstruments.DAQmx.Scale,System.String,System.String,NationalInstruments.DAQmx.SaveOptions" nireturnvaluetype="System.Void">
      <summary>Saves the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to Measurement <entity value="amp" /> Automation Explorer (MAX) under the specified name and with specified author and options values.</summary>
<param name="scale">The scale instance to save.</param>
<param name="persistedName">The name to use for the saved scale.</param>
<param name="author">A user-specified string that represents the name to store with the scale.  For example, scales created with the DAQ Assistant have the string "DAQ Assistant" as their author.  You may pass <see cref="F:System.String.Empty" />.</param>
<param name="options">One or more flags indicating various save options.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
If you do not assign a value to the saved scale, NI-DAQmx uses the name currently assigned to the scale. 
<para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically saving custom scales.
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.DeleteScale(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DeleteScale" nihasget="0" nihasset="0" niparameters="persistedName" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Deletes the specified <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> that is stored in Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<param name="persistedName">The name of the scale to delete.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
This method does not remove the custom scale from <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">virtual channels</see> that use it.
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>. 

</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.ClearLastDaqWarning" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ClearLastDaqWarning" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Clears the value of the <see cref="P:NationalInstruments.DAQmx.DaqSystem.LastDaqWarning" /> property, by setting the error code to zero and the error string to a blank string.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
This method clears information only about warnings that occur in the thread from which the method is called. This behavior distinguishes warnings that are caused by actions in one thread from warnings that are caused by independent actions that occur at the same time in another thread.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SwitchFindPath(System.String,System.String,NationalInstruments.DAQmx.SwitchPathStatus@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="11/21/2006 11:40:02 AM" niupdatedby="Sebastius" nidisplayname="SwitchFindPath" nihasget="0" nihasset="0" niparameters="switchChannel1,switchChannel2,switchPathStatus" niparametertypes="System.String,System.String,out NationalInstruments.DAQmx.SwitchPathStatus" nireturnvaluetype="System.String">
      <summary>Returns information about the path between two switch channels, including the status of the path.</summary>
<param name="switchChannel1">The first channel in the connection.
</param>
<param name="switchChannel2">The second channel in the connection.
</param>
<param name="switchPathStatus">The status of the requested path.</param>
<returns>If the channels are connected, this method returns the path by which they are connected. If the channels are not connected, the method returns a path by which they can be connected, if one is available. </returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SwitchFindPath(System.String,System.String,System.Enum)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchFindPath" nihasget="0" nihasset="0" niparameters="switchChannel1,switchChannel2,switchPathStatus" niparametertypes="System.String,System.String,out System.Enum" nireturnvaluetype="System.String">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>. 

</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SetLogicFamilyPowerUpState(System.String,NationalInstruments.DAQmx.LogicFamily)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetLogicFamilyPowerUpState" nihasget="0" nihasset="0" niparameters="deviceName,logicFamily" niparametertypes="System.String,NationalInstruments.DAQmx.LogicFamily" nireturnvaluetype="System.Void">
      <summary>Sets the digital logic family to use when the device powers up.</summary>
<param name="deviceName">The name, as configured in Measurement <entity value="amp" /> Automation Explorer (MAX), of the device to which this operation applies.</param>
<param name="logicFamily">The logic family to set the device to when it powers up.
A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to device documentation for information on the logic high and logic low voltages for these logic families.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>Power-up states are stored in non-volatile memory that you can write to only a limited number of times. Therefore, you should use this function 
as infrequently as possible. This function writes to the non-volatile memory only if a setting you request is different from the one currently 
stored on the non-volatile memory.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.AddNetworkDevice(System.String,System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AddNetworkDevice" nihasget="0" nihasset="0" niparameters="ipAddress,deviceName,timeout" niparametertypes="System.String,System.String,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.Device">
      <summary>Adds a Network cDAQ device to the system. This method does not attempt to reserve the device after the device is successfully added.</summary>
<param name="ipAddress">Specifies the string containing the IP address (in dotted decimal notation) of the device to add to the system.</param>
<param name="deviceName">The name to assign to the device. If unspecified, NI-DAQmx chooses the device name.</param>
<param name="timeout">Specifies the time in seconds to wait for the device to respond before timing out.</param>
<remarks>
MAX automatically attempts to reserve a device when the device is added, but this method does not.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The device object the operation applied to.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.AddNetworkDevice(System.String,System.String,System.Boolean,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AddNetworkDevice" nihasget="0" nihasset="0" niparameters="ipAddress,deviceName,attemptReservation,timeout" niparametertypes="System.String,System.String,System.Boolean,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.Device">
      <summary>Adds a Network cDAQ device to the system and, if specified, attempts to reserve it.</summary>
<param name="ipAddress">Specifies the string containing the IP address (in dotted decimal notation) of the device to add to the system.</param>
<param name="deviceName">The name to assign to the device. If unspecified, NI-DAQmx chooses the device name.</param>
<param name="attemptReservation">Specifies whether a reservation should be attempted after the device is successfully added.</param>
<param name="timeout">Specifies the time in seconds to wait for the device to respond before timing out.</param>
<remarks>
MAX automatically attempts to reserve a device when the device is added, but this method does not, unless <paramref name="attemptReservation" /> is set to <see langword="true" />.

</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The device object the operation applied to.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SetDevicePowerUpState(System.String,System.String[],NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetDevicePowerUpState" nihasget="0" nihasset="0" niparameters="deviceName,channels,states" niparametertypes="System.String,System.String[],NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState[]" nireturnvaluetype="System.Void">
      <summary>Sets the resistor level for lines when they are in tristate logic. 
</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<param name="deviceName">The name, as configured in Measurement <entity value="amp" /> Automation Explorer (MAX), of the device to which this operation applies.</param>
<param name="channels">The digital line or port to modify. You cannot modify dedicated digital input lines.</param>
<param name="states">The pull up pull down level set for the physical channel specified with <see cref="T:NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState" />.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetDevicePowerUpState(System.String,System.String[]@,NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetDevicePowerUpState" nihasget="0" nihasset="0" niparameters="deviceName,channels,states" niparametertypes="System.String,out System.String[],out NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState[]" nireturnvaluetype="System.Void">
      <summary>Gets the resistor level for lines when they are in tristate logic. 
</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<param name="deviceName">The name, as configured in Measurement <entity value="amp" /> Automation Explorer (MAX), of the device to which this operation applies.</param>
<param name="channels">The physical channels that were modified.</param>
<param name="states">The pull up pull down level set for the physical channel specified with <see cref="T:NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState" />.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetDevicePowerUpState(System.String,System.String[]@,System.Double[]@,System.String[]@,System.Double[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetDevicePowerUpState" nihasget="0" nihasset="0" niparameters="deviceName,voltageChannels,voltageValues,currentChannels,currentValues" niparametertypes="System.String,out System.String[],out System.Double[],out System.String[],out System.Double[]" nireturnvaluetype="System.Void">
      <summary>Gets the power up states for analog physical channels. </summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<param name="deviceName">The name, as configured in Measurement <entity value="amp" /> Automation Explorer (MAX), of the device to which this operation applies.</param>
<param name="voltageChannels">The physical channels that were modified.</param>
<param name="voltageValues">The power up state set for the physical channel specified with the <paramref name="voltageChannels" /> output.</param>
<param name="currentChannels">The physical channels that were modified.</param>
<param name="currentValues">The power up state set for the physical channel specified with the <paramref name="currentChannels" /> output.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetDevicePowerUpState(System.String,System.String[]@,NationalInstruments.DAQmx.DigitalPowerUpState[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetDevicePowerUpState" nihasget="0" nihasset="0" niparameters="deviceName,channels,states" niparametertypes="System.String,out System.String[],out NationalInstruments.DAQmx.DigitalPowerUpState[]" nireturnvaluetype="System.Void">
      <summary>Gets the power up states for digital physical lines.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<param name="deviceName">The name, as configured in Measurement <entity value="amp" /> Automation Explorer (MAX), of the device to which this operation applies.</param>
<param name="channels">The physical channels that were modified.</param>
<param name="states">The power up state set for the physical channels specified in <paramref name="channels" />.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetLogicFamilyPowerUpState(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetLogicFamilyPowerUpState" nihasget="0" nihasset="0" niparameters="deviceName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.LogicFamily">
      <summary>Gets the digital logic family for a device.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<param name="deviceName">The name, as configured in Measurement <entity value="amp" /> Automation Explorer (MAX), of the device to which this operation applies.</param>
<returns>Returns the <see cref="T:NationalInstruments.DAQmx.DILogicFamily" /> that the device is set to when the device powers up. </returns>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.AutoConfigureCDaqSynchronizationConnections(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AutoConfigureCDaqSynchronizationConnections" nihasget="0" nihasset="0" niparameters="deviceRequested,timeout" niparametertypes="System.String,System.Double" nireturnvaluetype="System.String">
      <summary>Detects and configures cDAQ Sync connections between devices.</summary>
<param name="deviceRequested">The names of the CompactDAQ chassis, C Series modules, or cDAQ Sync ports in comma separated form to search. If no names are specified, all cDAQ Sync ports on connected, non-simulated devices are scanned.</param>
<param name="timeout">The time in seconds to wait for the device to respond before timing out. If a timeout occurs, no configuration is changed.</param>
<returns>The configured port-to-port connections.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
					Stop all NI-DAQmx tasks running on the devices prior to calling this method because any running tasks cause auto-configuration to fail.
					<note type="note">Auto-configure toggles lines on ports during configuration. Upon completion, all previous configurations are deleted.</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetDisconnectedCDaqSynchronizationPorts(System.String,System.Double,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetDisconnectedCDaqSynchronizationPorts" nihasget="0" nihasset="0" niparameters="deviceRequested,timeout,disconnectedPortsFound" niparametertypes="System.String,System.Double,out System.Boolean" nireturnvaluetype="System.String">
      <summary>Verifies configured cDAQ Sync connections between devices. </summary>
<param name="deviceRequested">The names of the CompactDAQ chassis, C Series modules, or cDAQ Sync ports in comma separated form to search. If no names are specified, all cDAQ Sync ports on connected, non-simulated devices are scanned.</param>
<param name="timeout">The time in seconds to wait for the device to respond before timing out. If a timeout occurs, no configuration is changed.</param>
<param name="disconnectedPortsFound">Indicates if any port connections are unverified.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The port-to-port connections that failed verification.</returns>
<remarks>Failures generally indicate a wiring issue or that a device has been powered off or removed. Stop all NI-DAQmx tasks running on the devices prior to running this method because any running tasks cause the verification process to fail.

</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.AddCDaqSynchronizationConnection(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AddCDaqSynchronizationConnection" nihasget="0" nihasset="0" niparameters="portList" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Adds a cDAQ Sync connection between devices. The connection is not verified.</summary>
<param name="portList">Specifies the cDAQ Sync ports to connect.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.RemoveCDaqSynchronizationConnection(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RemoveCDaqSynchronizationConnection" nihasget="0" nihasset="0" niparameters="portList" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Removes a cDAQ Sync connection between devices. The connection is not verified.</summary>
<param name="portList">Specifies the cDAQ Sync ports to disconnect.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.SetAnalogPowerUpStatesWithOutputType(System.String,System.Double[],NationalInstruments.DAQmx.AOPowerUpOutputBehavior[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetAnalogPowerUpStatesWithOutputType" nihasget="0" nihasset="0" niparameters="channels,states,modes" niparametertypes="System.String,System.Double[],NationalInstruments.DAQmx.AOPowerUpOutputBehavior[]" nireturnvaluetype="System.Void">
      <summary>Sets  the states that analog physical channels on a device are set to when the device powers up or when the device is reset. 
</summary>
<remarks>
Power-up states are stored in EEPROMs that you can write to only a limited number of times. Therefore, you should use this method  as infrequently as possible. This method  writes to the EEPROM only if a setting you request is different from the one currently stored on the EEPROM. This method writes power-up states in sequential order. Therefore, if a physical channel has multiple entries, the last entry is used.
</remarks>
<param name="channels">The physical channels that were modified.</param>
<param name="states">The 1D array listing the power-up states for each corresponding physical channel. If the channel type for the physical channel is high-impedance, this value is 0.</param>
<param name="modes">The value set for the physical channel when the device powers up or when the device is reset. You specify this value with <see cref="T:NationalInstruments.DAQmx.AOPowerUpOutputBehavior" />.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqSystem.GetAnalogPowerUpStatesWithOutputType(System.String,System.Double[]@,NationalInstruments.DAQmx.AOPowerUpOutputBehavior[]@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetAnalogPowerUpStatesWithOutputType" nihasget="0" nihasset="0" niparameters="channels,states,modes" niparametertypes="System.String,out System.Double[],out NationalInstruments.DAQmx.AOPowerUpOutputBehavior[]" nireturnvaluetype="System.Void">
      <summary>Gets  the states that analog physical channels on a device are set to when the device powers up or when the device is reset. 
</summary>
<remarks>
Power-up states are stored in EEPROMs that you can write to only a limited number of times. Therefore, you should use this method  as infrequently as possible. This method  writes to the EEPROM only if a setting you request is different from the one currently stored on the EEPROM. This method writes power-up states in sequential order. Therefore, if a physical channel has multiple entries, the last entry is used.
</remarks>
<param name="channels">The physical channels that were modified.</param>
<param name="states">The 1D array listing the power-up states for each corresponding physical channel. If the channel type for the physical channel is high-impedance, this value is 0.</param>
<param name="modes">The value set for the physical channel when the device powers up or when the device is reset. You specify this value with <see cref="T:NationalInstruments.DAQmx.AOPowerUpOutputBehavior" />.


</param>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.GlobalChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="GlobalChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array that contains the names of all global channels saved on the system.</summary>
<value>Indicates an array that contains the names of all global channels saved on the system.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.Scales" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Scales" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array that contains the names of all custom scales saved on the system.</summary>
<value>Indicates an array that contains the names of all custom scales saved on the system.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.Tasks" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Tasks" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates an array that contains the names of all tasks saved on the system.</summary>
<value>Indicates an array that contains the names of all tasks saved on the system.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.Devices" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Devices" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the names of all devices installed in the system.</summary>
<value>Indicates the names of all devices installed in the system.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.DriverMajorVersion" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DriverMajorVersion" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the major portion of the installed version of NI-DAQmx, such as 7 for version 7.0.</summary>
<value>Indicates the major portion of the installed version of NI-DAQmx, such as 7 for version 7.0.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.DriverMinorVersion" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DriverMinorVersion" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the minor portion of the installed version of NI-DAQmx, such as 0 for version 7.0.</summary>
<value>Indicates the minor portion of the installed version of NI-DAQmx, such as 0 for version 7.0.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqSystem.DriverUpdateVersion" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DriverUpdateVersion" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the update portion of the installed version of NI-DAQmx, such as 1 for version 9.0.1.</summary>
<value>Indicates the update portion of the installed version of NI-DAQmx, such as 1 for version 9.0.1.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.PolynomialScale" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PolynomialScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> that scales values by using an <format type="italics">n</format><format type="superscript">th</format>-order polynomial equation.</summary>
<seealso cref="M:NationalInstruments.DAQmx.DaqSystem.LoadScale(System.String)" />
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.PolynomialScale.#ctor(System.String,System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PolynomialScale" nihasget="0" nihasset="0" niparameters="name,forwardCoefficients,reverseCoefficients" niparametertypes="System.String,System.Double[],System.Double[]" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.PolynomialScale" /> class with the specified forward and reverse coefficients.</summary>
<security condition="unmanagedcode" />
<param name="name">The name of the custom scale for later use, such as when you create a virtual channel. 
</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>. 
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.PolynomialScale.#ctor(System.String,NationalInstruments.DAQmx.PolynomialDirection,System.Double[],System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PolynomialScale" nihasget="0" nihasset="0" niparameters="name,direction,coefficients,rangeMinimum,rangeMaximum" niparametertypes="System.String,NationalInstruments.DAQmx.PolynomialDirection,System.Double[],System.Double,System.Double" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.PolynomialScale" /> class with the specified forward or reverse coefficients and automatically computes the other set of coefficients with the same order as the provided coefficients, using 1000 points in the specified range.
</summary>
<security condition="unmanagedcode" />
<param name="name">
The name of the custom scale for later use, such as when you create a virtual channel.
</param>
<param name="direction">
The conversion direction of the specified polynomial. The opposite polynomial is computed by the <see cref="T:NationalInstruments.DAQmx.PolynomialScale" />.
</param>
<param name="coefficients">
The array of coefficients of a polynomial. Each element of the array corresponds to a term of the equation.  For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.  This polynomial is used as either the forward or reverse polynomial depending on the direction specified.
</param>
<param name="rangeMinimum">
The minimum of the range over which the polynomial specified is valid or of interest.
</param>
<param name="rangeMaximum">
The maximum of the range over which the polynomial specified is valid or of interest.
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.PolynomialScale.#ctor(System.String,NationalInstruments.DAQmx.PolynomialDirection,System.Double[],System.Double,System.Double,System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PolynomialScale" nihasget="0" nihasset="0" niparameters="name,direction,coefficients,rangeMinimum,rangeMaximum,numberOfPointsInFit,orderOfFit" niparametertypes="System.String,NationalInstruments.DAQmx.PolynomialDirection,System.Double[],System.Double,System.Double,System.Int32,System.Int32" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.PolynomialScale" /> class with the specified forward or reverse coefficients and automatically computes the other set of coefficients.
</summary>
<security condition="unmanagedcode" />
<param name="name">
The name of the custom scale for later use, such as when you create a virtual channel.
</param>
<param name="direction">
The conversion direction of the specified polynomial. The opposite polynomial is computed by the <see cref="T:NationalInstruments.DAQmx.PolynomialScale" />.
</param>
<param name="coefficients">
The array of coefficients of a polynomial. Each element of the array corresponds to a term of the equation.  For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.  This polynomial is used as either the forward or reverse polynomial depending on the direction specified.
</param>
<param name="rangeMinimum">
The minimum of the range over which the polynomial specified is valid or of interest.
</param>
<param name="rangeMaximum">
The maximum of the range over which the polynomial specified is valid or of interest.
</param>
<param name="numberOfPointsInFit">
The number of points to evaluate for computing the polynomial of the opposite direction.
</param>
<param name="orderOfFit">
The order of polynomial to compute for the opposite polynomial to the one provided.  Specify <entity value="ndash" />1 to use the same order as the forward polynomial.
</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.PolynomialScale.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.PolynomialScale.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.PolynomialScale.ForwardCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ForwardCoefficients" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies an array of coefficients for the polynomial that converts pre-scaled values to scaled values. Each element of the array corresponds to a term of the equation. For example, if index three of the array is 9, the fourth term of the equation is 9x^3.</summary>
<value>Specifies an array of coefficients for the polynomial that converts pre-scaled values to scaled values. Each element of the array corresponds to a term of the equation. For example, if index three of the array is 9, the fourth term of the equation is 9x^3.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.PolynomialScale.ReverseCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReverseCoefficients" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies an array of coefficients for the polynomial that converts scaled values to pre-scaled values. Each element of the array corresponds to a term of the equation. For example, if index three of the array is 9, the fourth term of the equation is 9y^3.</summary>
<value>Specifies an array of coefficients for the polynomial that converts scaled values to pre-scaled values. Each element of the array corresponds to a term of the equation. For example, if index three of the array is 9, the fourth term of the equation is 9y^3.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="T:NationalInstruments.DAQmx.RangeMapScale" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RangeMapScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> that scales values proportionally from a range of prescaled values to a range of scaled values.</summary>
<seealso cref="M:NationalInstruments.DAQmx.DaqSystem.LoadScale(System.String)" />
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.RangeMapScale.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RangeMapScale" nihasget="0" nihasset="0" niparameters="name,prescaledMinimum,prescaledMaximum,scaledMinimum,scaledMaximum" niparametertypes="System.String,System.Double,System.Double,System.Double,System.Double" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.RangeMapScale" /> class with the prescaled minimum and maximum values and the scaled minimum and maximum values.</summary>
<security condition="unmanagedcode" />
<param name="name">The name of the custom scale for later use, such as when you create a virtual channel.</param>
<param name="prescaledMinimum">The smallest value in the range of prescaled values. </param>
<param name="prescaledMaximum">The largest value in the range of prescaled values.</param>
<param name="scaledMinimum">The smallest value in the range of scaled values.</param>
<param name="scaledMaximum">The largest value in the range of scaled values.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.RangeMapScale.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.RangeMapScale.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.RangeMapScale.ScaledMax" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ScaledMax" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the largest value in the range of scaled values. NI-DAQmx maps this value to <see cref="P:NationalInstruments.DAQmx.RangeMapScale.PreScaledMax" />. Reads coerce samples that are larger than this value to match this value. Writes generate errors for samples that are larger than this value.</summary>
<value>Specifies the largest value in the range of scaled values. NI-DAQmx maps this value to <see cref="P:NationalInstruments.DAQmx.RangeMapScale.PreScaledMax" />. Reads coerce samples that are larger than this value to match this value. Writes generate errors for samples that are larger than this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.RangeMapScale.PreScaledMax" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PreScaledMax" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the largest value in the range of pre-scaled values. NI-DAQmx maps this value to <see cref="P:NationalInstruments.DAQmx.RangeMapScale.ScaledMax" />.</summary>
<value>Specifies the largest value in the range of pre-scaled values. NI-DAQmx maps this value to <see cref="P:NationalInstruments.DAQmx.RangeMapScale.ScaledMax" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.RangeMapScale.ScaledMin" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ScaledMin" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the smallest value in the range of scaled values. NI-DAQmx maps this value to <see cref="P:NationalInstruments.DAQmx.RangeMapScale.PreScaledMin" />. Reads coerce samples that are smaller than this value to match this value. Writes generate errors for samples that are smaller than this value.</summary>
<value>Specifies the smallest value in the range of scaled values. NI-DAQmx maps this value to <see cref="P:NationalInstruments.DAQmx.RangeMapScale.PreScaledMin" />. Reads coerce samples that are smaller than this value to match this value. Writes generate errors for samples that are smaller than this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.RangeMapScale.PreScaledMin" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PreScaledMin" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the smallest value in the range of pre-scaled values. NI-DAQmx maps this value to <see cref="P:NationalInstruments.DAQmx.RangeMapScale.ScaledMin" />.</summary>
<value>Specifies the smallest value in the range of pre-scaled values. NI-DAQmx maps this value to <see cref="P:NationalInstruments.DAQmx.RangeMapScale.ScaledMin" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.TableScale" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TableScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> that maps an array of prescaled values to an array of corresponding scaled values, with all other values scaled proportionally.</summary>
<seealso cref="M:NationalInstruments.DAQmx.DaqSystem.LoadScale(System.String)" />
<threadsafety safety="safe" />
<example>
<para>
The following example explains  how to update the <see cref="P:NationalInstruments.DAQmx.TableScale.PreScaledValues" /> property that returns an array:
</para>
<code lang="VB.NET">
Dim preScaledValues As Double() = New Double() {0.11, 0.12, 0.13}
Dim scaledValues As Double() = New Double() {1.1, 1.2, 1.3}
Dim tablescale As New TableScale("DAQmxTableScale", preScaledValues, scaledValues)

' To update the value at specific index in tablescale.PreScaledValues
' change the source array and assign it back to the property.
preScaledValues(0) = 0.1
tablescale.PreScaledValues = preScaledValues
</code>
</example>
<example>
<code lang="C#">
double[] preScaledValues = new double[] { .11, .12, .13 };
double[] scaledValues = new double[] { 1.1, 1.2, 1.3 };
TableScale tablescale = new TableScale("DAQmxTableScale", preScaledValues, scaledValues);

// To update the value at specific index in tablescale.PreScaledValues
// change the source array and assign it back to the property.
preScaledValues[0] = 0.1;
tablescale.PreScaledValues = preScaledValues;

</code>
</example>
<example>
<para>
The following example explains how to update the <see cref="P:NationalInstruments.DAQmx.TableScale.ScaledValues" />  property that returns an array:
</para>
<code lang="VB.NET">
Dim preScaledValues As Double() = New Double() {0.11, 0.12, 0.13}
Dim scaledValues As Double() = New Double() {1.1, 1.2, 1.3}
Dim tablescale As New TableScale("DAQmxTableScale", preScaledValues, scaledValues)

' To update the value at specific index in tablescale.ScaledValues
' change the source array and assign it back to the property.
scaledValues(0) = 1.12
tablescale.ScaledValues = scaledValues
</code>
<code lang="C#">
double[] preScaledValues = new double[] { .11, .12, .13 };
double[] scaledValues = new double[] { 1.1, 1.2, 1.3 };
TableScale tablescale = new TableScale("DAQmxTableScale", preScaledValues, scaledValues);

// To update the value at specific index in tablescale.ScaledValues
// change the source array and assign it back to the property.
scaledValues[0] = 1.12;
tablescale.ScaledValues = scaledValues;
</code>
</example>
</member>
    <member name="M:NationalInstruments.DAQmx.TableScale.#ctor(System.String,System.Double[],System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TableScale" nihasget="0" nihasset="0" niparameters="name,preScaledValues,scaledValues" niparametertypes="System.String,System.Double[],System.Double[]" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.TableScale" /> class with the specified scaled and prescaled values. </summary>
<security condition="unmanagedcode" />
<param name="name">The name of the custom scale for later use, such as when you create a virtual channel.</param>
<param name="preScaledValues">An array of prescaled values that map to the scaled values in <paramref name="scaledValues" />.</param>
<param name="scaledValues">An array of scaled values that map to the prescaled values in <paramref name="prescaledValues" />.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.TableScale.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.TableScale.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.TableScale.ScaledValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ScaledValues" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies an array of scaled values. These values map directly to the values in <see cref="P:NationalInstruments.DAQmx.TableScale.PreScaledValues" />.</summary>
<value>Specifies an array of scaled values. These values map directly to the values in <see cref="P:NationalInstruments.DAQmx.TableScale.PreScaledValues" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.TableScale.PreScaledValues" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PreScaledValues" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies an array of pre-scaled values. These values map directly to the values in <see cref="P:NationalInstruments.DAQmx.TableScale.ScaledValues" />.</summary>
<value>Specifies an array of pre-scaled values. These values map directly to the values in <see cref="P:NationalInstruments.DAQmx.TableScale.ScaledValues" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="T:NationalInstruments.DAQmx.Triggers" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Triggers" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains members that configure all of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/triggering.html');">triggers</see> that can affect a <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.Triggers" />
</member>
    <member name="P:NationalInstruments.DAQmx.Triggers.AdvanceTrigger" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdvanceTrigger" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AdvanceTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AdvanceTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.AdvanceTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Triggers.PauseTrigger" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PauseTrigger" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.PauseTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.PauseTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.PauseTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Triggers.ReferenceTrigger" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReferenceTrigger" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.ReferenceTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Triggers.StartTrigger" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="StartTrigger" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.StartTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.StartTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.StartTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.Triggers.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Triggers.WatchdogExpirationTrigger" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WatchdogExpirationTrigger" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.WatchdogExpirationTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.WatchdogExpirationTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.WatchdogExpirationTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Triggers.ArmStartTrigger" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ArmStartTrigger" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.ArmStartTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.ArmStartTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.ArmStartTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Triggers.HandshakeTrigger" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HandshakeTrigger" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.HandshakeTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.HandshakeTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.HandshakeTrigger" />.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Triggers.SynchronizationType" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationType" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::TriggerSynchronizationType">
      <summary>Specifies the role of the device in a synchronized system. Setting this value to  <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" /> or  <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" /> enables <see href="javascript:launchSharedHelp('mxcncpts.chm::/syncTriggerSkewCorrect.html')">trigger skew correction</see>. If you enable trigger skew correction, set this property to <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" /> on only one device, and set this property to <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" /> on the other devices.</summary>
<value>Specifies the role of the device in a synchronized system. Setting this value to  <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" /> or  <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" /> enables <see href="javascript:launchSharedHelp('mxcncpts.chm::/syncTriggerSkewCorrect.html')">trigger skew correction</see>. If you enable trigger skew correction, set this property to <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" /> on only one device, and set this property to <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" /> on the other devices.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.ExportSignals" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ExportSignals" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates the signals that are available for routing off of the DAQ device, the properties that define which terminal the signals are routed to, and the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/ExportSig.html');">programmable characteristics</see> of the signals for a <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.ExportSignals" />
</member>
    <member name="M:NationalInstruments.DAQmx.ExportSignals.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExportSignals.ExportHardwareSignal(NationalInstruments.DAQmx.ExportSignal,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ExportHardwareSignal" nihasget="0" nihasset="0" niparameters="signal,outputTerminal" niparametertypes="NationalInstruments.DAQmx.ExportSignal,System.String" nireturnvaluetype="System.Void">
      <summary>Routes a control signal to the specified terminal.</summary>
<param name="signal">The trigger, clock, or event to export.</param>
<param name="outputTerminal">The destination of the exported signal. You can also specify a comma-delimited list for multiple terminal names.</param>
<remarks>
Because the output terminal can reside on the device that generates the control signal or on a different device, you can use this method to share clocks and triggers between multiple devices. 
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExportSignals.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.ExportSignals.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AIConvertClockOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AIConvertClockOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the AI Convert Clock.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the AI Convert Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AIConvertClockPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AIConvertClockPulsePolarity" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIConvertClockPulsePolarity">
      <summary>Indicates the polarity of the exported AI Convert Clock. The polarity is fixed and independent of the active edge of the source of the AI Convert Clock.</summary>
<value>Indicates the polarity of the exported AI Convert Clock. The polarity is fixed and independent of the active edge of the source of the AI Convert Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReferenceClock10MHzOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReferenceClock10MHzOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the 10MHz Clock.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the 10MHz Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.Timebase20MHzOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Timebase20MHzOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the 20MHz Timebase.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the 20MHz Timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.SampleClockOutputBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SampleClockOutputBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::SampleClockOutputBehavior">
      <summary>Specifies whether the exported Sample Clock issues a pulse at the beginning of a sample or changes to a high state for the duration of the sample.</summary>
<value>Specifies whether the exported Sample Clock issues a pulse at the beginning of a sample or changes to a high state for the duration of the sample.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
E Series devices might require many AI Convert Clock pulses to acquire one sample. Each pulse of the Sample Clock initiates the acquisition of one 
sample per channel in the task. Each sample per channel requires a pulse from the AI Convert Clock.  
</para>
<para>
This property is valid for the AI Sample Clock only.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.SampleClockOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SampleClockOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Sample Clock.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Sample Clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.SampleClockDelayOffset" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SampleClockDelayOffset" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time to offset the exported Sample clock.  Refer to timing diagrams for generation applications in the device documentation for more information about this value.</summary>
<value>Specifies in seconds the amount of time to offset the exported Sample clock.  Refer to timing diagrams for generation applications in the device documentation for more information about this value.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.SampleClockPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SampleClockPulsePolarity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::SampleClockPulsePolarity">
      <summary>Specifies the polarity of the exported Sample Clock if <see cref="P:NationalInstruments.DAQmx.ExportSignals.SampleClockOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.SampleClockOutputBehavior.Pulse" />.</summary>
<value>Specifies the polarity of the exported Sample Clock if <see cref="P:NationalInstruments.DAQmx.ExportSignals.SampleClockOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.SampleClockOutputBehavior.Pulse" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.SampleClockTimebaseOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTimebaseOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Sample Clock Timebase.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Sample Clock Timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.DividedSampleClockTimebaseOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DividedSampleClockTimebaseOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Divided Sample Clock Timebase.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Divided Sample Clock Timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceTriggerOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Advance Trigger.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Advance Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceTriggerPulsePolarity" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AdvanceTriggerPulsePolarity">
      <summary>Indicates the polarity of the exported Advance Trigger.</summary>
<value>Indicates the polarity of the exported Advance Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidthUnits" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceTriggerPulseWidthUnits" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AdvanceTriggerPulseWidthUnits">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidth" />.</summary>
<value>Specifies the units of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidth" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceTriggerPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the width of an exported Advance Trigger pulse. Specify this value in the units you specify with <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidthUnits" />.</summary>
<value>Specifies the width of an exported Advance Trigger pulse. Specify this value in the units you specify with <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidthUnits" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.PauseTriggerOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PauseTriggerOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Pause Trigger.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Pause Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.PauseTriggerLevelActiveLevel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PauseTriggerLevelActiveLevel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::PauseTriggerLevelActiveLevel">
      <summary>Specifies the active level of the exported Pause Trigger.</summary>
<value>Specifies the active level of the exported Pause Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReferenceTriggerOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReferenceTriggerOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Reference Trigger.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Reference Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReferenceTriggerPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReferenceTriggerPulsePolarity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ReferenceTriggerPulsePolarity">
      <summary>Specifies the polarity of the exported Reference Trigger.</summary>
<value>Specifies the polarity of the exported Reference Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.StartTriggerOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="StartTriggerOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Start Trigger.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Start Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.StartTriggerPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="StartTriggerPulsePolarity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::StartTriggerPulsePolarity">
      <summary>Specifies the polarity of the exported Start Trigger.</summary>
<value>Specifies the polarity of the exported Start Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AdvanceCompleteEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceCompleteEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Advance Complete Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Advance Complete Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AdvanceCompleteEventDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceCompleteEventDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the output signal delay in periods of the sample clock.</summary>
<value>Specifies the output signal delay in periods of the sample clock.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AdvanceCompleteEventPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceCompleteEventPulsePolarity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AdvanceCompleteEventPulsePolarity">
      <summary>Specifies the polarity of the exported Advance Complete Event.</summary>
<value>Specifies the polarity of the exported Advance Complete Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AdvanceCompleteEventPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceCompleteEventPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the width of the exported Advance Complete Event pulse.</summary>
<value>Specifies the width of the exported Advance Complete Event pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AIHoldCompleteEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AIHoldCompleteEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the terminal to which to route the AI Hold Complete Event.</summary>
<value>Specifies the terminal to which to route the AI Hold Complete Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.AIHoldCompleteEventPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AIHoldCompleteEventPulsePolarity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AIHoldCompleteEventPulsePolarity">
      <summary>Specifies the polarity of an exported AI Hold Complete Event pulse.</summary>
<value>Specifies the polarity of an exported AI Hold Complete Event pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ChangeDetectionEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ChangeDetectionEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Change Detection Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Change Detection Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ChangeDetectionEventPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ChangeDetectionEventPulsePolarity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ChangeDetectionEventPulsePolarity">
      <summary>Specifies the polarity of an exported Change Detection Event pulse.</summary>
<value>Specifies the polarity of an exported Change Detection Event pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterOutputEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Counter Output Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Counter Output Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterOutputEventOutputBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CounterOutputEventOutputBehavior">
      <summary>Specifies whether the exported Counter Output Event pulses or changes from one state to the other when the counter reaches terminal count.</summary>
<value>Specifies whether the exported Counter Output Event pulses or changes from one state to the other when the counter reaches terminal count.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
Upon reaching terminal count, the counter can issue a pulse. Use <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventPulsePolarity" /> to select a high or low pulse.
</para>
<para>
Upon reaching terminal count, the output terminal of the counter can change state, or toggle. For example, if the terminal is initially at a low state, 
it changes to high state and stays at the high state until the next terminal count. The terminal then changes to low state. Use <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventIdleState" /> to select the initial state of the terminal. 
</para>
<para>
When counting up, a counter reaches terminal count when it reaches the maximum value (2^24 - 1 for a 24-bit counter). When counting 
down, a counter reaches terminal count when it reaches 0.
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterOutputEventPulsePolarity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CounterOutputEventPulsePolarity">
      <summary>Specifies the polarity of the pulses at the output terminal of the counter when <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Pulse" />. NI-DAQmx ignores this property if <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" />.</summary>
<value>Specifies the polarity of the pulses at the output terminal of the counter when <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Pulse" />. NI-DAQmx ignores this property if <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventIdleState" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterOutputEventIdleState" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::CounterOutputEventIdleState">
      <summary>Specifies the initial state of the output terminal of the counter when <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" />. The terminal enters this state when NI-DAQmx <see href="javascript:launchSharedHelp('mxcncpts.chm::/Committed.html');">commits</see> the task.</summary>
<value>Specifies the initial state of the output terminal of the counter when <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" />. The terminal enters this state when NI-DAQmx <see href="javascript:launchSharedHelp('mxcncpts.chm::/Committed.html');">commits</see> the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
The initial state of the terminal affects whether the first toggle is from low state to high state or from high state to low state. 
</para>
<para>
NI-DAQmx ignores this property if <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Pulse" />.
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Handshake Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Handshake Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventOutputBehavior" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::HandshakeEventOutputBehavior">
      <summary>Specifies the output behavior of the Handshake Event.</summary>
<value>Specifies the output behavior of the Handshake Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the number of seconds to delay after the Handshake Trigger deasserts before asserting the Handshake Event.</summary>
<value>Specifies the number of seconds to delay after the Handshake Trigger deasserts before asserting the Handshake Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventInterlockedAssertedLevel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventInterlockedAssertedLevel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::HandshakeEventInterlockedAssertedLevel">
      <summary>Specifies the asserted level of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" />.</summary>
<value>Specifies the asserted level of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventInterlockedAssertOnStart" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventInterlockedAssertOnStart" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies to assert the Handshake Event when the task starts if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" />.</summary>
<value>Specifies to assert the Handshake Event when the task starts if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventInterlockedDeassertDelay" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventInterlockedDeassertDelay" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time to wait after the Handshake Trigger asserts before deasserting the Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" />.</summary>
<value>Specifies in seconds the amount of time to wait after the Handshake Trigger asserts before deasserting the Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventPulsePolarity" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventPulsePolarity" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::HandshakeEventPulsePolarity">
      <summary>Specifies the polarity of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Pulse" />.</summary>
<value>Specifies the polarity of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Pulse" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the pulse width of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Pulse" />.</summary>
<value>Specifies in seconds the pulse width of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Pulse" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForTransferEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Ready for Transfer Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Ready for Transfer Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventLevelActiveLevel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForTransferEventLevelActiveLevel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ReadyForTransferEventLevelActiveLevel">
      <summary>Specifies the active level of the exported Ready for Transfer Event.</summary>
<value>Specifies the active level of the exported Ready for Transfer Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventDeassertCondition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForTransferEventDeassertCondition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ReadyForTransferEventDeassertCondition">
      <summary>Specifies when the ready for transfer event deasserts.</summary>
<value>Specifies when the ready for transfer event deasserts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventDeassertConditionCustomThreshold" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForTransferEventDeassertConditionCustomThreshold" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies in samples the threshold below which the Ready for Transfer Event deasserts. This threshold is an amount of space available in the onboard memory of the device. <see cref="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventDeassertCondition" /> must be <see cref="F:NationalInstruments.DAQmx.ReadyForTransferEventDeassertCondition.OnboardMemoryCustomThreshold" /> to use a custom threshold.</summary>
<value>Specifies in samples the threshold below which the Ready for Transfer Event deasserts. This threshold is an amount of space available in the onboard memory of the device. <see cref="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventDeassertCondition" /> must be <see cref="F:NationalInstruments.DAQmx.ReadyForTransferEventDeassertCondition.OnboardMemoryCustomThreshold" /> to use a custom threshold.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.DataActiveEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DataActiveEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to export the Data Active Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to export the Data Active Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.DataActiveEventLevelActiveLevel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DataActiveEventLevelActiveLevel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DataActiveEventLevelActiveLevel">
      <summary>Specifies the polarity of the exported Data Active Event.</summary>
<value>Specifies the polarity of the exported Data Active Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReadyForStartEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForStartEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Ready for Start Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Ready for Start Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.ReadyForStartEventLevelActiveLevel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForStartEventLevelActiveLevel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ReadyForStartEventLevelActiveLevel">
      <summary>Specifies the polarity of the exported Ready for Start Event.</summary>
<value>Specifies the polarity of the exported Ready for Start Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.SynchronizationPulseEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SynchronizationPulseEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Synchronization Pulse Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> to which to route the Synchronization Pulse Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ExportSignals.WatchdogExpiredEventOutputTerminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WatchdogExpiredEventOutputTerminal" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see>  to which to route the Watchdog Timer Expired Event.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see>  to which to route the Watchdog Timer Expired Event.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeAdvanceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">digital edge</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/adTrig.html');">advance triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.AdvanceTrigger" />.
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.AdvanceTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.AdvanceTrigger.DigitalEdge" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the Advance Trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the Advance Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger.Edge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Edge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalEdgeAdvanceTriggerEdge">
      <summary>Specifies on which edge of a digital signal to advance to the next entry in a scan list.</summary>
<value>Specifies on which edge of a digital signal to advance to the next entry in a scan list.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width filter to the signal.</summary>
<value>Specifies whether to apply the pulse width filter to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowPauseTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogWindowPauseTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/algwindowtrig.html');">analog window</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/PauseTrigger.html');">pause triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.PauseTrigger" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.PauseTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.PauseTrigger.AnalogWindow" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For E Series devices, if you use a channel name, the channel must be the only channel in the task. The only terminal you can use for 
E Series devices is PFI0. 
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.Condition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Condition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogWindowPauseTriggerCondition">
      <summary>Specifies whether the task pauses while the trigger signal is inside or outside the window you specify with <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowTop" />.</summary>
<value>Specifies whether the task pauses while the trigger signal is inside or outside the window you specify with <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowTop" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowTop" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="WindowTop" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the upper limit of the window. Specify this value in the units of the measurement or generation.</summary>
<value>Specifies the upper limit of the window. Specify this value in the units of the measurement or generation.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowBottom" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="WindowBottom" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the lower limit of the window. Specify this value in the units of the measurement or generation.</summary>
<value>Specifies the lower limit of the window. Specify this value in the units of the measurement or generation.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.Coupling" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Coupling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogWindowPauseTriggerCoupling">
      <summary>Specifies the coupling for the source signal of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> if the source is a terminal rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<value>Specifies the coupling for the source signal of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> if the source is a terminal rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay within the trigger window for the minimum pulse width before being recognized. Use filtering for noisy trigger signals that transition in and out of the window rapidly.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay within the trigger window for the minimum pulse width before being recognized. Use filtering for noisy trigger signals that transition in and out of the window rapidly.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogLevelPauseTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogLevelPauseTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/analogTriggering.html');">analog level</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/PauseTrigger.html');">pause triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.PauseTrigger" />.
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.PauseTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.PauseTrigger.AnalogLevel" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For E Series devices, if you use a channel name, the channel must be the only channel in the task. The only terminal you can use for 
E Series devices is PFI0. 
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Condition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Condition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogLevelPauseTriggerCondition">
      <summary>Specifies whether the task pauses above or below the threshold you specify with <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" />.</summary>
<value>Specifies whether the task pauses above or below the threshold you specify with <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Level" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the threshold at which to pause the task. Specify this value in the units of the measurement or generation. Use <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Condition" /> to specify whether the task pauses above or below this threshold.</summary>
<value>Specifies the threshold at which to pause the task. Specify this value in the units of the measurement or generation. Use <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Condition" /> to specify whether the task pauses above or below this threshold.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Hysteresis" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Hysteresis" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies a <see href="javascript:launchSharedHelp(' mxcncpts.chm::/analogTriggering.html');">hysteresis level</see> in the units of the measurement or generation. If <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Condition" /> is <see cref="F:NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition.AboveLevel" />, the trigger does not deassert until the source signal passes below <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" /> minus the hysteresis. If <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Condition" /> is <see cref="F:NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition.BelowLevel" />, the trigger does not deassert until the source signal passes above <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" /> plus the hysteresis. Hysteresis is always enabled. Set this property to a non-zero value to use hysteresis.</summary>
<value>Specifies a <see href="javascript:launchSharedHelp(' mxcncpts.chm::/analogTriggering.html');">hysteresis level</see> in the units of the measurement or generation. If <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Condition" /> is <see cref="F:NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition.AboveLevel" />, the trigger does not deassert until the source signal passes below <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" /> minus the hysteresis. If <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Condition" /> is <see cref="F:NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition.BelowLevel" />, the trigger does not deassert until the source signal passes above <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" /> plus the hysteresis. Hysteresis is always enabled. Set this property to a non-zero value to use hysteresis.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Coupling" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Coupling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogEdgePauseTriggerCoupling">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<value>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay above or below the trigger level for the minimum pulse width before being recognized. Use filtering  for noisy trigger signals that transition in and out of the hysteresis window rapidly.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay above or below the trigger level for the minimum pulse width before being recognized. Use filtering  for noisy trigger signals that transition in and out of the hysteresis window rapidly.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalLevelPauseTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalLevelPauseTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">digital level</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/PauseTrigger.html');">pause triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.PauseTrigger" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.PauseTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.PauseTrigger.DigitalLevel" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the Pause Trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the Pause Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.Condition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Condition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalLevelPauseTriggerCondition">
      <summary>Specifies whether the task pauses while the signal is high or low.</summary>
<value>Specifies whether the task pauses while the signal is high or low.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the trigger signal.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the trigger signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeReferenceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">digital edge</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/referenceTrigger.html');">reference triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />.
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.ReferenceTrigger.DigitalEdge" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.Edge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Edge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalEdgeReferenceTriggerEdge">
      <summary>Specifies on what edge of a digital pulse the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.</summary>
<value>Specifies on what edge of a digital pulse the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the trigger signal.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the trigger signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogEdgeReferenceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/analogTriggering.html');">analog edge</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/referenceTrigger.html');">reference triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />.
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.ReferenceTrigger.AnalogEdge" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For E Series devices, if you use a channel name, the channel must be the only channel in the task. The only terminal you can use for 
E Series devices is PFI0. 
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Slope" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Slope" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogEdgeReferenceTriggerSlope">
      <summary>Specifies on which slope of the source signal the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.</summary>
<value>Specifies on which slope of the source signal the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Level" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Level" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in the units of the measurement the threshold at which the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.  Use <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Slope" /> to specify on which slope to trigger at this threshold.</summary>
<value>Specifies in the units of the measurement the threshold at which the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.  Use <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Slope" /> to specify on which slope to trigger at this threshold.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Hysteresis" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Hysteresis" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies a <see href="javascript:launchSharedHelp(' mxcncpts.chm::/analogTriggering.html');">hysteresis level</see> in the units of the measurement. If <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Slope" /> is <see cref="F:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope.Rising" />, the trigger does not deassert until the source signal passes below <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Level" /> minus the hysteresis. If <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Slope" /> is <see cref="F:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope.Falling" />, the trigger does not deassert until the source signal passes above <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Level" /> plus the hysteresis. Hysteresis is always enabled. Set this property to a non-zero value to use hysteresis.</summary>
<value>Specifies a <see href="javascript:launchSharedHelp(' mxcncpts.chm::/analogTriggering.html');">hysteresis level</see> in the units of the measurement. If <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Slope" /> is <see cref="F:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope.Rising" />, the trigger does not deassert until the source signal passes below <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Level" /> minus the hysteresis. If <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Slope" /> is <see cref="F:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope.Falling" />, the trigger does not deassert until the source signal passes above <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Level" /> plus the hysteresis. Hysteresis is always enabled. Set this property to a non-zero value to use hysteresis.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Coupling" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Coupling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogEdgeReferenceTriggerCoupling">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<value>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay above or below the trigger level for the minimum pulse width before being recognized. Use filtering  for noisy trigger signals that transition in and out of the hysteresis window rapidly.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay above or below the trigger level for the minimum pulse width before being recognized. Use filtering  for noisy trigger signals that transition in and out of the hysteresis window rapidly.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the<see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the<see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogWindowReferenceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/algwindowtrig.html');">analog window</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/referenceTrigger.html');">reference triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />. 
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.ReferenceTrigger.AnalogWindow" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For E Series devices, if you use a channel name, the channel must be the only channel in the task. The only terminal you can use for 
E Series devices is PFI0. 
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.Condition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Condition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogWindowReferenceTriggerCondition">
      <summary>Specifies whether the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs when the source signal enters the window or when it leaves the window. Use <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowTop" /> to specify the window.</summary>
<value>Specifies whether the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs when the source signal enters the window or when it leaves the window. Use <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowTop" /> to specify the window.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowTop" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="WindowTop" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the upper limit of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/algwindowtrig.html');">window</see>. Specify this value in the units of the measurement.</summary>
<value>Specifies the upper limit of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/algwindowtrig.html');">window</see>. Specify this value in the units of the measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowBottom" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="WindowBottom" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the lower limit of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/algwindowtrig.html');">window</see>. Specify this value in the units of the measurement.</summary>
<value>Specifies the lower limit of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/algwindowtrig.html');">window</see>. Specify this value in the units of the measurement.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.Coupling" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Coupling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogWindowReferenceTriggerCoupling">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<value>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay within the trigger window for the minimum pulse width before being recognized. Use filtering for noisy trigger signals that transition in and out of the window rapidly.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay within the trigger window for the minimum pulse width before being recognized. Use filtering for noisy trigger signals that transition in and out of the window rapidly.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeStartTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeStartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">digital edge</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/startTrig.html');">start triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.StartTrigger" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.StartTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.StartTrigger.DigitalEdge" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the Start Trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the Start Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.Edge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Edge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalEdgeStartTriggerEdge">
      <summary>Specifies on which edge of a digital pulse to start acquiring or generating samples.</summary>
<value>Specifies on which edge of a digital pulse to start acquiring or generating samples.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the trigger signal.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the trigger signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device. If you set this property to <see langword="true" />, the device does not recognize and act upon the trigger until the next pulse of the internal timebase.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device. If you set this property to <see langword="true" />, the device does not recognize and act upon the trigger until the next pulse of the internal timebase.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="T:NationalInstruments.DAQmx.AnalogEdgeStartTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogEdgeStartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/analogTriggering.html');">analog edge</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/startTrig.html');">start triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.StartTrigger" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.StartTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.StartTrigger.AnalogEdge" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/analogTrig.html');">source</see> of the Start Trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/analogTrig.html');">source</see> of the Start Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For E Series devices, if you use a channel name, the channel must be the first one in the task. The only terminal you can use for 
E Series devices is PFI0.  
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Slope" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Slope" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogEdgeStartTriggerSlope">
      <summary>Specifies on which slope of the trigger signal to start acquiring or generating samples.</summary>
<value>Specifies on which slope of the trigger signal to start acquiring or generating samples.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Level" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Level" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies at what threshold in the units of the measurement or generation to start acquiring or generating samples. Use <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Slope" /> to specify on which slope to trigger on this threshold.</summary>
<value>Specifies at what threshold in the units of the measurement or generation to start acquiring or generating samples. Use <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Slope" /> to specify on which slope to trigger on this threshold.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Hysteresis" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Hysteresis" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies a <see href="javascript:launchSharedHelp(' mxcncpts.chm::/analogTriggering.html');">hysteresis level</see> in the units of the measurement or generation. If <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Slope" /> is <see cref="F:NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope.Rising" />, the trigger does not deassert until the source signal passes below  <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Level" /> minus the hysteresis. If <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Slope" /> is <see cref="F:NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope.Falling" />, the trigger does not deassert until the source signal passes above <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Level" /> plus the hysteresis. Hysteresis is always enabled. Set this property to a non-zero value to use hysteresis.</summary>
<value>Specifies a <see href="javascript:launchSharedHelp(' mxcncpts.chm::/analogTriggering.html');">hysteresis level</see> in the units of the measurement or generation. If <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Slope" /> is <see cref="F:NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope.Rising" />, the trigger does not deassert until the source signal passes below  <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Level" /> minus the hysteresis. If <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Slope" /> is <see cref="F:NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope.Falling" />, the trigger does not deassert until the source signal passes above <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Level" /> plus the hysteresis. Hysteresis is always enabled. Set this property to a non-zero value to use hysteresis.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Coupling" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Coupling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogEdgeStartTriggerCoupling">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<value>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay above or below the trigger level for the minimum pulse width before being recognized. Use filtering  for noisy trigger signals that transition in and out of the hysteresis window rapidly.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay above or below the trigger level for the minimum pulse width before being recognized. Use filtering  for noisy trigger signals that transition in and out of the hysteresis window rapidly.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowStartTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogWindowStartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/algwindowtrig.html');">analog window</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/startTrig.html');">start triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.StartTrigger" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.StartTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.StartTrigger.AnalogWindow" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowStartTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogWindowStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the Start Trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see> or <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is an analog signal to use as the source of the Start Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
For E Series devices, if you use a channel name, the channel must be the first one in the task. The only terminal you can use for 
E Series devices is PFI0.  
</para>
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.Condition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Condition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogWindowStartTriggerCondition">
      <summary>Specifies whether the task starts acquiring or generating samples when the signal enters or leaves the window you specify with <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowTop" />.</summary>
<value>Specifies whether the task starts acquiring or generating samples when the signal enters or leaves the window you specify with <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowTop" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowTop" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WindowTop" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the upper limit of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/algwindowtrig.html');">window</see>. Specify this value in the units of the measurement or generation.</summary>
<value>Specifies the upper limit of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/algwindowtrig.html');">window</see>. Specify this value in the units of the measurement or generation.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowBottom" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WindowBottom" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the lower limit of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/algwindowtrig.html');">window</see>. Specify this value in the units of the measurement or generation.</summary>
<value>Specifies the lower limit of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/algwindowtrig.html');">window</see>. Specify this value in the units of the measurement or generation.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.Coupling" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Coupling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::AnalogWindowStartTriggerCoupling">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<value>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay within the trigger window for the minimum pulse width before being recognized. Use filtering for noisy trigger signals that transition in and out of the window rapidly.</summary>
<value>Specifies whether to apply a digital <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the digital output of the analog triggering circuitry (the Analog Comparison Event). When enabled, the analog signal must stay within the trigger window for the minimum pulse width before being recognized. Use filtering for noisy trigger signals that transition in and out of the window rapidly.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the digital filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the digital filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.SwitchScan" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchScan" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties for a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/switchScanning.html');">switch scan list</see>.</summary>
<seealso cref="P:NationalInstruments.DAQmx.Task.SwitchScan" />
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.SwitchScan.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.SwitchScan.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SwitchScan.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchScan.IsWaitingForAdvance" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsWaitingForAdvance" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>
Indicates if the switch hardware is waiting for an Advance Trigger. If the hardware is waiting, it completed the previous entry in the scan list.

</summary>
<value>
Indicates if the switch hardware is waiting for an Advance Trigger. If the hardware is waiting, it completed the previous entry in the scan list.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchScan.RepeatMode" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RepeatMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SwitchScanRepeatMode">
      <summary>
Specifies if the task advances through the scan list multiple times.

</summary>
<value>
Specifies if the task advances through the scan list multiple times.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchScan.BreakMode" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BreakMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SwitchScanBreakMode">
      <summary>
Specifies the action to take between each entry in a scan list.

</summary>
<value>
Specifies the action to take between each entry in a scan list.

</value>
</member>
    <member name="T:NationalInstruments.DAQmx.Switch" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Switch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a switch device and contains properties and methods that operate on switch devices outside the context of a task.</summary>
<threadsafety safety="safe" />
<seealso cref="P:NationalInstruments.DAQmx.Device.Switch" />
</member>
    <member name="M:NationalInstruments.DAQmx.Switch.SetTopologyAndReset(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetTopologyAndReset" nihasget="0" nihasset="0" niparameters="newTopology" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Resets a switch device and sets its <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Topology.html');">topology</see>.</summary>
<param name="newTopology">The switch <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Topology.html');">topology</see> to use on the device.</param>
<remarks>
This method differs from <see cref="M:NationalInstruments.DAQmx.Device.Reset" /> because it uses the value of <paramref name="newTopology" /> rather than the topology specified in Measurement <entity value="amp" /> Automation Explorer (MAX). However, this method maintains the channel usage defaults that you configure in MAX. </remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Switch.WaitForSettling" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WaitForSettling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Waits for the settling time on the device to expire.</summary>
<remarks>
The settling time is reset and begins counting down upon a switch operation. Therefore, this method might return immediately if no operation happened recently.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Switch.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.SupportedTopologies" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SupportedTopologies" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String[]">
      <summary>Gets an array of the names of all <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Topology.html');">switch topologies</see> supported by this switch device.</summary>
<value>An array of <see cref="T:System.String" /> that contains the names of all switch topologies supported by this switch device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.Temperature" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Temperature" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates the current temperature as read by the Switch module in degrees Celsius. Refer to your device documentation for more information.

</summary>
<value>
Indicates the current temperature as read by the Switch module in degrees Celsius. Refer to your device documentation for more information.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.Topology" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Topology" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>
Indicates the current topology of the device. This value is one of the topology options in <see cref="M:NationalInstruments.DAQmx.Switch.SetTopologyAndReset(System.String)" />.

</summary>
<value>
Indicates the current topology of the device. This value is one of the topology options in <see cref="M:NationalInstruments.DAQmx.Switch.SetTopologyAndReset(System.String)" />.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.NumberOfColumns" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="NumberOfColumns" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int64">
      <summary>
Gets the number of columns on a device in a matrix switch topology. This value is always 1 if the device is in a mux topology.
</summary>
<value>
Indicates the number of columns on a device in a matrix switch topology. This value is always 1 if the device is in a mux topology.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.NumberOfRows" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="NumberOfRows" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int64">
      <summary>
Indicates the number of rows on a device in a matrix switch topology. Indicates the number of multiplexed channels on a device in a mux topology.
</summary>
<value>
Indicates the number of rows on a device in a matrix switch topology. Indicates the number of multiplexed channels on a device in a mux topology.


</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.NumberOfSwitchChannels" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="NumberOfSwitchChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int64">
      <summary>
Indicates the number of switch channels for the current topology of the device. 
This value matches the number of channel names in <see cref="P:NationalInstruments.DAQmx.Switch.SwitchChannelList" />.
</summary>
<value>
Indicates the number of switch channels for the current topology of the device. 
This value matches the number of channel names in <see cref="P:NationalInstruments.DAQmx.Switch.SwitchChannelList" />.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.SwitchChannelList" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchChannelList" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>
Indicates a comma-delimited list of channel names for the current topology of the device.

</summary>
<value>
Indicates a comma-delimited list of channel names for the current topology of the device.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.NumberOfRelays" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="NumberOfRelays" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int64">
      <summary>Indicates the number of relays on the device.
This value matches the number of relay names in <see cref="P:NationalInstruments.DAQmx.Switch.RelayList" />.
</summary>
<value>
Indicates the number of relays on the device. This value matches the number of relay names in <see cref="P:NationalInstruments.DAQmx.Switch.RelayList" />.


</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.RelayList" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RelayList" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>
Indicates a 
comma-delimited list of relay names.

</summary>
<value>
Indicates a comma-delimited list of relay names.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.IsSettled" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsSettled" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>
Indicates when <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> has expired.
</summary>
<value>
Indicates when <see cref="P:NationalInstruments.DAQmx.Switch.SettlingTime" /> has expired.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.PowerDownLatchingRelaysAfterSettling" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PowerDownLatchingRelaysAfterSettling" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>
Specifies if
<see cref="M:NationalInstruments.DAQmx.Switch.WaitForSettling" /> powers down latching relays after waiting for the device to settle.
</summary>
<value>
Specifies if
<see cref="M:NationalInstruments.DAQmx.Switch.WaitForSettling" /> powers down latching relays after waiting for the device to settle.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.AutoConnectAnalogBus" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AutoConnectAnalogBus" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>
Specifies if NI-DAQmx routes multiplexed channels to the analog bus backplane. Only the SCXI-1127 and SCXI-1128 support this property.

</summary>
<value>
Specifies if NI-DAQmx routes multiplexed channels to the analog bus backplane. 

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.Switch.SettlingTime" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SettlingTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Specifies in seconds the amount of time to wait for the switch to settle (or debounce). NI-DAQmx adds this time to the settling time of the motherboard. Modify this property only if the switch does not settle within the settling time of the motherboard. Refer to device documentation for supported settling times.

</summary>
<value>
Specifies in seconds the amount of time to wait for the switch to settle (or debounce). 

</value>
</member>
    <member name="T:NationalInstruments.DAQmx.SwitchChannel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a channel on a switch device and contains properties and methods that operate on switch channels outside the context of a task. This class also defines the intended use of particular switch channels in tasks.</summary>
<threadsafety safety="safe" />
<remarks>Use the <see cref="M:NationalInstruments.DAQmx.DaqSystem.LoadSwitchChannel(System.String)" /> method on the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Local" /> instance of <see cref="T:NationalInstruments.DAQmx.DaqSystem" /> to create an instance of this class for a switch channel on your system.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.SwitchChannel.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.SwitchChannel.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SwitchChannel.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SwitchChannel.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.SwitchChannel" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Use this method only if the application you create runs on a low memory system.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.SwitchChannel.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.Impedance" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Impedance" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in ohms the switch impedance. This value is important in the RF domain and should match the impedance of the sources and loads.

</summary>
<value>
Indicates in ohms the switch impedance. This value is important in the RF domain and should match the impedance of the sources and loads.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.Bandwidth" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Bandwidth" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in Hertz the maximum frequency of a signal that can pass through the switch without significant deterioration.

</summary>
<value>
Indicates in Hertz the maximum frequency of a signal that can pass through the switch without significant deterioration.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.WireMode" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WireMode" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int64">
      <summary>
Indicates the number of wires that the channel switches.

</summary>
<value>
Indicates the number of wires that the channel switches.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxDCVoltage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxDCVoltage" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in volts the maximum DC voltage that the device can switch.

</summary>
<value>
Indicates in volts the maximum DC voltage that the device can switch.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxACVoltage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxACVoltage" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in volts the maximum AC RMS voltage that the device can switch.

</summary>
<value>
Indicates in volts the maximum AC RMS voltage that the device can switch.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxDCSwitchPower" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxDCSwitchPower" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in watts the maximum DC power that the device can switch.

</summary>
<value>
Indicates in watts the maximum DC power that the device can switch.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxDCCarryPower" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxDCCarryPower" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in watts the maximum DC power that the device can carry.

</summary>
<value>
Indicates in watts the maximum DC power that the device can carry.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxDCSwitchCurrent" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxDCSwitchCurrent" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in amperes the maximum DC current that the device can switch. This current is always against a DC voltage level.

</summary>
<value>
Indicates in amperes the maximum DC current that the device can switch. This current is always against a DC voltage level.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxDCCarryCurrent" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxDCCarryCurrent" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in amperes the maximum DC current that the device can carry.

</summary>
<value>
Indicates in amperes the maximum DC current that the device can carry.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxACSwitchPower" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxACSwitchPower" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in watts the maximum AC power that the device can switch.

</summary>
<value>
Indicates in watts the maximum AC power that the device can switch.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxACCarryPower" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxACCarryPower" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in watts the maximum AC power that the device can carry.

</summary>
<value>
Indicates in watts the maximum AC power that the device can carry.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxACSwitchCurrent" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxACSwitchCurrent" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in amperes the maximum AC current that the device can switch. This current is always against an RMS voltage level.

</summary>
<value>
Indicates in amperes the maximum AC current that the device can switch. This current is always against an RMS voltage level.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.MaxACCarryCurrent" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MaxACCarryCurrent" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>
Indicates in amperes the maximum AC current that the device can carry.

</summary>
<value>
Indicates in amperes the maximum AC current that the device can carry.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.AnalogBusSharingEnable" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogBusSharingEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>
Specifies whether to enable sharing of an analog bus line so that multiple switch devices can connect to it simultaneously. For each device that will share the analog bus line, set this property to <see langword="true" /> to enable sharing on the channel that connects to the analog bus line. Analog bus sharing is disabled by default.
</summary>
<value>
Specifies whether to enable sharing of an analog bus line so that multiple switch devices can connect to it simultaneously. 

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.SwitchChannel.Usage" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Usage" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SwitchChannelUsage">
      <summary>
Specifies how you can use the channel. Using this property acts as a safety mechanism to prevent you from connecting two source channels, for example.

</summary>
<value>
Specifies how you can use the channel. 

</value>
</member>
    <member name="T:NationalInstruments.DAQmx.DaqWarningEventHandler" nitypekind="Delegate" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqWarningEventHandler" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the method that handles the <see cref="E:NationalInstruments.DAQmx.DaqSystem.DaqWarning" /> event.</summary>
<param name="sender">
The source of the event.
</param>
<param name="e">
A <see cref="T:NationalInstruments.DAQmx.DaqWarningEventArgs" /> object that contains the
event data.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.TaskAction" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TaskAction" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how to alter the state of the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TaskAction.Commit" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Commit" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Programs the hardware with all parameters of the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TaskAction.Start" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Start" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transitions the task to the running state, which begins device input or output.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TaskAction.Unreserve" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Unreserve" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Releases all previously reserved resources.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TaskAction.Reserve" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Reserve" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Marks the hardware resources that are needed for the task as in use. No other tasks can reserve these same resources.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TaskAction.Verify" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Verify" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Verifies that all task parameters are valid for the hardware.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TaskAction.Stop" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Stop" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transitions the task from the running state to the committed state, which ends device input or output.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TaskAction.Abort" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Abort" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Aborts execution of the task. Aborting a task immediately terminates the currently active operation, such as a read or a write. Aborting a task puts the task into an unstable but recoverable state. To recover the task, use <see cref="M:NationalInstruments.DAQmx.Task.Start" /> to restart the task or use <see cref="M:NationalInstruments.DAQmx.Task.Stop" /> to reset the task without starting it.
</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ChannelLineGrouping" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ChannelLineGrouping" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how to group digital lines into one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/virtChanTypes.html');">virtual channels</see>.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ChannelLineGrouping.OneChannelForAllLines" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OneChannelForAllLines" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All digital lines are combined into a single <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/virtChanTypes.html');">virtual channel</see>.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ChannelLineGrouping.OneChannelForEachLine" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OneChannelForEachLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A separate <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/virtChanTypes.html');">virtual channel</see> is created for each digital line.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SwitchPathStatus" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchPathStatus" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the status of the requested path.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchPathStatus.ChannelReservedForRouting" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ChannelReservedForRouting" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>One of the endpoint channels is reserved for routing.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchPathStatus.SourceChannelConflict" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SourceChannelConflict" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No path is available between the two channels because connecting the channels would directly or indirectly connect two source channels.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchPathStatus.ChannelInUse" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ChannelInUse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The  path between the two endpoints is unavailable because another connection is already using a channel needed for routing.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchPathStatus.PathUnsupported" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PathUnsupported" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No path is available between the channels. You might need to reserve more channels for routing to create an available path.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchPathStatus.PathAlreadyExists" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PathAlreadyExists" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The channels are already connected.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchPathStatus.PathAvailable" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PathAvailable" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A path is available between the channels.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SwitchRelayPosition" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchRelayPosition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the position of each specified relay.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchRelayPosition.Closed" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Closed" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The relay is closed.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchRelayPosition.Open" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Open" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The relay is open.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DaqStream" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqStream" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Exposes a data stream on a <see cref="T:NationalInstruments.DAQmx.Task" /> that can be used to control reading and writing behavior and can be used in conjunction with reader and writer classes to read or write samples to or from an NI-DAQmx task.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.Stream" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogUnscaledReader" />
<seealso cref="T:NationalInstruments.DAQmx.CounterSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.CounterMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalSingleChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalMultiChannelReader" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogSingleChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogMultiChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.AnalogUnscaledWriter" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalSingleChannelWriter" />
<seealso cref="T:NationalInstruments.DAQmx.DigitalMultiChannelWriter" />
</member>
    <member name="M:NationalInstruments.DAQmx.DaqStream.ConfigureInputBuffer(System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureInputBuffer" nihasget="0" nihasset="0" niparameters="bufferSize" niparametertypes="System.Int64" nireturnvaluetype="System.Void">
      <summary>Overrides the automatic input <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/buffering.html');">buffer</see> allocation that NI-DAQmx performs.</summary>
<param name="bufferSize">The number of samples the buffer can hold for each channel in the task. Zero indicates that no buffer is allocated.</param>
<remarks>Set <paramref name="bufferSize" /> to 0 to perform a hardware-timed operation without using a buffer.<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.DaqStream.ConfigureInputBuffer(System.Int64)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqStream.WriteRaw(System.Boolean,System.Byte[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteRaw" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Byte[]" nireturnvaluetype="System.Void">
      <summary>Writes <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/rawdata.html');">raw</see>, unprocessed samples to the channels in the task.</summary>
<param name="autoStart">
If set to <see langword="true" />, this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A byte array of raw data to write to the task.</param>
<remarks>
The format of the raw samples depends on the device to which you are writing. Consult your device documentation for more information.
<para>You can use the <see cref="T:System.IO.MemoryStream" /> class to create a byte array from other types.</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqStream.ReadRaw(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadRaw" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Byte[]">
      <summary>Reads <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/rawdata.html');">raw</see>, unprocessed samples from the channels in the task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A byte array of raw data from the task.
</returns>
<remarks>
<para>The format of the raw samples depends on the device from which you are reading. Consult your device documentation for more information.</para>
<para>You can use the <see cref="T:System.IO.MemoryStream" /> class to translate the returned byte array data into other types.</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ChannelsToRead" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Sets a subset of channels in the task from which to read.</summary>
<value>The channels to read from.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.Timeout" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Timeout" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets or sets the amount of time in milliseconds to wait for reads or writes to complete.</summary>
<value>The time in milliseconds.</value>
<remarks>
<para>If you set this property to <entity value="ndash" />1 (or <see cref="F:System.Threading.Timeout.Infinite" />), read or write operations never time out.</para>
<para>This property applies to synchronous and asynchronous reads and writes. A write is considered complete when all of the written samples have been transferred to the task buffer. Writes do not wait until the written samples have been generated by the device.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqStream.ConfigureOutputBuffer(System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureOutputBuffer" nihasget="0" nihasset="0" niparameters="bufferSize" niparametertypes="System.Int64" nireturnvaluetype="System.Void">
      <summary>Overrides the automatic output <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/buffering.html');">buffer</see> allocation that NI-DAQmx performs.</summary>
<param name="bufferSize">The number of samples the buffer can hold for each channel in the task. Zero indicates that no buffer is allocated.</param>
<remarks>Set <paramref name="bufferSize" /> to 0 to perform a hardware-timed operation without using a buffer.<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.DaqStream.ConfigureOutputBuffer(System.Int64)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqStream.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.Buffer" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Buffer" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DaqBuffer">
      <summary>Gets the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/buffering.html');">buffer</see> for the task.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DaqBuffer" /> for the task.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WaveformAttributeMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.WaveformAttributeModes">
      <summary>Gets or sets the type of information returned from a waveform read.</summary>
<value>The waveform attribute mode. The default value is a bitwise combination of 
<see cref="F:NationalInstruments.DAQmx.WaveformAttributeModes.Timing" /> and <see cref="F:NationalInstruments.DAQmx.WaveformAttributeModes.ExtendedProperties" />.</value>
<remarks>
<para>This property applies to synchronous and asynchronous waveform reads.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqStream.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DaqStream.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DaqStream.GetService(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetService" nihasget="0" nihasset="0" niparameters="serviceType" niparametertypes="System.Int32" nireturnvaluetype="System.Object">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadRelativeTo" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadRelativeTo" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ReadRelativeTo">
      <summary>Specifies the point in the buffer at which to begin a read operation. If you also specify an offset with <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" />, the read operation begins at that offset relative to the point you select with this property. The default value is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.CurrentReadPosition" /> unless you configure a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> for the task. If you configure a Reference Trigger, the default value is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstPretriggerSample" />.</summary>
<value>Specifies the point in the buffer at which to begin a read operation. If you also specify an offset with <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" />, the read operation begins at that offset relative to the point you select with this property. The default value is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.CurrentReadPosition" /> unless you configure a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> for the task. If you configure a Reference Trigger, the default value is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstPretriggerSample" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadOffset" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int32">
      <summary>Specifies an offset in samples per channel at which to begin a read operation. This offset is relative to the location you specify with <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadRelativeTo" />.</summary>
<value>Specifies an offset in samples per channel at which to begin a read operation. This offset is relative to the location you specify with <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadRelativeTo" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadAllAvailableSamples" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether subsequent read operations read all samples currently available in the buffer or wait for the buffer to become full before reading. NI-DAQmx uses this setting for finite acquisitions and only when the number of samples to read is -1. For continuous acquisitions when the number of samples to read is -1, a read operation always reads all samples currently available in the buffer.</summary>
<value>Specifies whether subsequent read operations read all samples currently available in the buffer or wait for the buffer to become full before reading. NI-DAQmx uses this setting for finite acquisitions and only when the number of samples to read is -1. For continuous acquisitions when the number of samples to read is -1, a read operation always reads all samples currently available in the buffer.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadAutoStart" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadAutoStart" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies if reading from the task automatically starts the task  if you did not start the task explicitly by using starting the task. The default value is <see langword="true" />. When  reading from the task starts a finite acquisition task, it also stops the task after reading the last sample.</summary>
<value>Specifies if reading from the task automatically starts the task  if you did not start the task explicitly by using starting the task. The default value is <see langword="true" />. When  reading from the task starts a finite acquisition task, it also stops the task after reading the last sample.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadOverwriteMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadOverwriteMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ReadOverwriteMode">
      <summary>Specifies whether to overwrite samples in the buffer that you have not yet read.</summary>
<value>Specifies whether to overwrite samples in the buffer that you have not yet read.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.LoggingFilePath" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LoggingFilePath" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the path to the TDMS file to which you want to <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">log</see> data.  If the file path is changed while the task is running, this takes effect on the next sample interval (if Logging.SampsPerFile has been set) or when DAQmx Start New File is called. New file paths can be specified by ending with "\" or "/". Files created after specifying a new file path retain the same name and numbering sequence.</summary>
<value>Specifies the path to the TDMS file to which you want to <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">log</see> data.  If the file path is changed while the task is running, this takes effect on the next sample interval (if Logging.SampsPerFile has been set) or when DAQmx Start New File is called. New file paths can be specified by ending with "\" or "/". Files created after specifying a new file path retain the same name and numbering sequence.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.LoggingMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LoggingMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::LoggingMode">
      <summary>Specifies whether to enable <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">logging</see> and whether to allow reading data while logging. Log mode allows for the best performance. However, you cannot read data while logging if you specify this mode. If you want to read data while logging, specify Log and Read mode.</summary>
<value>Specifies whether to enable <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">logging</see> and whether to allow reading data while logging. Log mode allows for the best performance. However, you cannot read data while logging if you specify this mode. If you want to read data while logging, specify Log and Read mode.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.TdmsLoggingGroupName" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="TdmsLoggingGroupName" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of the group to create within the <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">TDMS</see> file for data from this task. If you append data to an existing file and the specified group already exists, NI-DAQmx appends a number symbol and a number to the group name, incrementing that number until finding a group name that does not exist. For example, if you specify a group name of Voltage Task, and that group already exists, NI-DAQmx assigns the group name Voltage Task #1, then Voltage Task #2.</summary>
<value>Specifies the name of the group to create within the <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">TDMS</see> file for data from this task. If you append data to an existing file and the specified group already exists, NI-DAQmx appends a number symbol and a number to the group name, incrementing that number until finding a group name that does not exist. For example, if you specify a group name of Voltage Task, and that group already exists, NI-DAQmx assigns the group name Voltage Task #1, then Voltage Task #2.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>
For digital input tasks, NI-DAQmx creates a group for each virtual channel in the task. For each created group, NI-DAQmx appends a hyphen and the virtual channel name to the group name.
</para>

<para>If you query this property, NI-DAQmx returns the original value specified without any suffixes appended by NI-DAQmx for digital input tasks or for existing groups.</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.TdmsLoggingOperation" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="TdmsLoggingOperation" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::TdmsLoggingOperation">
      <summary>Specifies how to open the <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">TDMS</see> file.</summary>
<value>Specifies how to open the <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">TDMS</see> file.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.LoggingPause" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LoggingPause" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether logging is paused while a task is executing. If <see cref="P:NationalInstruments.DAQmx.DaqStream.LoggingMode" /> is set to Log and Read mode, this value is taken into consideration on the next call to DAQmx Read, where data is written to disk. If <see cref="P:NationalInstruments.DAQmx.DaqStream.LoggingMode" /> is set to Log Only mode, this value is taken into consideration the next time that data is written to disk. A new TDMS group is written when logging is resumed from a paused state.</summary>
<value>Specifies whether logging is paused while a task is executing. If <see cref="P:NationalInstruments.DAQmx.DaqStream.LoggingMode" /> is set to Log and Read mode, this value is taken into consideration on the next call to DAQmx Read, where data is written to disk. If <see cref="P:NationalInstruments.DAQmx.DaqStream.LoggingMode" /> is set to Log Only mode, this value is taken into consideration the next time that data is written to disk. A new TDMS group is written when logging is resumed from a paused state.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.LoggingSamplesPerFile" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LoggingSamplesPerFile" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies how many samples to write to each file. When the file reaches the number of samples specified, a new file is created with the naming convention of &lt;filename&gt;_####.tdms, where #### starts at 0001 and increments automatically with each new file. For example, if the file specified is C:\data.tdms, the next file name used is C:\data_0001.tdms. To disable file spanning behavior, set this attribute to 0. If <see cref="P:NationalInstruments.DAQmx.DaqStream.LoggingFilePath" /> is changed while this attribute is set, the new file path takes effect on the next file created.</summary>
<value>Specifies how many samples to write to each file. When the file reaches the number of samples specified, a new file is created with the naming convention of &lt;filename&gt;_####.tdms, where #### starts at 0001 and increments automatically with each new file. For example, if the file specified is C:\data.tdms, the next file name used is C:\data_0001.tdms. To disable file spanning behavior, set this attribute to 0. If <see cref="P:NationalInstruments.DAQmx.DaqStream.LoggingFilePath" /> is changed while this attribute is set, the new file path takes effect on the next file created.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.LoggingFileWriteSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LoggingFileWriteSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the size, in samples, in which data will be written to disk.  The size must be evenly divisible by the volume sector size, in bytes.</summary>
<value>Specifies the size, in samples, in which data will be written to disk.  The size must be evenly divisible by the volume sector size, in bytes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.LoggingFilePreallocationSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LoggingFilePreallocationSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies a size in samples to be used to pre-allocate space on disk.  Pre-allocation can improve file I/O performance, especially in situations where multiple files are being written to disk.  For finite tasks, the default behavior is to pre-allocate the file based on the number of samples you configure the task to acquire.</summary>
<value>Specifies a size in samples to be used to pre-allocate space on disk.  Pre-allocation can improve file I/O performance, especially in situations where multiple files are being written to disk.  For finite tasks, the default behavior is to pre-allocate the file based on the number of samples you configure the task to acquire.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.CurrentReadPosition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CurrentReadPosition" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in samples per channel the current position in the buffer.</summary>
<value>Indicates in samples per channel the current position in the buffer.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.AvailableSamplesPerChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AvailableSamplesPerChannel" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of samples available to read per channel. This value is the same for all channels in the task.</summary>
<value>Indicates the number of samples available to read per channel. This value is the same for all channels in the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.TotalSamplesAcquiredPerChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="TotalSamplesAcquiredPerChannel" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the total number of samples acquired by each channel. NI-DAQmx returns a single value because this value is the same for all channels. For retriggered acquisitions, this value is the cumulative number of samples across all retriggered acquisitions.</summary>
<value>Indicates the total number of samples acquired by each channel. NI-DAQmx returns a single value because this value is the same for all channels. For retriggered acquisitions, this value is the cumulative number of samples across all retriggered acquisitions.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.CommonModeRangeErrorChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CommonModeRangeErrorChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected a common mode range violation for any virtual channel in the task. Common mode range violation occurs when the voltage of either the positive terminal or negative terminal to ground are out of range. Reading this property clears the common mode range violation status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.CommonModeRangeErrorChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected a common mode range violation for any virtual channel in the task. Common mode range violation occurs when the voltage of either the positive terminal or negative terminal to ground are out of range. Reading this property clears the common mode range violation status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.CommonModeRangeErrorChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.CommonModeRangeErrorChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CommonModeRangeErrorChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected a common mode range violation. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.CommonModeRangeErrorChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected a common mode range violation. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.CommonModeRangeErrorChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadExcitationFaultChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadExcitationFaultChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/GUID-CFC0C621-FF4A-498A-8E93-1CCA22F9A208.html')">excitation fault condition</see> for any virtual channel in the task. Reading this property clears the excitation fault status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadExcitationFaultChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/GUID-CFC0C621-FF4A-498A-8E93-1CCA22F9A208.html')">excitation fault condition</see> for any virtual channel in the task. Reading this property clears the excitation fault status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadExcitationFaultChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadExcitationFaultChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadExcitationFaultChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/GUID-CFC0C621-FF4A-498A-8E93-1CCA22F9A208.html')">excitation fault condition</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadExcitationFaultChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/GUID-CFC0C621-FF4A-498A-8E93-1CCA22F9A208.html')">excitation fault condition</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadExcitationFaultChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadOvercurrentChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadOvercurrentChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see> for any virtual channel in the task. Reading this property clears the overcurrent status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOvercurrentChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see> for any virtual channel in the task. Reading this property clears the overcurrent status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOvercurrentChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadOvercurrentChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadOvercurrentChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOvercurrentChannelsExist" /> before you read this property. Otherwise, you will receive an error. On some devices, you must restart the task for all overcurrent channels to recover.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOvercurrentChannelsExist" /> before you read this property. Otherwise, you will receive an error. On some devices, you must restart the task for all overcurrent channels to recover.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadOvertemperatureChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadOvertemperatureChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an overtemperature condition in any virtual channel in the task. Reading this property clears the overtemperature status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOvertemperatureChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an overtemperature condition in any virtual channel in the task. Reading this property clears the overtemperature status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOvertemperatureChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadOvertemperatureChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadOvertemperatureChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a list of names of any overtemperature virtual channels. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOvertemperatureChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a list of names of any overtemperature virtual channels. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOvertemperatureChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadOpenCurrentLoopChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadOpenCurrentLoopChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/opencurrent.html');">open current loop</see> for any virtual channel in the task. Reading this property clears the open current loop status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOpenCurrentLoopChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/opencurrent.html');">open current loop</see> for any virtual channel in the task. Reading this property clears the open current loop status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOpenCurrentLoopChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadOpenCurrentLoopChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadOpenCurrentLoopChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/opencurrent.html');">open current loop</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOpenCurrentLoopChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/opencurrent.html');">open current loop</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOpenCurrentLoopChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.OpenThermocoupleChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OpenThermocoupleChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an open thermocouple connected to any virtual channel in the task. Reading this property clears the open thermocouple status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.OpenThermocoupleChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an open thermocouple connected to any virtual channel in the task. Reading this property clears the open thermocouple status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.OpenThermocoupleChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.OpenThermocoupleChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OpenThermocoupleChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an open thermcouple. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.OpenThermocoupleChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an open thermcouple. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.OpenThermocoupleChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.OverloadedInputChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OverloadedInputChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/OverloadDetection.html');">overload</see> in any virtual channel in the task. Reading this property clears the overload status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.OverloadedInputChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/OverloadDetection.html');">overload</see> in any virtual channel in the task. Reading this property clears the overload status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.OverloadedInputChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.OverloadedInputChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OverloadedInputChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any <see href="javascript:launchSharedHelp('mxdevconsid.chm::/OverloadDetection.html');">overloaded</see> virtual channels in the task. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.OverloadedInputChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any <see href="javascript:launchSharedHelp('mxdevconsid.chm::/OverloadDetection.html');">overloaded</see> virtual channels in the task. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.OverloadedInputChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.AccessoryInsertionOrRemovalDetected" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AccessoryInsertionOrRemovalDetected" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if any device(s) in the task detected the insertion or removal of an accessory since the task started. Reading this property clears the accessory change status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.DevicesWithInsertedOrRemovedAccessories" />. Otherwise, you will receive an error.</summary>
<value>Indicates if any device(s) in the task detected the insertion or removal of an accessory since the task started. Reading this property clears the accessory change status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.DevicesWithInsertedOrRemovedAccessories" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.DevicesWithInsertedOrRemovedAccessories" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DevicesWithInsertedOrRemovedAccessories" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the names of any devices that detected the insertion or removal of an accessory since the task started. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.AccessoryInsertionOrRemovalDetected" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates the names of any devices that detected the insertion or removal of an accessory since the task started. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.AccessoryInsertionOrRemovalDetected" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadRawDataWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadRawDataWidth" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in bytes the size of a raw sample from the task.</summary>
<value>Indicates in bytes the size of a raw sample from the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.NumberOfInputChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="NumberOfInputChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of channels that reading from the task reads from the task. This value is the number of channels in the task or the number of channels you specify with <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</summary>
<value>Indicates the number of channels that reading from the task reads from the task. This value is the number of channels in the task or the number of channels you specify with <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.DigitalLinesPerInputChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DigitalLinesPerInputChannel" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of lines per channel that NI-DAQmx returns in a sample for line-based reads. If a channel has fewer lines than this number, the extra lines are <see langword="false" />.</summary>
<value>Indicates the number of lines per channel that NI-DAQmx returns in a sample for line-based reads. If a channel has fewer lines than this number, the extra lines are <see langword="false" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadWaitMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadWaitMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ReadWaitMode">
      <summary>Specifies how reading from the task waits for samples to become available.</summary>
<value>Specifies how reading from the task waits for samples to become available.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.ReadSleepTime" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadSleepTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time to sleep after checking for available samples if <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadWaitMode" /> is <see cref="F:NationalInstruments.DAQmx.ReadWaitMode.Sleep" />.</summary>
<value>Specifies in seconds the amount of time to sleep after checking for available samples if <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadWaitMode" /> is <see cref="F:NationalInstruments.DAQmx.ReadWaitMode.Sleep" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteRelativeTo" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteRelativeTo" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WriteRelativeTo">
      <summary>Specifies the point in the buffer at which to write data. If you also specify an offset with <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOffset" />, the write operation begins at that offset relative to this point you select with this property.</summary>
<value>Specifies the point in the buffer at which to write data. If you also specify an offset with <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOffset" />, the write operation begins at that offset relative to this point you select with this property.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOffset" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOffset" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int32">
      <summary>Specifies in samples per channel an offset at which a write operation begins. This offset is relative to the location you specify with <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteRelativeTo" />.</summary>
<value>Specifies in samples per channel an offset at which a write operation begins. This offset is relative to the location you specify with <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteRelativeTo" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteRegenerationMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteRegenerationMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WriteRegenerationMode">
      <summary>Specifies whether to allow NI-DAQmx to generate the same data multiple times.</summary>
<value>Specifies whether to allow NI-DAQmx to generate the same data multiple times.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

<para>
If you enable regeneration and write new data to the buffer, NI-DAQmx can generate a combination of old and new data, a phenomenon 
called <see href="javascript:launchSharedHelp('mxcncpts.chm::/Glitching.html');">glitching</see>. 
</para>

</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.CurrentWritePosition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CurrentWritePosition" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the position in the buffer of the next sample to generate. This value is identical for all channels in the task.</summary>
<value>Indicates the position in the buffer of the next sample to generate. This value is identical for all channels in the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOvercurrentChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOvercurrentChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see> for any channel in the task. Reading this property clears the overcurrent status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOvercurrentChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see> for any channel in the task. Reading this property clears the overcurrent status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOvercurrentChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOvercurrentChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOvercurrentChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see> has been detected. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOvercurrentChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see> has been detected. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOvercurrentChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOvertemperatureChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOvertemperatureChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an overtemperature condition in any virtual channel in the task. Reading this property clears the overtemperature status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOvertemperatureChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an overtemperature condition in any virtual channel in the task. Reading this property clears the overtemperature status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOvertemperatureChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOvertemperatureChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOvertemperatureChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a list of names of any overtemperature virtual channels. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOvertemperatureChannelsExist" /> before you read this property. Otherwise, you will receive an error. The list of names may be empty if the device cannot determine the source of the overtemperature.</summary>
<value>Indicates a list of names of any overtemperature virtual channels. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOvertemperatureChannelsExist" /> before you read this property. Otherwise, you will receive an error. The list of names may be empty if the device cannot determine the source of the overtemperature.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteExternalOvervoltageChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteExternalOvervoltageChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an External Overvoltage condition for any channel in the task. Reading this property clears the External Overvoltage status for all channels in the task. You must read this property before you read External OvervoltageChans. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an External Overvoltage condition for any channel in the task. Reading this property clears the External Overvoltage status for all channels in the task. You must read this property before you read External OvervoltageChans. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteExternalOvervoltageChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteExternalOvervoltageChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a list of names of any virtual channels in the task for which an External Overvoltage condition has been detected. You must read External OvervoltageChansExist before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a list of names of any virtual channels in the task for which an External Overvoltage condition has been detected. You must read External OvervoltageChansExist before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOverloadedChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOverloadedChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an overload in any virtual channel in the task. Reading this property clears the overload status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOverloadedChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an overload in any virtual channel in the task. Reading this property clears the overload status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOverloadedChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOverloadedChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOverloadedChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a list of names of any overloaded virtual channels in the task. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOverloadedChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a list of names of any overloaded virtual channels in the task. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOverloadedChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOpenCurrentLoopChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOpenCurrentLoopChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/opencurrent.html');">open current loop</see> for any channel in the task. Reading this property clears the open current loop status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOpenCurrentLoopChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/opencurrent.html');">open current loop</see> for any channel in the task. Reading this property clears the open current loop status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOpenCurrentLoopChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteOpenCurrentLoopChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WriteOpenCurrentLoopChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/opencurrent.html');">open current loop</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOpenCurrentLoopChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task for which the device(s) detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/opencurrent.html');">open current loop</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOpenCurrentLoopChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WritePowerSupplyFaultChannelsExist" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WritePowerSupplyFaultChannelsExist" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the device(s) detected a <see href="javascript:launchSharedHelp('mxdevconsid.chm::/pwrsupfault.html');">power supply fault</see> for any channel in the task. Reading this property clears the power supply fault status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WritePowerSupplyFaultChannels" />. Otherwise, you will receive an error.</summary>
<value>Indicates if the device(s) detected a <see href="javascript:launchSharedHelp('mxdevconsid.chm::/pwrsupfault.html');">power supply fault</see> for any channel in the task. Reading this property clears the power supply fault status for all channels in the task. You must read this property before you read <see cref="P:NationalInstruments.DAQmx.DaqStream.WritePowerSupplyFaultChannels" />. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WritePowerSupplyFaultChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WritePowerSupplyFaultChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task that have a <see href="javascript:launchSharedHelp('mxdevconsid.chm::/pwrsupfault.html');">power supply fault</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WritePowerSupplyFaultChannelsExist" /> before you read this property. Otherwise, you will receive an error.</summary>
<value>Indicates a <see href="javascript:launchSharedHelp('mxcncpts.chm::/physChanNames.html');">list of names</see> of any virtual channels in the task that have a <see href="javascript:launchSharedHelp('mxdevconsid.chm::/pwrsupfault.html');">power supply fault</see>. You must read <see cref="P:NationalInstruments.DAQmx.DaqStream.WritePowerSupplyFaultChannelsExist" /> before you read this property. Otherwise, you will receive an error.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.OutputBufferSpaceAvailable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="OutputBufferSpaceAvailable" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in samples per channel the amount of available space in the buffer.</summary>
<value>Indicates in samples per channel the amount of available space in the buffer.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.TotalSamplesGeneratedPerChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="TotalSamplesGeneratedPerChannel" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the total number of samples generated by each channel in the task. This value is identical for all channels in the task.</summary>
<value>Indicates the total number of samples generated by each channel in the task. This value is identical for all channels in the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteRawDataWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WriteRawDataWidth" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in bytes the required size of a raw sample to write to the task.</summary>
<value>Indicates in bytes the required size of a raw sample to write to the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.NumberOfOutputChannels" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="NumberOfOutputChannels" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of channels that writing to the task writes to the task. This value is the number of channels in the task.</summary>
<value>Indicates the number of channels that writing to the task writes to the task. This value is the number of channels in the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteWaitMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WriteWaitMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WriteWaitMode">
      <summary>Specifies how writing to the task waits for space to become available in the buffer.</summary>
<value>Specifies how writing to the task waits for space to become available in the buffer.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.WriteSleepTime" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WriteSleepTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time to sleep after checking for available buffer space if <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteWaitMode" /> is <see cref="F:NationalInstruments.DAQmx.WriteWaitMode.Sleep" />.</summary>
<value>Specifies in seconds the amount of time to sleep after checking for available buffer space if <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteWaitMode" /> is <see cref="F:NationalInstruments.DAQmx.WriteWaitMode.Sleep" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.NextWriteIsLast" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="NextWriteIsLast" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies that the next samples written are the last samples you want to generate. Use this property when performing continuous generation to prevent underflow errors after writing the last sample. <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteRegenerationMode" /> must be <see cref="F:NationalInstruments.DAQmx.WriteRegenerationMode.DoNotAllowRegeneration" /> to use this property.</summary>
<value>Specifies that the next samples written are the last samples you want to generate. Use this property when performing continuous generation to prevent underflow errors after writing the last sample. <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteRegenerationMode" /> must be <see cref="F:NationalInstruments.DAQmx.WriteRegenerationMode.DoNotAllowRegeneration" /> to use this property.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqStream.DigitalLinesPerOutputChannel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalLinesPerOutputChannel" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the number of Boolean values expected per channel in a sample for line-based writes. This property is determined by the channel in the task with the most digital lines. If a channel has fewer lines than this number, NI-DAQmx ignores the extra Boolean values.</summary>
<value>Indicates the number of Boolean values expected per channel in a sample for line-based writes. This property is determined by the channel in the task with the most digital lines. If a channel has fewer lines than this number, NI-DAQmx ignores the extra Boolean values.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogMultiChannelWriter" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogMultiChannelWriter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for writing samples to one or more analog output channels in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogMultiChannelWriter" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.AnalogMultiChannelWriter" /> class to write to the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to write to.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for writers to provide samples to be generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.WriteSingleSample(System.Boolean,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Double[]" nireturnvaluetype="System.Void">
      <summary>Writes a single floating-point sample to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.WriteMultiSample(System.Boolean,System.Double[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Double[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more floating-point samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel.  The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>. 
<para>
If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
</para><para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Double[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single floating-point sample to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Double[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more floating-point samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel.  The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to the <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.EndWrite(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndWrite" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Void">
      <summary>Handles the end of an asynchronous write initiated with <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[0:,0:],System.AsyncCallback,System.Object)" /> or <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" />.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[0:,0:],System.AsyncCallback,System.Object)" /> or <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.EndWrite(System.IAsyncResult)" /> before the asynchronous write represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.EndWrite(System.IAsyncResult)" /> waits for the write to complete before returning.  For a write to a buffered task, the write is considered complete when all of the written samples have been transferred to the task buffer.  Use <see cref="P:NationalInstruments.DAQmx.Task.IsDone" /> or <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.TimeSpan)" /> on the <see cref="T:NationalInstruments.DAQmx.Task" /> object to determine if a task has generated all of the data it was configured to generate.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[0:,0:],System.AsyncCallback,System.Object)" /> or <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.IndexOutOfRangeException">The data provided to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[0:,0:],System.AsyncCallback,System.Object)" /> or <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" /> has a non-zero lower bound.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogMultiChannelWriter.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see> and <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.WriteWaveform``1(System.Boolean,NationalInstruments.AnalogWaveform{``0}[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform`1[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more analog waveform samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If you set <format type="italics">autoStart</format> to <see langword="true" />,  <b>WriteWaveform</b> automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call <see cref="M:NationalInstruments.DAQmx.Task.Start" />. You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1 " /> objects to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the analog waveform corresponds to the order in which you add the lines to the channel.</param>
<remarks>
If the task uses on-demand timing, the <b>WriteWaveform</b> method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, <b>WriteWaveform</b> returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to wait until the device has generated all samples.
<para>Analog waveform writes are not affected by the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval" /> or <see cref="P:NationalInstruments.WaveformTiming.StartTime" /> properties on <see cref="T:NationalInstruments.AnalogWaveform`1 " />.  To configure timing for analog waveform writes, use the <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> method.</para><para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteWaveform``1(System.Boolean,NationalInstruments.AnalogWaveform{``0}[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform`1[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more analog waveform samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If you set <format type="italics">autoStart</format> to <see langword="true" />,  <b>BeginWriteWaveform</b> automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call <see cref="M:NationalInstruments.DAQmx.Task.Start" />.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1 " /> objects to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the analog waveform corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<typeparam name="TData">The type of the analog waveform samples.</typeparam>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Analog waveform writes are not affected by the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval" /> or <see cref="P:NationalInstruments.WaveformTiming.StartTime" /> properties on <see cref="T:NationalInstruments.AnalogWaveform`1 " />.  To configure timing for analog waveform writes, use the <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> method.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> in the <format type="italics">NI Measurement Studio Help </format>and <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> in the <format type="italics">.NET Framework Developer's Guide</format> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
<seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.WriteWaveform(System.Boolean,NationalInstruments.AnalogWaveform[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="WriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform[]" nireturnvaluetype="System.Void">
      <summary>This overload is obsolete.</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="autoStart">
This parameter is not documented because the member is obsolete. 

</param>
<param name="data">
This parameter is not documented because the member is obsolete. 

</param>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.AnalogWaveform[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>This overload is obsolete.</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="autoStart">
This parameter is not documented because the member is obsolete. 

</param>
<param name="data">
This parameter is not documented because the member is obsolete. 

</param>
<param name="callback">
This parameter is not documented because the member is obsolete. 

</param>
<param name="state">
This parameter is not documented because the member is obsolete. 

</param>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogMultiChannelWriter.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.WriteWaveform(System.Boolean,NationalInstruments.AnalogWaveform`1[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="7/2/2006 1:04:16 PM" niupdatedby="Sebastius" nidisplayname="WriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform`1[]" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.AnalogWaveform`1[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="7/2/2006 1:04:16 PM" niupdatedby="Sebastius" nidisplayname="BeginWriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform`1[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <exclude />
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogSingleChannelWriter" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogSingleChannelWriter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for writing samples to the analog output channel in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogSingleChannelWriter" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.AnalogSingleChannelWriter" /> class to write to the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to write to.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for writers to provide samples to be generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.WriteSingleSample(System.Boolean,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Double" nireturnvaluetype="System.Void">
      <summary>Writes a floating-point sample to a single <see cref="T:NationalInstruments.DAQmx.AOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.WriteMultiSample(System.Boolean,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Double[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more floating-point samples to a single <see cref="T:NationalInstruments.DAQmx.AOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.  
<para>
If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
</para><para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Double,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a floating-point sample to a single <see cref="T:NationalInstruments.DAQmx.AOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Double[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more floating-point samples to a single <see cref="T:NationalInstruments.DAQmx.AOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.EndWrite(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndWrite" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Void">
      <summary>Handles the end of an asynchronous write initiated with <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" /> or <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double,System.AsyncCallback,System.Object)" />.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" /> or <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.EndWrite(System.IAsyncResult)" /> before the asynchronous write represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.EndWrite(System.IAsyncResult)" /> waits for the write to complete before returning.  For a write to a buffered task, the write is considered complete when all of the written samples have been transferred to the task buffer.  Use <see cref="P:NationalInstruments.DAQmx.Task.IsDone" /> or <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.Int32)" /> on the <see cref="T:NationalInstruments.DAQmx.Task" /> object to determine if a task has generated all of the data it was configured to generate.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" /> or <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteSingleSample(System.Boolean,System.Double,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.IndexOutOfRangeException">The data provided to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteMultiSample(System.Boolean,System.Double[],System.AsyncCallback,System.Object)" /> has a non-zero lower bound.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogSingleChannelWriter.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.WriteWaveform``1(System.Boolean,NationalInstruments.AnalogWaveform{``0})" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Void">
      <summary>Writes one or more analog waveform samples to a single <see cref="T:NationalInstruments.DAQmx.AOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If you set <format type="italics">autoStart</format> to <see langword="true" />, the <b>WriteWaveform</b> method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call <see cref="M:NationalInstruments.DAQmx.Task.Start" />.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">An <see cref="T:NationalInstruments.AnalogWaveform`1 " /> to write to the task. The order of the lines in the analog waveform corresponds to the order in which you add the lines to the channel.</param>
<remarks>
If the task uses on-demand timing, the  <b>WriteWaveform</b> method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, <b>WriteWaveform</b> returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to wait until the device has generated all samples.
<para>Digital waveform writes are not affected by the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval" /> or <see cref="P:NationalInstruments.WaveformTiming.StartTime" /> properties on <see cref="T:NationalInstruments.AnalogWaveform`1" />.  To configure timing for analog waveform writes, use the <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> method.</para><para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteWaveform``1(System.Boolean,NationalInstruments.AnalogWaveform{``0},System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform`1,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Writes one or more analog waveform samples to a single <see cref="T:NationalInstruments.DAQmx.AOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If you set <format type="italics">autoStart</format> to <see langword="true" />, the <b>BeginWriteWaveform</b> method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call <see cref="M:NationalInstruments.DAQmx.Task.Start" />.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">An <see cref="T:NationalInstruments.AnalogWaveform`1 " /> to write to the task. The order of the lines in the analog waveform corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<typeparam name="TData">The type of the analog waveform samples.</typeparam>
<remarks>
If the task uses on-demand timing, the <b>BeginWriteWaveform</b> method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, <b>BeginWriteWaveform</b> returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to wait until the device has generated all samples.
<para>Digital waveform writes are not affected by the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval" /> or <see cref="P:NationalInstruments.WaveformTiming.StartTime" /> properties on <see cref="T:NationalInstruments.AnalogWaveform`1 " />.  To configure timing for analog waveform writes, use the <see cref="M:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> method.</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
<remarks>
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> in the <format type="italics">NI Measurement Studio Help </format>and <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> in the <format type="italics">.NET Framework Developer's Guide</format> for additional information.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
<seealso keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.WriteWaveform(System.Boolean,NationalInstruments.AnalogWaveform)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="WriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform" nireturnvaluetype="System.Void">
      <summary>This overload is obsolete.</summary>
<param name="autoStart">
This parameter is not documented because the member is obsolete. 

</param>
<param name="data">
This parameter is not documented because the member is obsolete. 

</param>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.AnalogWaveform,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>This overload is obsolete.</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="autoStart">
This parameter is not documented because the member is obsolete. 

</param>
<param name="data">
This parameter is not documented because the member is obsolete. 

</param>
<param name="callback">
This parameter is not documented because the member is obsolete. 

</param>
<param name="state">
This parameter is not documented because the member is obsolete. 

</param>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogSingleChannelWriter.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.WriteWaveform(System.Boolean,NationalInstruments.AnalogWaveform`1)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="7/2/2006 1:04:16 PM" niupdatedby="Sebastius" nidisplayname="WriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.AnalogWaveform`1,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="7/2/2006 1:04:16 PM" niupdatedby="Sebastius" nidisplayname="BeginWriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.AnalogWaveform`1,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <exclude />
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogMultiChannelReader" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogMultiChannelReader" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for reading samples from one or more analog input channels in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogMultiChannelReader" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.AnalogMultiChannelReader" /> class to read from the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to read.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for readers to access the samples generated by that task. 
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.ReadSingleSample" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Reads a single floating-point sample from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.</summary>
<returns>A 1D array of floating-point samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.ReadMultiSample(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSample" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>Reads one or more floating-point samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of floating-point samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSample" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single floating-point sample from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadSingleSample(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 


</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadSingleSample(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSample" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of floating-point samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadSingleSample(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadSingleSample(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSample" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more floating-point samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadMultiSample(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 


</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadMultiSample(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSample" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" /> .</param>
<returns>A 2D array of floating-point samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadMultiSample(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadMultiSample(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogMultiChannelReader.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.ReadWaveformDouble(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="ReadWaveformDouble" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.AnalogWaveform[]">
      <summary>This member is obsolete. Use the <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.ReadWaveform(System.Int32)" /> method to achieve the same functionality.</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="samplesPerChannel">
This parameter is not documented because the member is obsolete. 

</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.ReadWaveform(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadWaveform" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]][]">
      <summary>Reads one or more analog waveform samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1" /> objects containing samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
The data returned from analog waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadWaveformDouble(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="BeginReadWaveformDouble" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>
This member is obsolete. Use the <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" /> method to achieve the same functionality.
</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="samplesPerChannel">
This parameter is not documented because the member is obsolete. 

</param>
<param name="callback">
This parameter is not documented because the member is obsolete. 

</param>
<param name="state">
This parameter is not documented because the member is obsolete. 

</param>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadWaveformDouble(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="EndReadWaveformDouble" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.AnalogWaveform[]">
      <summary>
This member is obsolete. Use the <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadWaveform(System.IAsyncResult)" /> method to achieve the same functionality.</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="asyncResult">
This parameter is not documented because the member is obsolete. 

</param>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" />
					is
					<see langword="null" />
					or is not an instance of
					<see cref="T:System.IAsyncResult" />
					returned from a call to
					<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" />.

					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadWaveform" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more analog waveform samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadWaveform(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>The data returned from analog waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadWaveform(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadWaveform" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]][]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1" /> objects containing samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndReadWaveform(System.IAsyncResult)" /> before the asynchronous read <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadWaveform(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogMultiChannelReader.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.MemoryOptimizedReadWaveform(System.Int32,NationalInstruments.AnalogWaveform{System.Double}[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data" niparametertypes="System.Int32,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]][]">
      <summary>Reads one or more analog waveform samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="data">
An initialized 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1" /> that contains the read data.  Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing <see cref="T:NationalInstruments.AnalogWaveform`1" /> objects and their corresponding memory to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
The data returned from analog waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double}[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more analog waveform samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">
An initialized 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1" /> that contains the read data.  Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing <see cref="T:NationalInstruments.AnalogWaveform`1" /> objects and their corresponding memory to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double}[])" />, call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>The data returned from analog waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.MemoryOptimizedReadMultiSample(System.Int32,System.Double[0:,0:]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32!System.Runtime.CompilerServices.IsLong@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,policy,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.Double[,],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>
Reads one or more floating-point samples from one or more
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel"> The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  
		 </param>
<param name="data">An initialized 2D array of floating-point samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns> 
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.MemoryOptimizedReadMultiSample(System.Int32,System.Double[0:,0:]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,policy,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.Double[,],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>
Reads one or more floating-point samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

				</param>
<param name="data">An initialized 2D array of floating-point samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.MemoryOptimizedReadMultiSample(System.Int32,System.Double[0:,0:]@,System.Int32!System.Runtime.CompilerServices.IsLong@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.Double[,],out System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>
Reads one or more floating-point samples from one or more
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="data">An initialized 2D array of floating-point samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>
.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.MemoryOptimizedReadMultiSample(System.Int32,System.Double[0:,0:]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.Double[,],out System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>
Reads one or more floating-point samples from one or more
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="data">An initialized 2D array of floating-point samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>
.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.MemoryOptimizedReadWaveform(System.Int32,NationalInstruments.AnalogWaveform{System.Double}[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,policy" niparametertypes="System.Int32,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]][]">
      <summary>Reads one or more analog waveform samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.				</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="data">
					An initialized 1D array of
					<see cref="T:NationalInstruments.AnalogWaveform`1" />
					that contains the read data.  Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
					<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
					
				</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
						If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing
						<see cref="T:NationalInstruments.AnalogWaveform`1" />
						objects and their corresponding memory to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						The data returned from analog waveform reads is affected by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" />
						property of the
						<see cref="T:NationalInstruments.DAQmx.DaqStream" />
						you are reading from.
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[,],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous  read of one or more floating-point samples from one or more
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify<see langword="null" />if you do not want a callback when the read is complete.				</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify<see langword="null" />if you do not need to pass any additional information to the callback.				</param>
<param name="data">An initialized 2D array of floating-point samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndMemoryOptimizedReadMultiSample(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
						
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[,]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous  read of one or more floating-point samples from one or more
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" />you are reading from.  				</param>
<param name="callback">
					An optional asynchronous callback that is called when the read is complete.  Specify
					<see langword="null" />
					if you do not want a callback when the read is complete.
				</param>
<param name="state">
					A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify
					<see langword="null" />
					if you do not need to pass any additional information to the callback.
				</param>
<param name="data">An initialized 2D array of floating-point samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndMemoryOptimizedReadMultiSample(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndMemoryOptimizedReadMultiSample(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesPerChannelRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>
					Handles the end of an asynchronous read initiated with
					<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" />
					and retrieves the read samples.
				</summary>
<param name="asyncResult">
					An
					<see cref="T:System.IAsyncResult" />
					that represents an asynchronous call started by calling
					<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" />.
					
				</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A 2D array of floating-point samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
				</returns>
<remarks>
<para>
						If you call
						this method 
						before the asynchronous read
						<see cref="T:System.IAsyncResult" />
						is complete,
						it 
						waits for the read to complete before returning.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double}[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.IAsyncResult">
      <summary>
					Begins an asynchronous read of one or more analog waveform samples from one or more
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					objects in a task.
				</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="callback">
					An optional asynchronous callback that is called when the read is complete.  Specify
					<see langword="null" />
					if you do not want a callback when the read is complete.
				</param>
<param name="state">
					A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify
					<see langword="null" />
					if you do not need to pass any additional information to the callback.
				</param>
<param name="data">
					An initialized 1D array of
					<see cref="T:NationalInstruments.AnalogWaveform`1" />
					that contains the read data.  Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
					<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
					
				</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
						If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing
						<see cref="T:NationalInstruments.AnalogWaveform`1" />
						objects and their corresponding memory to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
					</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double}[])" />
						, call
						<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
						
					</para>
<para>
						NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						The data returned from analog waveform reads is affected by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" />
						property of the
						<see cref="T:NationalInstruments.DAQmx.DaqStream" />
						you are reading from.
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]][]">
      <summary>
					Handles the end of an asynchronous read initiated with
					<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double}[])" />
					and retrieves the read samples.
				</summary>
<param name="asyncResult">
					An
					<see cref="T:System.IAsyncResult" />
					that represents an asynchronous call started by calling
					<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double}[])" />
					.
				</param>
<returns>
					A 1D array of
					<see cref="T:NationalInstruments.AnalogWaveform`1" />
					objects containing samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
					<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
									</returns>
<remarks>
<para>
						If you call
						<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" />
						before the asynchronous read
						<see cref="T:System.IAsyncResult" />
						is complete,
						<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" />
						waits for the read to complete before returning.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
											</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double}[])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogSingleChannelReader" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogSingleChannelReader" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for reading samples from the analog input channel in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogSingleChannelReader" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.AnalogSingleChannelReader" /> class to read from the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to read.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for readers to access the samples generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.ReadSingleSample" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Reads a single floating-point sample from a single <see cref="T:NationalInstruments.DAQmx.AIChannel" /> in a task.</summary>
<returns>A single floating-point sample from the task.</returns>
<remarks>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.ReadMultiSample(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSample" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.Double[]">
      <summary>Reads one or more floating-point samples from a single <see cref="T:NationalInstruments.DAQmx.AIChannel" /> in a task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of floating-point samples from the task. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSample" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single floating-point sample from a single <see cref="T:NationalInstruments.DAQmx.AIChannel" /> in a task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadSingleSample(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadSingleSample(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSample" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" />.</param>
<returns>A single floating-point sample from the task.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadSingleSample(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadSingleSample(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadSingleSample(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSample" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more floating-point samples from a single <see cref="T:NationalInstruments.DAQmx.AIChannel" /> in a task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadMultiSample(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadMultiSample(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSample" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of floating-point samples from the task. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadMultiSample(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadMultiSample(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" /> .</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogSingleChannelReader.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.ReadWaveformDouble(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="ReadWaveformDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.AnalogWaveform">
      <summary>This member is obsolete. Use the <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.ReadWaveform(System.Int32)" /> method to achieve the same functionality.
</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="numberOfSamples">
This parameter is not documented because the member is obsolete. 

</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.ReadWaveform(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadWaveform" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
      <summary>Reads one or more analog waveform samples from a single <see cref="T:NationalInstruments.DAQmx.AIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>An <see cref="T:NationalInstruments.AnalogWaveform`1" /> containing samples from the task.</returns>
<remarks>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>The data returned from analog waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadWaveformDouble(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="BeginReadWaveformDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>This member is obsolete. Use the <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" /> method to achieve the same functionality.
</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="numberOfSamples">
This parameter is not documented because the member is obsolete. 

</param>
<param name="callback">
This parameter is not documented because the member is obsolete. 

</param>
<param name="state">
This parameter is not documented because the member is obsolete. 

</param>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadWaveformDouble(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="5/22/2012 8:56:09 AM" niupdatedby="Sebastius" nidisplayname="EndReadWaveformDouble" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.AnalogWaveform">
      <summary>
This member is obsolete. Use the <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadWaveform(System.IAsyncResult)" /> method to achieve the same functionality.</summary>
<returns>The return value  is not documented because the member is obsolete. 
</returns>
<param name="asyncResult">
This parameter is not documented because the member is obsolete. 

</param>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" />
					is
					<see langword="null" />
					or is not an instance of
					<see cref="T:System.IAsyncResult" />
					returned from a call to
					<see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" />.

					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadWaveform" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more analog waveform samples from a single <see cref="T:NationalInstruments.DAQmx.AIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadWaveform(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>The data returned from analog waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadWaveform(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadWaveform" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>An <see cref="T:NationalInstruments.AnalogWaveform`1" /> containing samples from the task. 
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadWaveform(System.IAsyncResult)" /> before the asynchronous read is complete, <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndReadWaveform(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogSingleChannelReader.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.MemoryOptimizedReadWaveform(System.Int32,NationalInstruments.AnalogWaveform{System.Double})" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="numberOfSamples,data" niparametertypes="System.Int32,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
      <summary>Reads one or more analog waveform samples from a single <see cref="T:NationalInstruments.DAQmx.AIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="data">
An initialized <see cref="T:NationalInstruments.AnalogWaveform`1" /> that contains the read data.
</param>
<returns>An <see cref="T:NationalInstruments.AnalogWaveform`1" /> containing samples from the task.</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing <see cref="T:NationalInstruments.AnalogWaveform`1" /> objects and their corresponding memory to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>The data returned from analog waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double})" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more analog waveform samples from a single <see cref="T:NationalInstruments.DAQmx.AIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">
An initialized <see cref="T:NationalInstruments.AnalogWaveform`1" /> that contains the read data.
</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing <see cref="T:NationalInstruments.AnalogWaveform`1" /> objects and their corresponding memory to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double})" />, call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>The data returned from analog waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.MemoryOptimizedReadMultiSample(System.Int32,System.Double[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32!System.Runtime.CompilerServices.IsLong@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Double[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Reads one or more floating-point samples from a single
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					in a task.

</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of floating-point samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.MemoryOptimizedReadMultiSample(System.Int32,System.Double[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Double[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Reads one or more floating-point samples from a single
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					in a task.

</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of floating-point samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.MemoryOptimizedReadMultiSample(System.Int32,System.Double[]@,System.Int32!System.Runtime.CompilerServices.IsLong@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Double[],out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Reads one or more floating-point samples from a single
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					in a task.

</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of floating-point samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.MemoryOptimizedReadMultiSample(System.Int32,System.Double[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Double[],out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Reads one or more floating-point samples from a single
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="data">An initialized 1D array of floating-point samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.MemoryOptimizedReadWaveform(System.Int32,NationalInstruments.AnalogWaveform{System.Double},NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy" niparametertypes="System.Int32,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
      <summary>Reads one or more analog waveform samples from a single<see cref="T:NationalInstruments.DAQmx.AIChannel" />in a task.				</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				 </param>
<param name="data">
					An initialized 
					<see cref="T:NationalInstruments.AnalogWaveform`1" />
					that contains the read data.
				</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
					An
					<see cref="T:NationalInstruments.AnalogWaveform`1" />
					containing samples from the task.
				</returns>
<remarks>
<para>
						If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing
						<see cref="T:NationalInstruments.AnalogWaveform`1" />
						objects and their corresponding memory to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						The data returned from analog waveform reads is affected by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" />
						property of the
						<see cref="T:NationalInstruments.DAQmx.DaqStream" />
						you are reading from.
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous read of one or more floating-point samples from a single
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">
					An optional asynchronous callback that is called when the read is complete.  Specify
					<see langword="null" />
					if you do not want a callback when the read is complete.
				</param>
<param name="state">
					A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify
					<see langword="null" />
					if you do not need to pass any additional information to the callback.
				</param>
<param name="data">An initialized 1D array of floating-point samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndMemoryOptimizedReadMultiSample(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
						
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous read of one or more floating-point samples from a single
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					in a task.

</summary>
<param name="numberOfSamples">The number of samples to read. If you set
					<paramref name="numberOfSamples" />
					to
					<entity value="ndash" />
					1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set
					<paramref name="numberOfSamples" />
					to
					<entity value="ndash" />
					1 for a finite acquisition, the read behavior is set by the
					<see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" />
					property of the
					<see cref="T:NationalInstruments.DAQmx.DaqStream" />
					you are reading from. Setting
					<paramref name="numberOfSamples" />
					to
					<entity value="ndash" />
					1 returns all available samples or 2
					<format type="superscript">31</format><entity value="ndash" />
					1 samples, whichever is smaller. 
</param>
<param name="callback">
					An optional asynchronous callback that is called when the read is complete.  Specify
					<see langword="null" />
					if you do not want a callback when the read is complete.
				</param>
<param name="state">
					A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify
					<see langword="null" />
					if you do not need to pass any additional information to the callback.
				</param>
<param name="data">An initialized 1D array of floating-point samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndMemoryOptimizedReadMultiSample(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
						
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndMemoryOptimizedReadMultiSample(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSample" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
					Handles the end of an asynchronous read initiated with
					<see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[])" />
					and retrieves the read samples.
				</summary>
<param name="asyncResult">
					An
					<see cref="T:System.IAsyncResult" />
					that represents an asynchronous call started by calling
					<see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A 1D array of floating-point samples that contains the read data. Each element in the array corresponds to a sample from the channel.
				</returns>
<remarks>
<para>
						If you call
						this method
						before the asynchronous read is complete, it waits for the read to complete before returning.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadMultiSample(System.Int32,System.AsyncCallback,System.Object,System.Double[])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double},NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform`1" nireturnvaluetype="System.IAsyncResult">
      <summary>
					Begins an asynchronous read of one or more analog waveform samples from a single
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					in a task.
				</summary>
<param name="numberOfSamples">
					The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  
				</param>
<param name="callback">
					An optional asynchronous callback that is called when the read is complete.  Specify
					<see langword="null" />
					if you do not want a callback when the read is complete.
				</param>
<param name="state">
					A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify
					<see langword="null" />
					if you do not need to pass any additional information to the callback.
				</param>
<param name="data">
					An initialized 
					<see cref="T:NationalInstruments.AnalogWaveform`1" />
					that contains the read data.
				</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
					An
					<see cref="T:System.IAsyncResult" />
					that represents the asynchronous call.
				</returns>
<remarks>
<para>
						If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing
						<see cref="T:NationalInstruments.AnalogWaveform`1" />
						objects and their corresponding memory to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
					</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						<see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double})" />
						, call
						<see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
						
					</para>
<para>
						NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						The data returned from analog waveform reads is affected by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" />
						property of the
						<see cref="T:NationalInstruments.DAQmx.DaqStream" />
						you are reading from.
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadWaveform" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.AnalogWaveform`1[[System.Double, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]">
      <summary>
					Handles the end of an asynchronous read initiated with
					<see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double})" />
					and retrieves the read samples.
				</summary>
<param name="asyncResult">
					An
					<see cref="T:System.IAsyncResult" />
					that represents an asynchronous call started by calling
					<see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double})" />.
					
				</param>
<returns>
					An
					<see cref="T:NationalInstruments.AnalogWaveform`1" />
					containing samples from the task.
				</returns>
<remarks>
<para>
						If you call
						<see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" />
						before the asynchronous read is complete,
						<see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.EndMemoryOptimizedReadWaveform(System.IAsyncResult)" />
						waits for the read to complete before returning.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.AnalogSingleChannelReader.BeginMemoryOptimizedReadWaveform(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.AnalogWaveform{System.Double})" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.CounterReader" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterReader" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for reading samples from one or more counter input channels in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterReader" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.CounterReader" /> class to read from the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to read.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for readers to access the samples generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadSingleSampleDouble" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Reads a single floating-point sample from a counter task.</summary>
<returns>A floating-point sample from the task. NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</returns>
<remarks>
Use this method when counter samples are scaled to a floating-point value, such as for frequency and period measurement.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadSingleSampleInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Reads a 32-bit integer sample from a counter task.</summary>
<returns>A 32-bit integer sample from the task.</returns>
<remarks>
Use this method when counter samples are returned unscaled, such as for event counting.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadSingleSampleUInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32">
      <summary>Reads a 32-bit unsigned integer sample from a counter task.</summary>
<returns>A 32-bit unsigned integer sample from the task.</returns>
<remarks>
Use this method when counter samples are returned unscaled, such as for event counting.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadMultiSampleDouble(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.Double[]">
      <summary>Reads one or more floating-point samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of floating-point samples from the task. Each element in the array corresponds to a sample from the channel.
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</returns>
<remarks>
<para>
Use this method when counter samples are scaled to a floating-point value, such as for frequency and period measurement.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadMultiSampleInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>Reads one or more 32-bit integer samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of 32-bit integer samples from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadMultiSampleUInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>Reads one or more 32-bit unsigned integer samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of 32-bit unsigned integer samples from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single floating-point sample from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are scaled to a floating-point value, such as for frequency and period measurement.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleDouble(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A floating-point sample from the task. NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a 32-bit integer sample from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 32-bit integer sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a 32-bit unsigned integer sample from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 32-bit unsigned integer sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more floating-point samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are scaled to a floating-point value, such as for frequency and period measurement.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleDouble(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of floating-point samples from the task. Each element in the array corresponds to a sample from the channel.
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 32-bit integer samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 32-bit integer samples from the task. Each element of the array corresponds to a sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 32-bit unsigned integer samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 32-bit unsigned integer samples from the task. Each element of the array corresponds to a sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.CounterReader.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.CounterReader.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadSingleSamplePulseFrequency" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency">
      <summary>Reads a pulse sample in terms of frequency from a counter task.</summary>
<returns>A pulse sample in terms of frequency from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadSingleSamplePulseTime" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePulseTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime">
      <summary>Reads a pulse sample in terms of time from a counter task.</summary>
<returns>A pulse sample in terms of time from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadSingleSamplePulseTicks" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePulseTicks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks">
      <summary>Reads a pulse sample in terms of ticks from a counter task.</summary>
<returns>A pulse sample in terms of ticks from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadMultiSamplePulseFrequency(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>Reads one or more pulse samples in terms of frequency from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of pulse samples in terms of frequency from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadMultiSamplePulseTime(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>Reads one or more pulse samples in terms of time from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of pulse samples in terms of time from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.ReadMultiSamplePulseTicks(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>Reads one or more pulse samples in terms of ticks from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of pulse samples in terms of ticks from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseFrequency(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single pulse sample in terms of frequency from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseFrequency(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseFrequency(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseFrequency(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseFrequency(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseFrequency(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseFrequency(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseFrequency(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A pulse sample in terms of frequency from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTime(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePulseTime" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single pulse sample in terms of time from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTime(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseTime(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseTime(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePulseTime" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTime(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTime(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseTime(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseTime(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A pulse sample in terms of time from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTicks(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePulseTicks" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single pulse sample in terms of ticks from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTicks(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseTicks(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseTicks(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePulseTicks" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTicks(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTicks(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseTicks(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSamplePulseTicks(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A pulse sample in terms of ticks from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more pulse samples in terms of frequency from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseFrequency(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseFrequency(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of pulse samples in terms of frequency from the task. Each element in the array corresponds to a sample from the channel.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseFrequency(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseFrequency(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more pulse samples in terms of time from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseTime(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseTime(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of pulse samples in terms of time from the task. Each element in the array corresponds to a sample from the channel.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseTime(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseTime(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more pulse samples in terms of ticks from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseTicks(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseTicks(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of pulse samples in terms of ticks from the task. Each element in the array corresponds to a sample from the channel.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseTicks(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadMultiSamplePulseTicks(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSampleDouble(System.Int32,System.Double[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Double[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Reads one or more <see cref="T:System.Double" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSampleDouble(System.Int32,System.Double[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Double[],out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Reads one or more <see cref="T:System.Double" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSampleInt32(System.Int32,System.Int32[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Int32[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>
Reads one or more <see cref="T:System.Int32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>	A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSampleInt32(System.Int32,System.Int32[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Int32[],out System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>
Reads one or more <see cref="T:System.Int32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>	A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSampleUInt32(System.Int32,System.UInt32[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.UInt32[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>
Reads one or more <see cref="T:System.UInt32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSampleUInt32(System.Int32,System.UInt32[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.UInt32[],out System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>
Reads one or more <see cref="T:System.UInt32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,NationalInstruments.DAQmx.CIDataFrequency[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataFrequency[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,NationalInstruments.DAQmx.CIDataFrequency[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataFrequency[],out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSamplePulseTime(System.Int32,NationalInstruments.DAQmx.CIDataTime[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataTime[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>	A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSamplePulseTime(System.Int32,NationalInstruments.DAQmx.CIDataTime[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataTime[],out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSamplePulseTicks(System.Int32,NationalInstruments.DAQmx.CIDataTicks[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataTicks[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.MemoryOptimizedReadMultiSamplePulseTicks(System.Int32,NationalInstruments.DAQmx.CIDataTicks[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataTicks[],out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns> A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description>
</item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:System.Double" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback this is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:System.Double" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Int32[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:System.Int32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Int32[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:System.Int32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.UInt32[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous memory-optimized read of one or more <see cref="T:System.UInt32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete. </param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" />
if you do not need to pass any additional information to the callback. </param>
<param name="data">An initialized 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.UInt32[]" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous memory-optimized read of one or more <see cref="T:System.UInt32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete. </param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" />
if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseFrequency(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" /> if you do not need to pass any additional information to the callback. </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseFrequency(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task. </summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" />
if you do not need to pass any additional information to the callback. </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseTime(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" />
in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.	</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" /> if you do not need to pass any additional information to the callback. </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseTime(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseTicks(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" />
in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify	<see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseTicks(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseFrequency(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseTime(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterReader.EndMemoryOptimizedReadMultiSamplePulseTicks(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number">
<item>
<description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description>
</item>
<item>
<description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description>
</item>
<item>
<description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description>
</item>
<item>
<description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[])" />.</description>
</item>
</list>
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalMultiChannelWriter" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalMultiChannelWriter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for writing samples to one or more digital output channels in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalMultiChannelWriter" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.DigitalMultiChannelWriter" /> class to write to the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to write to.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for writers to provide samples to be generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteSingleSampleSingleLine(System.Boolean,System.Boolean[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Boolean[]" nireturnvaluetype="System.Void">
      <summary>Writes a single Boolean sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of Boolean samples to write to the task. Each element of the array corresponds to a channel within the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>This method fails if the channels in the task contain more than one digital line.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteSingleSampleMultiLine(System.Boolean,System.Boolean[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Boolean[,]" nireturnvaluetype="System.Void">
      <summary>Writes a Boolean sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. The channels can contain one or more digital lines.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of Boolean samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a line in that channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteSingleSamplePort(System.Boolean,System.UInt32[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt32[]" nireturnvaluetype="System.Void">
      <summary>Writes a single 32-bit unsigned integer sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">32-bit unsigned integer samples</see> to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this method for devices with up to 32 lines per port.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteSingleSamplePort(System.Boolean,System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int32[]" nireturnvaluetype="System.Void">
      <summary>Writes a single 32-bit integer sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of 32-bit integer samples to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this method for devices with up to 32 lines per port.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteSingleSamplePort(System.Boolean,System.Byte[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Byte[]" nireturnvaluetype="System.Void">
      <summary>Writes a single 8-bit unsigned integer sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">8-bit unsigned integer samples</see> to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this method for devices with up to eight lines per port.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteMultiSamplePort(System.Boolean,System.UInt32[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt32[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 32-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">32-bit unsigned integer samples</see> to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this method for devices with up to 32 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteMultiSamplePort(System.Boolean,System.Int32[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int32[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 32-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. </summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">32-bit unsigned integer samples</see> to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this method for devices with up to 32 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteMultiSamplePort(System.Boolean,System.Byte[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Byte[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 8-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">8-bit unsigned integer samples</see> to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.
</param>
<remarks>
Use this method for devices with up to eight lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Boolean[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single Boolean sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of Boolean samples to write to the task. Each element of the array corresponds to a channel within the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>This method fails if the channels in the task contain more than one digital line.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Boolean[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a Boolean sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. The channels can contain one or more digital lines.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of Boolean samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a line in that channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt32[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 32-bit unsigned integer sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">32-bit unsigned integer samples</see> to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.Int32[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int32[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 32-bit integer sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of 32-bit integer samples to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.Byte[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Byte[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 8-bit unsigned integer sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">8-bit unsigned integer samples</see> to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to eight lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt32[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 32-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">32-bit unsigned integer samples</see> to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.Int32[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int32[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 32-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. </summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of 32-bit integer samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method 
for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.Byte[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Byte[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 8-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of 8-bit integer samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.
</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para> Use this method for devices with up to 8 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndWrite" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Void">
      <summary>Handles the end of an asynchronous write initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[0:,0:],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[0:,0:],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" />, or <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform[],System.AsyncCallback,System.Object)" />.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[0:,0:],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[0:,0:],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" />, or <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform[],System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> before the asynchronous write represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> waits for the write to complete before returning.  For a write to a buffered task, the write is considered complete when all of the written samples have been transferred to the task buffer.  Use <see cref="P:NationalInstruments.DAQmx.Task.IsDone" /> or <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.Int32)" /> on the <see cref="T:NationalInstruments.DAQmx.Task" /> object to determine if a task has generated all of the data it was configured to generate.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[0:,0:],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[0:,0:],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" />, or <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform[],System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.IndexOutOfRangeException">The data passed to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[0:,0:],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[0:,0:],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" />, or <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform[],System.AsyncCallback,System.Object)" /> has a non-zero lower bound.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalMultiChannelWriter.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteSingleSamplePort(System.Boolean,System.Int16[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int16[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 16-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. </summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of 16-bit integer samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this method for devices with up to 16 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteSingleSamplePort(System.Boolean,System.UInt16[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt16[]" nireturnvaluetype="System.Void">
      <summary>Writes a single 16-bit unsigned integer sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">16-bit unsigned integer samples</see> to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this method for devices with up to 16 lines per port.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteMultiSamplePort(System.Boolean,System.Int16[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int16[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 16-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. </summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">16-bit unsigned integer samples</see> to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this format for devices with up to 16 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteMultiSamplePort(System.Boolean,System.UInt16[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt16[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 16-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">16-bit unsigned integer samples</see> to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>
Use this method for devices with up to 16 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.Int16[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int16[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 16-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. </summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of 16-bit integer samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt16[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt16[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 16-bit unsigned integer sample to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">16-bit unsigned integer samples</see> to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.Int16[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int16[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 16-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. </summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of 16-bit integer samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method 
for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt16[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt16[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 16-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digitaldata.html');">16-bit unsigned integer samples</see> to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array correspond to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.WriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DigitalWaveform[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more digital waveform samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of <see cref="T:NationalInstruments.DigitalWaveform" /> objects to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the digital waveform corresponds to the order in which you add the lines to the channel.</param>
<remarks>
If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>Digital waveform writes are not affected by the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval" /> or <see cref="P:NationalInstruments.WaveformTiming.StartTime" /> properties on the <see cref="T:NationalInstruments.DigitalWaveform" />.  To configure timing for digital waveform writes, use the <see cref="Overload:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> method.</para><para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DigitalWaveform[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more digital waveform samples to one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of <see cref="T:NationalInstruments.DigitalWaveform" /> objects to write to the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the digital waveform corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Digital waveform writes are not affected by the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval" /> or <see cref="P:NationalInstruments.WaveformTiming.StartTime" /> properties on the <see cref="T:NationalInstruments.DigitalWaveform" />.  To configure timing for digital waveform writes, use the <see cref="Overload:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> method.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalMultiChannelWriter.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalSingleChannelWriter" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalSingleChannelWriter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for writing samples to the digital output channel in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalSingleChannelWriter" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.DigitalSingleChannelWriter" /> class to write to the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to write to.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for writers to provide samples to be generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteSingleSampleSingleLine(System.Boolean,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Writes a single Boolean sample to a single digital line in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. The task can contain only a single digital line.
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A Boolean sample to write to the task.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteSingleSampleMultiLine(System.Boolean,System.Boolean[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Boolean[]" nireturnvaluetype="System.Void">
      <summary>Writes a single Boolean sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. The channel can contain multiple digital lines.
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a digital line within the channel.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteSingleSamplePort(System.Boolean,System.UInt32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt32" nireturnvaluetype="System.Void">
      <summary>Writes a single 32-bit unsigned integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Use this method for devices with up to 32 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteSingleSamplePort(System.Boolean,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int32" nireturnvaluetype="System.Void">
      <summary>Writes a single 32-bit integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Use this method for devices with up to 32 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteSingleSamplePort(System.Boolean,System.Byte)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Byte" nireturnvaluetype="System.Void">
      <summary>Writes a single 8-bit unsigned integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Use this method for devices with up to eight lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteMultiSamplePort(System.Boolean,System.UInt32[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt32[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 32-bit unsigned integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task.</param>
<remarks>
Use this method for devices with up to 32 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteMultiSamplePort(System.Boolean,System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int32[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 32-bit integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task.</param>
<remarks>
Use this method for devices with up to 32 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteMultiSamplePort(System.Boolean,System.Byte[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Byte[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 8-bit unsigned integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task.</param>
<remarks>
Use this method for devices with up to eight lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Boolean,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single Boolean sample to a single digital line in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. The task can contain only a single digital line.
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A Boolean sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Boolean[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single Boolean sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. The channel can contain multiple digital lines.
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a digital line within the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 32-bit unsigned integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 32-bit integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.Byte,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Byte,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 8-bit unsigned integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt32[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 32-bit unsigned integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.Int32[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int32[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 32-bit integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.Byte[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Byte[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 8-bit unsigned integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to eight lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndWrite" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Void">
      <summary>Handles the end of an asynchronous write initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32,System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean,System.AsyncCallback,System.Object)" />, or <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform,System.AsyncCallback,System.Object)" />.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32,System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean,System.AsyncCallback,System.Object)" />, or <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> before the asynchronous write represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> waits for the write to complete before returning.  For a write to a buffered task, the write is considered complete when all of the written samples have been transferred to the task buffer.  Use <see cref="P:NationalInstruments.DAQmx.Task.IsDone" /> or <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.Int32)" /> on the <see cref="T:NationalInstruments.DAQmx.Task" /> object to determine if a task has generated all of the data it was configured to generate.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt32,System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" />, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleSingleLine(System.Boolean,System.Boolean,System.AsyncCallback,System.Object)" />, or <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.IndexOutOfRangeException">The data passed to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt32[],System.AsyncCallback,System.Object)" /> or <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSampleMultiLine(System.Boolean,System.Boolean[],System.AsyncCallback,System.Object)" /> had a non-zero lower bound.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalSingleChannelWriter.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteSingleSamplePort(System.Boolean,System.Int16)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int16" nireturnvaluetype="System.Void">
      <summary>Writes a single 16-bit integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Use this method for devices with up to 16 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteSingleSamplePort(System.Boolean,System.UInt16)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt16" nireturnvaluetype="System.Void">
      <summary>Writes a single 16-bit unsigned integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Use this method for devices with up to 16 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteMultiSamplePort(System.Boolean,System.Int16[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int16[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 16-bit integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task.</param>
<remarks>
Use this method for devices with up to 16 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteMultiSamplePort(System.Boolean,System.UInt16[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt16[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more 16-bit unsigned integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task.</param>
<remarks>
Use this method for devices with up to 16 lines per port.  If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.Int16,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int16,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 16-bit integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteSingleSamplePort(System.Boolean,System.UInt16,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt16,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single 16-bit unsigned integer sample to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.Int16[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int16[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 32-bit integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteMultiSamplePort(System.Boolean,System.UInt16[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSamplePort" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt16[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more 16-bit unsigned integer samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>. 
</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.WriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DigitalWaveform" nireturnvaluetype="System.Void">
      <summary>Writes one or more digital waveform samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A <see cref="T:NationalInstruments.DigitalWaveform" /> to write to the task. The order of the lines in the digital waveform corresponds to the order in which you add the lines to the channel.</param>
<remarks>
If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>Digital waveform writes are not affected by the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval" /> or <see cref="P:NationalInstruments.WaveformTiming.StartTime" /> properties on the <see cref="T:NationalInstruments.DigitalWaveform" />.  To configure timing for digital waveform writes, use the <see cref="Overload:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> method.</para><para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para><para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.BeginWriteWaveform(System.Boolean,NationalInstruments.DigitalWaveform,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteWaveform" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DigitalWaveform,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more digital waveform samples to a single <see cref="T:NationalInstruments.DAQmx.DOChannel" /> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A <see cref="T:NationalInstruments.DigitalWaveform" /> to write to the task. The order of the lines in the digital waveform corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>Digital waveform writes are not affected by the <see cref="P:NationalInstruments.WaveformTiming.SampleInterval" /> or <see cref="P:NationalInstruments.WaveformTiming.StartTime" /> properties on the <see cref="T:NationalInstruments.DigitalWaveform" />.  To configure timing for digital waveform writes, use the <see cref="Overload:NationalInstruments.DAQmx.Timing.ConfigureSampleClock" /> method.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>This method returns immediately if the output buffer has sufficient space for the samples.  Otherwise, the call is blocked until the application generates enough samples to fit the new data into the output buffer. </para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalSingleChannelWriter.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalMultiChannelReader" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalMultiChannelReader" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for reading samples from one or more digital input or output channels in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalMultiChannelReader" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.DigitalMultiChannelReader" /> class to read from the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to read.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for readers to access the samples generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadSingleSampleSingleLine" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean[]">
      <summary>Reads a single Boolean sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task. Each channel can contain a single digital line.</summary>
<returns>A 1D array of Boolean samples from the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 

</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadSingleSampleMultiLine" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean[,]">
      <summary>Reads a single sample containing Boolean values from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task. Each channel can contain multiple digital lines.</summary>
<returns>A 2D array of Boolean samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a line in that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.

</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadSingleSamplePortByte" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortByte" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Byte[]">
      <summary>Reads a single 8-bit unsigned integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<returns>A 1D array of 8-bit unsigned integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>Use this method for devices with up to eight lines per port.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 

</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadSingleSamplePortInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32[]">
      <summary>Reads a single 32-bit integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<returns>A 1D array of 32-bit integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
Use this method for devices with up to 32 lines per port.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 

</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadSingleSamplePortUInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortUInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32[]">
      <summary>Reads a single 32-bit unsigned integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<returns>A 1D array of 32-bit unsigned integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
Use this method for devices with up to 32 lines per port.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadMultiSamplePortByte(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortByte" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Byte[,]">
      <summary>Reads one or more 8-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of 8-bit unsigned integer samples  from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>Use this method for devices with up to eight lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadMultiSamplePortInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Int32[,]">
      <summary>Reads one or more 32-bit integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of 32-bit integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadMultiSamplePortUInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.UInt32[,]">
      <summary>Reads one or more 32-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of 32-bit unsigned integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single Boolean sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task. Each channel can contain a single digital line.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSampleSingleLine(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>The data returned from digital waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSampleSingleLine(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Boolean[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSampleSingleLine(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSampleSingleLine(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of Boolean samples from the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single sample containing Boolean values from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task. Each channel can contain multiple digital lines.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSampleMultiLine(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSampleMultiLine(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Boolean[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of Boolean samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a line in that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSampleMultiLine(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSampleMultiLine(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortByte" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 8-bit unsigned integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortByte(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>Use this method for devices with up to eight lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortByte(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortByte" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Byte[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of 8-bit unsigned integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortByte(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortByte(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 32-bit integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 32-bit integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortUInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 32-bit unsigned integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 32-bit unsigned integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortByte" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 8-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortByte(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>Use this method for devices with up to eight lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortByte(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortByte" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Byte[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of 8-bit unsigned integer samples  from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortByte(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortByte(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 32-bit integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of 32-bit integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 32-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of 32-bit unsigned integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalMultiChannelReader.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadSingleSamplePortInt16" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortInt16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int16[]">
      <summary>Reads a single 16-bit integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<returns>A 1D array of 16-bit integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
Use this method for devices with up to 16 lines per port.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 

</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadSingleSamplePortUInt16" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortUInt16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt16[]">
      <summary>Reads a single 16-bit unsigned integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<returns>A 1D array of 16-bit unsigned integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. </para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadMultiSamplePortInt16(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortInt16" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Int16[,]">
      <summary>Reads one or more 16-bit integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of 16-bit integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadMultiSamplePortUInt16(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortUInt16" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.UInt16[,]">
      <summary>Reads one or more 16-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of 16-bit unsigned integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortInt16" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 16-bit integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int16[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 16-bit integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortUInt16" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 16-bit unsigned integer sample from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortUInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortUInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortUInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt16[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortUInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadSingleSamplePortUInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 16-bit unsigned integer samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortInt16" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 16-bit integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int16[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of 16-bit integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortUInt16" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 16-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortUInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortUInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortUInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt16[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of 16-bit unsigned integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortUInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadMultiSamplePortUInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.ReadWaveform(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadWaveform" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.DigitalWaveform[]">
      <summary>Reads one or more digital waveform samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of <see cref="T:NationalInstruments.DigitalWaveform" /> objects containing samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>The data returned from digital waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadWaveform" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more digital waveform samples from one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadWaveform(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>The data returned from digital waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadWaveform(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadWaveform" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DigitalWaveform[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of <see cref="T:NationalInstruments.DigitalWaveform" /> objects containing samples from the task. Each element in the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadWaveform(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.EndReadWaveform(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalMultiChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalMultiChannelReader.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalSingleChannelReader" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalSingleChannelReader" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for reading samples from the digital input or output channel in a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalSingleChannelReader" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.DigitalSingleChannelReader" /> class to read from the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to read.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for readers to access the samples generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadSingleSampleSingleLine" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Reads a single Boolean sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task. The task can contain only a single digital line.</summary>
<returns>A Boolean sample from the task.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 

</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadSingleSampleMultiLine" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean[]">
      <summary>Reads a single Boolean sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task. The channel can contain multiple digital lines.
</summary>
<returns>A 1D array of Boolean samples from the task. Each element of the array corresponds to a digital line in the channel. 
</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadSingleSamplePortByte" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortByte" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Byte">
      <summary>Reads a single 8-bit unsigned integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<returns>An 8-bit unsigned integer sample from the task. 
</returns>
<remarks>
Use this method for devices with up to eight lines per port.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadSingleSamplePortInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Reads a single 32-bit integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<returns>A 32-bit integer sample from the task. 
</returns>
<remarks>
Use this method for devices with up to 32 lines per port.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadSingleSamplePortUInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortUInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32">
      <summary>Reads a single 32-bit unsigned integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<returns>A 32-bit unsigned integer sample from the task. 
</returns>
<remarks>
Use this method for devices with up to 32 lines per port.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadMultiSamplePortByte(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortByte" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.Byte[]">
      <summary>Reads one or more 8-bit unsigned integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task. </summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of 8-bit unsigned integer samples from the task. Each element in the array corresponds to a sample from the task. 
</returns>
<remarks>
<para>
Use this method for devices with up to eight lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadMultiSamplePortInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>Reads one or more 32-bit integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of 32-bit integer samples from the task. Each element in the array corresponds to a sample from the task. </returns>
<remarks>
<para>
Use this method for devices with up to 32 lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadMultiSamplePortUInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>Reads one or more 32-bit unsigned integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of 32-bit unsigned integer samples from the task. Each element in the array corresponds to a sample from the task.</returns>
<remarks>
<para>
Use this method for devices with up to 32 lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single Boolean sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task. The task can contain only a single digital line.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSampleSingleLine(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSampleSingleLine(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleSingleLine" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Boolean">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSampleSingleLine(System.AsyncCallback,System.Object)" />.</param>
<returns>A Boolean sample from the task.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSampleSingleLine(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSampleSingleLine(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single Boolean sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task. The channel can contain multiple digital lines.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSampleMultiLine(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSampleMultiLine(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleMultiLine" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Boolean[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSampleMultiLine(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSampleMultiLine(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSampleMultiLine(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of Boolean samples from the task. Each element of the array corresponds to a digital line in the channel. 
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortByte" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 8-bit unsigned integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortByte(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to eight lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortByte(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortByte" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Byte">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortByte(System.AsyncCallback,System.Object)" />.</param>
<returns>An 8-bit unsigned integer sample from the task. 
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortByte(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortByte(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 32-bit integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" />, call<see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortInt32(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 32-bit integer sample from the task. 
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortUInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 32-bit unsigned integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 32 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortUInt32(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 32-bit unsigned integer sample from the task. 
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortByte" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 8-bit unsigned integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task. </summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortByte(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to eight lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortByte(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortByte" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Byte[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortByte(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortByte(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 8-bit unsigned integer samples from the task. Each element in the array corresponds to a sample from the task. 

</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortByte(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 32-bit integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 32 lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 32-bit integer samples from the task. Each element in the array corresponds to a sample from the task. </returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 32-bit unsigned integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 32 lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 32-bit unsigned integer samples from the task. Each element in the array corresponds to a sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalSingleChannelReader.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadSingleSamplePortInt16" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortInt16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int16">
      <summary>Reads a single 16-bit integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<returns>A 16-bit integer sample from the task. 
</returns>
<remarks>
Use this method for devices with up to 16 lines per port.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadSingleSamplePortUInt16" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePortUInt16" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt16">
      <summary>Reads a single 16-bit unsigned integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<returns>A 16-bit unsigned integer sample from the task. 
</returns>
<remarks>
Use this method for devices with up to 16 lines per port.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadMultiSamplePortInt16(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortInt16" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.Int16[]">
      <summary>Reads one or more 16-bit integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of 16-bit integer samples from the task. Each element in the array corresponds to a sample from the task. </returns>
<remarks>
<para>
Use this method for devices with up to 16 lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadMultiSamplePortUInt16(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePortUInt16" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.UInt16[]">
      <summary>Reads one or more 16-bit unsigned integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of 16-bit unsigned integer samples from the task. Each element in the array corresponds to a sample from the task.</returns>
<remarks>
<para>
Use this method for devices with up to 16 lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortInt16" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 16-bit integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" />, call<see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int16">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortInt16(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 16-bit integer sample from the task. 
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePortUInt16" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single 16-bit unsigned integer sample from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortUInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 16 lines per port.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortUInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePortUInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt16">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadSingleSamplePortUInt16(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortUInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadSingleSamplePortUInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 16-bit unsigned integer sample from the task. 
</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortInt16" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 16-bit integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 16 lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int16[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 16-bit integer samples from the task. Each element in the array corresponds to a sample from the task. </returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortInt16(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePortUInt16" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more 16-bit unsigned integer samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortUInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method for devices with up to 16 lines per port.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortUInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePortUInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt16[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortUInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadMultiSamplePortUInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of 16-bit unsigned integer samples from the task. Each element in the array corresponds to a sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadMultiSamplePortUInt16(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.ReadWaveform(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadWaveform" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.DigitalWaveform">
      <summary>Reads one or more digital waveform samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A <see cref="T:NationalInstruments.DigitalWaveform" /> containing samples from the task.</returns>
<remarks>
<para>The data returned from digital waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadWaveform" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more digital waveform samples from a single <see cref="T:NationalInstruments.DAQmx.DIChannel" /> in a task.
</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadWaveform(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>The data returned from digital waveform reads is affected by the <see cref="P:NationalInstruments.DAQmx.DaqStream.WaveformAttributeMode" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from. </para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadWaveform(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadWaveform" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DigitalWaveform">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A <see cref="T:NationalInstruments.DigitalWaveform" /> containing samples from the task. 
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadWaveform(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.EndReadWaveform(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.DigitalSingleChannelReader.BeginReadWaveform(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalSingleChannelReader.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.SignalRoutingModifiers" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SignalRoutingModifiers" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies if the signal routed from the source terminal to the destination terminal is <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/inversionSignals.html');">inverted</see>.</summary>
<remarks>If the device is not capable of signal inversion or if a previous route reserved the inversion circuitry in an incompatible configuration, attempting to invert the signal causes an error.</remarks>
</member>
    <member name="F:NationalInstruments.DAQmx.SignalRoutingModifiers.InvertPolarity" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="InvertPolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The signal is <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/inversionSignals.html');">inverted</see>.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIChannelCollection" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AIChannelCollection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains the collection of analog input channels for a <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AIChannels" />
<seealso cref="T:NationalInstruments.DAQmx.AIChannel" />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.GetEnumerator" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetEnumerator" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Collections.IEnumerator">
      <summary>Returns an enumerator that you can use to iterate through the collection.</summary>
<returns>Enumerator for the collection.</returns>
<remarks>
For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> in the Microsoft
.NET Framework documentation.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVoltageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Volt.html');">measure voltage</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<note type="note">
If the measurement requires the use of internal excitation or you need the voltage scaled by the excitation, use <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,System.String)" /> instead.
</note>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVoltageUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVoltageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVoltageUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Volt.html');">measure voltage</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVoltageUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<note type="note">
If the measurement requires the use of internal excitation or you need the voltage scaled by the excitation, use <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,System.String)" /> instead.
</note>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateRtdChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIRtdType,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateRtdChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,type,resistanceConfiguration,currentExcitationSource,currentExcitationValue,r0" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIRtdType,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an  <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/rtd.html');">RTD</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the measurement.</param>
<param name="type">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/RTDTypes.html');">type of RTD</see> connected to the channel. </param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires.</param>
<param name="r0">The sensor resistance in ohms at 0 degrees Celsius for the Callendar-Van Dusen equation. Refer to the sensor documentation for more information about this constant.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateRtdChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIRtdType,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermistorIExChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateThermistorIExChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,resistanceConfiguration,currentExcitationSource,currentExcitationValue,a,b,c" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermistors.html');">thermistor</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see>. Use this method when the thermistor uses current excitation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />. 
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the measurement.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires.</param>
<param name="a">The A constant for the Steinhart-Hart thermistor equation. Consult the sensor documentation to determine the value for this constant.</param>
<param name="b">The B constant for the Steinhart-Hart thermistor equation. Consult the sensor documentation to determine the value for this constant.</param>
<param name="c">The C constant for the Steinhart-Hart thermistor equation. Consult the sensor documentation to determine the value for this constant.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermistorIExChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermistorVExChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateThermistorVExChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,resistanceConfiguration,voltageExcitationSource,voltageExcitationValue,a,b,c,r1" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermistors.html');">thermistor</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see>. Use this method when the thermistor uses voltage excitation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the measurement.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="a">The A constant for the Steinhart-Hart thermistor equation. Consult the sensor documentation to determine the value for this constant.</param>
<param name="b">The B constant for the Steinhart-Hart thermistor equation. Consult the sensor documentation to determine the value for this constant.</param>
<param name="c">The C constant for the Steinhart-Hart thermistor equation. Consult the sensor documentation to determine the value for this constant.</param>
<param name="r1">The value of the dropping resistor, in ohms.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.
</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermistorVExChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateFrequencyVoltageChannel(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateFrequencyVoltageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,thresholdVoltage,hysteresis,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Analog_Freq.html');">measure frequency</see> using a frequency-to-voltage converter. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="thresholdVoltage">The voltage level at which to recognize waveform repetitions. You should select a voltage level that occurs only once within the entire period of a waveform. You also can select a voltage that occurs only once while the voltage rises or falls.</param>
<param name="hysteresis">A window, in volts, below <paramref name="thresholdVoltage" />. The input voltage must pass below <paramref name="thresholdVoltage" /> minus <paramref name="hysteresis" /> before NI-DAQmx recognizes a waveform repetition. Hysteresis can improve the measurement accuracy when the signal contains noise or jitter. 
</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateFrequencyVoltageChannel(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateResistanceChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateResistanceChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,resistanceConfiguration,currentExcitationSource,currentExcitationValue,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Resistance.html');">measure resistance</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateResistanceChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateStrainGageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainGageConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateStrainGageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,strainGageConfiguration,voltageExcitationSource,voltageExcitationValue,gageFactor,initialBridgeVoltage,nominalGageResistance,poissonRatio,leadWireResistance,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainGageConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Strain.html');">measure strain</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="strainGageConfiguration">The bridge configuration of the strain gage. </param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<param name="gageFactor">The sensitivity of the strain gages and relates the change in electrical resistance to the change in strain. Each gage in the bridge must have the same gage factor. Refer to the sensor documentation to determine this value.
</param>
<param name="initialBridgeVoltage">The output voltage of the bridge in the unloaded condition. NI-DAQmx subtracts this value from any measurements before applying scaling equations. Perform a voltage measurement on the bridge with no strain applied to determine this value.</param>
<param name="nominalGageResistance">The resistance in ohms of the gages in an unstrained position. Each gage in the bridge must have the same nominal gage resistance. The resistance across arms of the bridge that do not have strain gages must also be the same as the nominal gage resistance. Refer to the sensor documentation to determine this value.</param>
<param name="poissonRatio">The ratio of lateral strain to axial strain in the material you are measuring.</param>
<param name="leadWireResistance">The amount in ohms of resistance in the lead wires. Ideally, this value is the same for all leads.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateStrainGageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainGageConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVoltageChannelWithExcitation" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,configuration,minimumValue,maximumValue,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,useExcitationForScaling,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to measure voltage for custom sensors that require excitation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="configuration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="bridgeConfiguration">The bridge configuration. If you set <paramref name="bridgeConfiguration" /> to <see cref="F:NationalInstruments.DAQmx.AIBridgeConfiguration.NoBridge" />, <paramref name="useExcitationForScaling" /> has no effect.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<param name="useExcitationForScaling">
<see langword="true" /> if NI-DAQmx divides the measurement by the excitation. Typically, you set <paramref name="useExcitationForScaling" /> to <see langword="true" /> for ratiometric tranducers. If you set <paramref name="useExcitationForScaling" /> to <see langword="true" />, set <paramref name="maximumValue" /> and <paramref name="minimumValue" /> to reflect the scaling. For example, if you expect to acquire a voltage between <entity value="ndash" />5 and 5, and you use an excitation of .10 volts to scale the measurement, set <paramref name="minimumValue" /> to <entity value="ndash" />50 and set <paramref name="maximumValue" /> to 50.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateDeviceTemperatureChannel(System.String,System.String,NationalInstruments.DAQmx.AITemperatureUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateDeviceTemperatureChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITemperatureUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to measure temperature with a built-in sensor of a terminal block or device. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />. The <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateDeviceTemperatureChannel(System.String,System.String,NationalInstruments.DAQmx.AITemperatureUnits)" /> method has been deprecated in favor of the <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateBuiltInSensorTemperatureChannel(System.String,System.String,NationalInstruments.DAQmx.AITemperatureUnits)" /> method. </summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
On SCXI modules, the built-in sensor might be the CJC sensor.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateDeviceTemperatureChannel(System.String,System.String,NationalInstruments.DAQmx.AITemperatureUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannelCollection.Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets the number of elements in the collection.</summary>
<value>The number of elements contained in the collection.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannelCollection.All" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Gets an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that operates on all of the channels in the task.</summary>
<value>An <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that operates on all of the channels in a task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannelCollection.Item(System.String)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="virtualChannelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified virtual channel name. In Visual C#, this property is the indexer.</summary>
<param name="virtualChannelName">One or more virtual channel names that the retrieved <see cref="T:NationalInstruments.DAQmx.AIChannel" /> operates on.</param>
<value>The specified <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</value>
<remarks>By using a comma or colon in <paramref name="virtualChannelName" />, you can retrieve more than one channel at a time. For more information refer to <see keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</see>.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.AIChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateFrequencyVoltageChannel(System.String,System.String,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIFrequencyUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateFrequencyVoltageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,thresholdVoltage,hysteresis,units" niparametertypes="System.String,System.String,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIFrequencyUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Analog_Freq.html');">measure frequency</see> using a frequency-to-voltage converter. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="thresholdVoltage">The voltage level at which to recognize waveform repetitions. You should select a voltage level that occurs only once within the entire period of a waveform. You also can select a voltage that occurs only once while the voltage rises or falls.</param>
<param name="hysteresis">A window, in volts, below <paramref name="thresholdVoltage" />. The input voltage must pass below <paramref name="thresholdVoltage" /> minus <paramref name="hysteresis" /> before NI-DAQmx recognizes a waveform repetition. Hysteresis can improve the measurement accuracy when the signal contains noise or jitter. 
</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateFrequencyVoltageChannel(System.String,System.String,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIFrequencyUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateResistanceChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIResistanceUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateResistanceChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,resistanceConfiguration,currentExcitationSource,currentExcitationValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIResistanceUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Resistance.html');">measure resistance</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to sensor documentation to determine this value.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateResistanceChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIResistanceUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateStrainGageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainGageConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateStrainGageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,strainGageConfiguration,voltageExcitationSource,voltageExcitationValue,gageFactor,initialBridgeVoltage,nominalGageResistance,poissonRatio,leadWireResistance,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainGageConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Strain.html');">measure strain</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="strainGageConfiguration">The bridge configuration of the strain gage. </param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<param name="gageFactor">The sensitivity of the strain gages and relates the change in electrical resistance to the change in strain. Each gage in the bridge must have the same gage factor. Refer to the sensor documentation to determine this value.</param>
<param name="initialBridgeVoltage">The output voltage of the bridge in the unloaded condition. NI-DAQmx subtracts this value from any measurements before applying scaling equations. Perform a voltage measurement on the bridge with no strain applied to determine this value. </param>
<param name="nominalGageResistance">The resistance in ohms of the gages in an unstrained position. Each gage in the bridge must have the same nominal gage resistance. The resistance across arms of the bridge that do not have strain gages must also be the same as the nominal gage resistance. Refer to the sensor documentation to determine this value.</param>
<param name="poissonRatio">The ratio of lateral strain to axial strain in the material you are measuring.
</param>
<param name="leadWireResistance">The amount in ohms of resistance in the lead wires. Ideally, this value is the same for all leads.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateStrainGageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainGageConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,NationalInstruments.DAQmx.AIVoltageUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVoltageChannelWithExcitation" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,configuration,minimumValue,maximumValue,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,useExcitationForScaling,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,NationalInstruments.DAQmx.AIVoltageUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to measure voltage for custom sensors that require excitation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="configuration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="bridgeConfiguration">The bridge configuration. If you set <paramref name="bridgeConfiguration" /> to <see cref="F:NationalInstruments.DAQmx.AIBridgeConfiguration.NoBridge" />, <paramref name="useExcitationForScaling" /> has no effect. </param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<param name="useExcitationForScaling">
<see langword="true" /> if NI-DAQmx divides the measurement by the excitation. Typically, you set <paramref name="useExcitationForScaling" /> to <see langword="true" /> for ratiometric tranducers.  If you set <paramref name="useExcitationForScaling" /> to <see langword="true" />, set <paramref name="maximumValue" /> and <paramref name="minimumValue" /> to reflect the scaling. For example, if you expect to acquire a voltage between <entity value="ndash" />5 and 5, and you use an excitation of .10 volts to scale the measurement, set <paramref name="minimumValue" /> to <entity value="ndash" />50 and set <paramref name="maximumValue" /> to 50.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,NationalInstruments.DAQmx.AIVoltageUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateThermocoupleChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,thermocoupleType,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">thermocouple</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see> using a built-in cold-junction compensation source. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="thermocoupleType">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">type</see> of thermocouple connected to the channel. Thermocouple types differ in composition and measurement range.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateThermocoupleChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,thermocoupleType,units,cjcValue" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">thermocouple</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see> using a constant value cold-junction compensation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="thermocoupleType">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">type</see> of thermocouple connected to the channel. Thermocouple types differ in composition and measurement range.</param>
<param name="units">The units to use to return the temperature measurement.</param>
<param name="cjcValue">The temperature in <paramref name="units" /> of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/sigcontherm.html');">cold-junction</see>.
</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateThermocoupleChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,thermocoupleType,units,cjcChannel" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">thermocouple</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see> using a measurement on another channel for cold-junction compensation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="thermocoupleType">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">type</see>  of thermocouple connected to the channel. Thermocouple types differ in composition and measurement range.</param>
<param name="units">The units to use to return the measurement.</param>&gt;<param name="cjcChannel">The channel that acquires the temperature of the thermocouple <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/sigcontherm.html');">cold-junction</see> if you set <see cref="T:NationalInstruments.DAQmx.AIThermocoupleCjcSource" /> to <see cref="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.Channel" />. You can use a global channel or another virtual channel already in the task. If the channel is a temperature channel, NI-DAQmx acquires the temperature in the correct units. Other channel types, such as a resistance channel with a custom sensor, must use a custom scale to scale values to degrees Celsius.
</param><returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns><remarks><para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para><para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para><para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIThermocoupleType,NationalInstruments.DAQmx.AITemperatureUnits,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para></remarks><exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception></member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with an internal shunt resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
Use this method with devices that have a built-in shunt resistor.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale and an internal shunt  resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
Use this method with devices that have a built-in shunt resistor.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,externalShuntResistorValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified external shunt resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="externalShuntResistorValue">The value in ohms of an external shunt resistor.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
Use this method with devices that do not have a built-in shunt resistor. You must attach an external shunt resistor.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,externalShuntResistorValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale and external shunt resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="externalShuntResistorValue">The value in ohms of an external shunt resistor.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
Use this method with devices that do not have a built-in shunt resistor. You must attach an external shunt resistor.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannelCollection.Item(System.Int64)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="index" niparametertypes="System.Int64" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AIChannel" /> at the specified index. In Visual C#, this property is the indexer.</summary>
<param name="index">The zero-based index of the entry to locate in the collection.</param>
<value>The <see cref="T:NationalInstruments.DAQmx.AIChannel" /> at the specified index.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso cref="T:NationalInstruments.DAQmx.AIChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CopyTo(System.Array,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CopyTo" nihasget="0" nihasset="0" niparameters="array,index" niparametertypes="System.Array,System.Int32" nireturnvaluetype="System.Void">
      <summary>
Copies the collection to an array or a portion of an array.  This operation is not supported for <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="array">
Destination array for the collection.
</param>
<param name="index">
The index in the target array at which you want to begin copying the collection to.
</param>
<exception cref="T:System.NotSupportedException">
This method always throws a <see cref="T:System.NotSupportedException" />.
</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannelCollection.IsSynchronized" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsSynchronized" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannelCollection.SyncRoot" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SyncRoot" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Object">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateBuiltInSensorTemperatureChannel(System.String,System.String,NationalInstruments.DAQmx.AITemperatureUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateBuiltInSensorTemperatureChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITemperatureUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to measure temperature with a built-in sensor of a terminal block or device. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
On SCXI modules, the built-in sensor might be the CJC sensor.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateBuiltInSensorTemperatureChannel(System.String,System.String,NationalInstruments.DAQmx.AITemperatureUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateAccelerometerChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIAccelerationUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateAccelerometerChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,configuration,minimumValue,maximumValue,sensitivity,sensitivityUnits,currentExcitationSource,currentExcitationValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIAccelerationUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/Accelerometers.html');">accelerometer</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/Accel.html');">measure acceleration</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="configuration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amps that the sensor requires.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. </para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateAccelerometerChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIAccelerationUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateAccelerometerChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateAccelerometerChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,configuration,minimumValue,maximumValue,sensitivity,sensitivityUnits,currentExcitationSource,currentExcitationValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/Accelerometers.html');">accelerometer</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/Accel.html');">measure acceleration</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="configuration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units. 
</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amps that the sensor requires.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. </para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateAccelerometerChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateLvdtChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AILvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AILvdtUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateLvdtChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,sensitivity,sensitivityUnits,voltageExcitationSource,voltageExcitationValue,voltageExcitationFrequency,voltageExcitationWireMode,units" niparametertypes="System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AILvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AILvdtUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/LVDTs.html');">LVDT</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/linDisplaceLVDT.html');">measure  linear position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to the sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<param name="voltageExcitationFrequency">The excitation frequency that the sensor requires, in hertz. Refer to the sensor documentation to determine this value.
</param>
<param name="voltageExcitationWireMode">The number of leads on the sensor. Some sensors might require you to tie leads together to create a four- or five-wire sensor. Refer to the documentation for your sensor for more information. 
</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. </para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified. <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateLvdtChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AILvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AILvdtUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateLvdtChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AILvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateLvdtChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,sensitivity,sensitivityUnits,voltageExcitationSource,voltageExcitationValue,voltageExcitationFrequency,voltageExcitationWireMode,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AILvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/LVDTs.html');">LVDT</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/linDisplaceLVDT.html');">measure  linear position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units. 
</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units. 
</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to the sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.
</param>
<param name="voltageExcitationFrequency">The excitation frequency that the sensor requires, in hertz. Refer to the sensor documentation to determine this value.
</param>
<param name="voltageExcitationWireMode">The number of leads on the sensor. Some sensors might require you to tie leads together to create a four- or five-wire sensor. Refer to the documentation for your sensor for more information. 
</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. </para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateLvdtChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AILvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateRvdtChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIRvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AIRvdtUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateRvdtChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,sensitivity,sensitivityUnits,voltageExcitationSource,voltageExcitationValue,voltageExcitationFrequency,voltageExcitationWireMode,units" niparametertypes="System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIRvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AIRvdtUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/RVDTs.html');">RVDT</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/angDisplaceRVDT.html');">measure angular position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to the sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<param name="voltageExcitationFrequency">The excitation frequency that the sensor requires, in hertz. Refer to the sensor documentation to determine this value.
</param>
<param name="voltageExcitationWireMode">The number of leads on the sensor. Some sensors might require you to tie leads together to create a four- or five-wire sensor. Refer to the documentation for your sensor for more information. 
</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. </para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateRvdtChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIRvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AIRvdtUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateRvdtChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIRvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateRvdtChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,sensitivity,sensitivityUnits,voltageExcitationSource,voltageExcitationValue,voltageExcitationFrequency,voltageExcitationWireMode,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIRvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/RVDTs.html');">RVDT</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/angDisplaceRVDT.html');">measure angular position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.
</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.
</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to the sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.
</param>
<param name="voltageExcitationFrequency">The excitation frequency that the sensor requires, in hertz. Refer to the sensor documentation to determine this value.
</param>
<param name="voltageExcitationWireMode">The number of leads on the sensor. Some sensors require you to tie leads together to create a four- or five-wire sensor. Refer to the documentation for your sensor for more information. 
</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. </para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateRvdtChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIRvdtSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsVoltageChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVoltageUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsVoltageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVoltageUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Volt.html');">measure voltage</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="units">The units to use to return the voltage measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<note type="note">
If the measurement requires the use of internal excitation or you need the voltage to be scaled by the excitation, use <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" /> instead.
</note>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsVoltageChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsVoltageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Volt.html');">measure voltage</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<note type="note">
If the measurement requires the use of internal excitation or you need the voltage to be scaled by the excitation, use <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" /> instead.
</note>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with an internal shunt resistor to
<see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The 
<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="units">The units to use to return the current measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale and an internal shunt  resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,externalShuntResistorValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified external shunt resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="externalShuntResistorValue">The value in ohms of an external shunt resistor.</param>
<param name="units">The units to use to return the current measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,externalShuntResistorValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale and external shunt resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="externalShuntResistorValue">The value in ohms of an external shunt resistor.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsThermocoupleChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">thermocouple</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see> using a built-in cold-junction compensation source. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the temperature measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsThermocoupleChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,cjcValue" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">thermocouple</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see> using a constant value cold-junction compensation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the temperature measurement.</param>
<param name="cjcValue">The temperature in <paramref name="units" /> of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/sigcontherm.html');">cold-junction</see>.
</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsThermocoupleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsThermocoupleChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,cjcChannel" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermocouples.html');">thermocouple</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see> using a measurement on another channel for cold-junction compensation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the temperature measurement.</param>&gt;<param name="cjcChannel">The channel that acquires the temperature of the thermocouple <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/sigcontherm.html');">cold-junction</see> if you set <see cref="T:NationalInstruments.DAQmx.AIThermocoupleCjcSource" /> to <see cref="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.Channel" />. You can use a global channel or another virtual channel already in the task. If the channel is a temperature channel, NI-DAQmx acquires the temperature in the correct units. Other channel types, such as a resistance channel with a custom sensor, must use a custom scale to scale values to degrees Celsius.
</param><returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns><exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception><remarks><para>You must configure the physical channel(s) with TEDS information to use this method.</para><para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para></remarks></member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsRtdChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsRtdChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,resistanceConfiguration,currentExcitationSource,currentExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an  <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/rtd.html');">RTD</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the temperature measurement.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsThermistorIExChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsThermistorIExChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,resistanceConfiguration,currentExcitationSource,currentExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermistors.html');">thermistor</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see>. Use this method when the thermistor uses current excitation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />. 
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the temperature measurement.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsThermistorVExChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsThermistorVExChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,resistanceConfiguration,voltageExcitationSource,voltageExcitationValue,r1" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITemperatureUnits,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/thermistors.html');">thermistor</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/simtemp.html');">measure temperature</see>. Use this method when the thermistor uses voltage excitation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the temperature measurement.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="r1">The value of the reference resistor, in ohms.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.
</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsResistanceChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIResistanceUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsResistanceChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,resistanceConfiguration,currentExcitationSource,currentExcitationValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIResistanceUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Resistance.html');">measure resistance</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="units">The units to use to return the resistance measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsResistanceChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsResistanceChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,resistanceConfiguration,currentExcitationSource,currentExcitationValue,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIResistanceConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Resistance.html');">measure resistance</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="resistanceConfiguration">The number of wires to use for resistive measurements.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIVoltageUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsVoltageChannelWithExcitation" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,configuration,minimumValue,maximumValue,voltageExcitationSource,voltageExcitationValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIVoltageUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to measure voltage for custom sensors that require excitation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="configuration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="units">The units to use to return the voltage measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsVoltageChannelWithExcitation" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,configuration,minimumValue,maximumValue,voltageExcitationSource,voltageExcitationValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to measure voltage for custom sensors that require excitation. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="configuration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsAccelerometerChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIAccelerationUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsAccelerometerChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,currentExcitationSource,currentExcitationValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AIAccelerationUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/Accelerometers.html');">accelerometer</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/Accel.html');">measure acceleration</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amps that the sensor requires. Refer to the sensor documentation to determine this value. </param>
<param name="units">The units to use to return the acceleration measurement from the channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsAccelerometerChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsAccelerometerChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,currentExcitationSource,currentExcitationValue,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/Accelerometers.html');">accelerometer</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/Accel.html');">measure acceleration</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units. 
</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amps that the sensor requires. Refer to the sensor documentation to determine this value. </param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsStrainGageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsStrainGageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,voltageExcitationSource,voltageExcitationValue,initialBridgeVoltage,leadWireResistance,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Strain.html');">measure strain</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="initialBridgeVoltage">The output voltage of the bridge in the unloaded condition. NI-DAQmx subtracts this value from any measurements before applying scaling equations. Perform a voltage measurement on the bridge with no strain applied to determine this value.</param>
<param name="leadWireResistance">The amount of resistance in ohms in the lead wires. Ideally, this value is the same for all leads.</param>
<param name="units">The units to use to return the strain measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsStrainGageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsStrainGageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,voltageExcitationSource,voltageExcitationValue,initialBridgeVoltage,leadWireResistance,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Strain.html');">measure strain</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="initialBridgeVoltage">The output voltage of the bridge in the unloaded condition. NI-DAQmx subtracts this value from any measurements before applying scaling equations. Perform a voltage measurement on the bridge with no strain applied to determine this value.</param>
<param name="leadWireResistance">The amount of resistance in ohms in the lead wires. Ideally, this value is the same for all leads.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateMicrophoneChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AISoundPressureUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateMicrophoneChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,microphoneSensitivity,maximumSoundPressureLevel,terminalConfiguration,currentExcitationSource,currentExcitationValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AISoundPressureUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a microphone to <see href="javascript:LaunchHelp('daqhelp.chm::/soundPress.html');">measure sound pressure</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="microphoneSensitivity">The sensitivity of the microphone. Specify this value in millivolts per pascal.</param>
<param name="maximumSoundPressureLevel">The maximum instantaneous sound pressure level you expect to measure. This value is in decibels, referenced to 20 micropascals.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="units">The units to use to return the sound pressure measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateMicrophoneChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AISoundPressureUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateMicrophoneChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateMicrophoneChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,microphoneSensitivity,maximumSoundPressureLevel,terminalConfiguration,currentExcitationSource,currentExcitationValue,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale that uses a microphone to <see href="javascript:LaunchHelp('daqhelp.chm::/soundPress.html');">measure sound pressure</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="microphoneSensitivity">The sensitivity of the microphone. Specify this value in millivolts per pascal.</param>
<param name="maximumSoundPressureLevel">The maximum instantaneous sound pressure level you expect to measure. This value is in decibels, referenced to 20 micropascals.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateMicrophoneChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsMicrophoneChannel(System.String,System.String,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AISoundPressureUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsMicrophoneChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,maximumSoundPressureLevel,terminalConfiguration,currentExcitationSource,currentExcitationValue,units" niparametertypes="System.String,System.String,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,NationalInstruments.DAQmx.AISoundPressureUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses a microphone to <see href="javascript:LaunchHelp('daqhelp.chm::/soundPress.html');">measure sound pressure</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="microphoneSensitivty">The sensitivity of the microphone. Specify this value in millivolts per pascal.</param>
<param name="maximumSoundPressureLevel">The maximum instantaneous sound pressure level you expect to measure. This value is in decibels, referenced to 20 micropascals.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="units">The units to use to return the sound pressure measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsMicrophoneChannel(System.String,System.String,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsMicrophoneChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,maximumSoundPressureLevel,terminalConfiguration,currentExcitationSource,currentExcitationValue,customScaleName" niparametertypes="System.String,System.String,System.Double,NationalInstruments.DAQmx.AITerminalConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale that uses a microphone to <see href="javascript:LaunchHelp('daqhelp.chm::/soundPress.html');">measure sound pressure</see>.  This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="microphoneSensitivty">The sensitivity of the microphone. Specify this value in millivolts per pascal.</param>
<param name="maximumSoundPressureLevel">The maximum instantaneous sound pressure level you expect to measure. This value is in decibels, referenced to 20 micropascals.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsLvdtChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AILvdtUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsLvdtChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,voltageExcitationSource,voltageExcitationValue,voltageExcitationFrequency,voltageExcitationWireMode,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AILvdtUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/LVDTs.html');">LVDT</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/linDisplaceLVDT.html');">measure linear position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="voltageExcitationFrequency">The excitation frequency that the sensor requires, in hertz. Refer to the sensor documentation to determine this value.</param>
<param name="voltageExcitationWireMode">The number of leads on the sensor. Some sensors require you to tie leads together to create a four- or five-wire sensor. Refer to the documentation for your sensor for more information. 
</param>
<param name="units">The units to use to return the linear position measurement from the channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsLvdtChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsLvdtChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,voltageExcitationSource,voltageExcitationValue,voltageExcitationFrequency,voltageExcitationWireMode,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/LVDTs.html');">LVDT</see> to 
<see href="javascript:LaunchHelp('daqhelp.chm::/linDisplaceLVDT.html');">measure linear position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units. 
</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units. 
</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.
</param>
<param name="voltageExcitationFrequency">The excitation frequency that the sensor requires, in hertz. Refer to the sensor documentation to determine this value.
</param>
<param name="voltageExcitationWireMode">The number of leads on the sensor. Some sensors require you to tie leads together to create a four- or five-wire sensor. Refer to the documentation for your sensor for more information. 
</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsRvdtChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AIRvdtUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsRvdtChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,voltageExcitationSource,voltageExcitationValue,voltageExcitationFrequency,voltageExcitationWireMode,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,NationalInstruments.DAQmx.AIRvdtUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/RVDTs.html');">RVDT</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/angDisplaceRVDT.html');">measure angular  position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="voltageExcitationFrequency">The excitation frequency that the sensor requires, in hertz. Refer to the sensor documentation to determine this value.</param>
<param name="voltageExcitationWireMode">The number of leads on the sensor. Some sensors require you to tie leads together to create a four- or five-wire sensor. Refer to the documentation for your sensor for more information. 
</param>
<param name="units">The units to use to return the angular position measurement from the channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsRvdtChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsRvdtChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,voltageExcitationSource,voltageExcitationValue,voltageExcitationFrequency,voltageExcitationWireMode,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,NationalInstruments.DAQmx.AIACExcitationWireMode,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/RVDTs.html');">RVDT</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/angDisplaceRVDT.html');">measure angular  position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires. Refer to the sensor documentation to determine this value.</param>
<param name="voltageExcitationFrequency">The excitation frequency that the sensor requires, in hertz. Refer to the sensor documentation to determine this value.</param>
<param name="voltageExcitationWireMode">The number of leads on the sensor. Some sensors require you to tie leads together to create a four- or five-wire sensor. Refer to the documentation for your sensor for more information. 
</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>You must configure the physical channel(s) with TEDS information to use this method.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.AIChannelCollection.ICollection_Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ICollection_Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageRmsChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVoltageRmsChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Volt.html');">measure AC voltage</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> you expect to measure, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> you expect to measurement, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<note type="note">
If the measurement requires the use of internal excitation or you need the voltage scaled by the excitation, use <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,System.String)" /> instead.
</note>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentRmsChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentRmsChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale and an internal shunt  resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure AC current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> you expect to measure, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> you expect to measure, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
Use this method with devices that have a built-in shunt resistor.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentRmsChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentRmsChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,externalShuntResistorValue,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale and external shunt resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure AC current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> you expect to measure, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> you expect to measure, in units.</param>
<param name="externalShuntResistorValue">The value in ohms of an external shunt resistor.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
Use this method with devices that do not have a built-in shunt resistor. You must attach an external shunt resistor.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageRmsChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVoltageAcrmsUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVoltageRmsChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVoltageAcrmsUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Volt.html');">measure AC voltage</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> you expect to measure, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> you expect to measure, in <paramref name="units" />.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVoltageUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
<note type="note">
If the measurement requires the use of internal excitation or you need the voltage scaled by the excitation, use <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVoltageChannelWithExcitation(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Boolean,System.String)" /> instead.
</note>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentRmsChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentAcrmsUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentRmsChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentAcrmsUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with an internal shunt resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure AC current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> you expect to measure, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> you expect to measure, in units.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
Use this method with devices that have a built-in shunt resistor.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentRmsChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentAcrmsUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentRmsChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,externalShuntResistorValue,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentAcrmsUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified external shunt resistor to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">measure AC current</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> you expect to measure, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> you expect to measure, in <paramref name="units" />.</param>
<param name="externalShuntResistorValue">The value in ohms of an external shunt resistor.</param>
<param name="units">The units to use to return the measurement.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
Use this method with devices that do not have a built-in shunt resistor. You must attach an external shunt resistor.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateCurrentChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AICurrentUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateEddyCurrentProximityProbeChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateEddyCurrentProximityProbeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,sensitivity,sensitivityUnits,units" niparametertypes="System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/EddyCurrentProximityProbe.html');">Eddy Current Proximity Probe</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Proximity.html');">measure  position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to the sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="units">Specifies the units to use to return position measurements from the channel. 

</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. </para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateEddyCurrentProximityProbeChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateEddyCurrentProximityProbeChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateEddyCurrentProximityProbeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,sensitivity,sensitivityUnits,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> with the specified custom scale that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/EddyCurrentProximityProbe.html');">Eddy Current Proximity Probe</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Proximity.html');">measure  position</see>. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to the sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<remarks>
<para>This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. </para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AIChannelCollection.CreateEddyCurrentProximityProbeChannel(System.String,System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateForceBridgeTwoPointLinearChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateForceBridgeTwoPointLinearChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,firstElectricalValue,secondElectricalValue,electricalUnits,firstPhysicalValue,secondPhysicalValue,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>, with the specified custom scale. Use this instance with sensors whose specifications do not provide a polynomial for scaling or a table of electrical and physical values. When you use this scaling type, NI-DAQmx uses two points of electrical and physical values to calculate the slope and y-intercept of a linear equation and uses that equation to scale electrical values to physical values.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="firstElectricalValue">
The first electrical value, corresponding to <paramref name="firstPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="secondElectricalValue">
The second electrical value, corresponding to <paramref name="secondPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="firstPhysicalValue">
The first physical value, corresponding to <paramref name="firstElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.

</param>
<param name="secondPhysicalValue">
The second physical value, corresponding to <paramref name="secondElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateForceBridgeTwoPointLinearChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateForceBridgeTwoPointLinearChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,firstElectricalValue,secondElectricalValue,electricalUnits,firstPhysicalValue,secondPhysicalValue,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>. Use this instance with sensors whose specifications do not provide a polynomial for scaling or a table of electrical and physical values. When you use this scaling type, NI-DAQmx uses two points of electrical and physical values to calculate the slope and y-intercept of a linear equation and uses that equation to scale electrical values to physical values.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.

</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="firstElectricalValue">
The first electrical value, corresponding to <paramref name="firstPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="secondElectricalValue">
The second electrical value, corresponding to <paramref name="secondPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="firstPhysicalValue">
The first physical value, corresponding to <paramref name="firstElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.

</param>
<param name="secondPhysicalValue">
The second physical value, corresponding to <paramref name="secondElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateForceBridgeTableChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateForceBridgeTableChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,electricalValues,electricalUnits,physicalValues,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>, with the specified custom scale.
Use this instance with sensors whose specifications provide a table of electrical values and the corresponding physical values. When you use this scaling type, NI-DAQmx performs linear scaling between each pair of electrical and physical values. The input limits specified with the minimum value and maximum value parameters must fall within the smallest and largest physical values. For any data outside those endpoints, NI-DAQmx coerces that data to the endpoints.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
								</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="electricalValues">
The array of electrical values that map to the values in <paramref name="physicalValues" />. Specify this value in the units specified with <paramref name="electricalUnits" />.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalValues">
The array of physical values that map to the values in <paramref name="electricalValues" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit. </para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateForceBridgeTableChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateForceBridgeTableChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,electricalValues,electricalUnits,physicalValues,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>.
Use this instance with sensors whose specifications provide a table of electrical values and the corresponding physical values. When you use this scaling type, NI-DAQmx performs linear scaling between each pair of electrical and physical values. The input limits specified with the minimum value and maximum value parameters must fall within the smallest and largest physical values. For any data outside those endpoints, NI-DAQmx coerces that data to the endpoints.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.

</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
								</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="electricalValues">
The array of electrical values that map to the values in <paramref name="physicalValues" />. Specify this value in the units specified with <paramref name="electricalUnits" />.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalValues">
The array of physical values that map to the values in <paramref name="electricalValues" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateForceBridgePolynomialChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateForceBridgePolynomialChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,forwardCoefficients,reverseCoefficients,electricalUnits,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>, with the specified custom scale.
Use this instance with sensors whose specifications provide a polynomial to convert electrical values to physical values. When you use this scaling type, NI-DAQmx requires coefficients for a polynomial that converts electrical values to physical values (forward), as well as coefficients for a polynomial that converts physical values to electrical values (reverse). If you only know one set of coefficients, use <see cref="T:NationalInstruments.DAQmx.PolynomialScale" /> to generate the other set.
This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">
The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.		</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateForceBridgePolynomialChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateForceBridgePolynomialChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,forwardCoefficients,reverseCoefficients,electricalUnits,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>.
Use this instance with sensors whose specifications provide a polynomial to convert electrical values to physical values. When you use this scaling type, NI-DAQmx requires coefficients for a polynomial that converts electrical values to physical values (forward), as well as coefficients for a polynomial that converts physical values to electrical values (reverse). If you only know one set of coefficients, use <see cref="T:NationalInstruments.DAQmx.PolynomialScale" /> to generate the other set.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">
The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.		</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreatePressureBridgeTwoPointLinearChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePressureBridgeTwoPointLinearChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,firstElectricalValue,secondElectricalValue,electricalUnits,firstPhysicalValue,secondPhysicalValue,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Pressure.html');">measure pressure</see>, with the specified custom scale.
Use this instance with sensors whose specifications do not provide a polynomial for scaling or a table of electrical and physical values. When you use this scaling type, NI-DAQmx uses two points of electrical and physical values to calculate the slope and y-intercept of a linear equation and uses that equation to scale electrical values to physical values.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="firstElectricalValue">
The first electrical value, corresponding to <paramref name="firstPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="secondElectricalValue">
The second electrical value, corresponding to <paramref name="secondPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="firstPhysicalValue">
The first physical value, corresponding to <paramref name="firstElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.

</param>
<param name="secondPhysicalValue">
The second physical value, corresponding to <paramref name="secondElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreatePressureBridgeTwoPointLinearChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIPressureUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePressureBridgeTwoPointLinearChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,firstElectricalValue,secondElectricalValue,electricalUnits,firstPhysicalValue,secondPhysicalValue,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIPressureUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Pressure.html');">measure pressure</see>.
Use this instance with sensors whose specifications do not provide a polynomial for scaling or a table of electrical and physical values. When you use this scaling type, NI-DAQmx uses two points of electrical and physical values to calculate the slope and y-intercept of a linear equation and uses that equation to scale electrical values to physical values.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="firstElectricalValue">
The first electrical value, corresponding to <paramref name="firstPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="secondElectricalValue">
The second electrical value, corresponding to <paramref name="secondPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="firstPhysicalValue">
The first physical value, corresponding to <paramref name="firstElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.

</param>
<param name="secondPhysicalValue">
The second physical value, corresponding to <paramref name="secondElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreatePressureBridgeTableChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePressureBridgeTableChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,electricalValues,electricalUnits,physicalValues,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Pressure.html');">measure pressure</see>, with the specified custom scale.
Use this instance with sensors whose specifications provide a table of electrical values and the corresponding physical values. When you use this scaling type, NI-DAQmx performs linear scaling between each pair of electrical and physical values. The input limits specified with the minimum value and maximum value parameters must fall within the smallest and largest physical values. For any data outside those endpoints, NI-DAQmx coerces that data to the endpoints.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
you expect to measure, in custom scaled units.
</param>
<param name="maximumValue">
The
<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
you expect to measure, in custom scaled units.
</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="electricalValues">
The array of electrical values that map to the values in <paramref name="physicalValues" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

				</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalValues">
The array of physical values that map to the values in <paramref name="electricalValues" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />.
						 If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels.
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />,
						 NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreatePressureBridgeTableChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIPressureUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePressureBridgeTableChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,electricalValues,electricalUnits,physicalValues,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIPressureUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Pressure.html');">measure pressure</see>.
Use this instance with sensors whose specifications provide a table of electrical values and the corresponding physical values. When you use this scaling type, NI-DAQmx performs linear scaling between each pair of electrical and physical values. The input limits specified with the minimum value and maximum value parameters must fall within the smallest and largest physical values. For any data outside those endpoints, NI-DAQmx coerces that data to the endpoints.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="electricalValues">
The array of electrical values that map to the values in <paramref name="physicalValues" />. Specify this value in the units specified with <paramref name="electricalUnits" />.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalValues">
The array of physical values that map to the values in <paramref name="electricalValues" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />.
						 If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels.
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />,
						 NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreatePressureBridgePolynomialChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePressureBridgePolynomialChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,forwardCoefficients,reverseCoefficients,electricalUnits,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Pressure.html');">measure pressure</see>, with the specified custom scale.
Use this instance with sensors whose specifications provide a polynomial to convert electrical values to physical values. When you use this scaling type, NI-DAQmx requires coefficients for a polynomial that converts electrical values to physical values (forward), as well as coefficients for a polynomial that converts physical values to electrical values (reverse). If you only know one set of coefficients, use 
<see cref="T:NationalInstruments.DAQmx.PolynomialScale" />
					to generate the other set. This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">
The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />.
						 If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels.
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />,
						 NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreatePressureBridgePolynomialChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIPressureUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePressureBridgePolynomialChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,forwardCoefficients,reverseCoefficients,electricalUnits,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIPressureUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Pressure.html');">measure pressure</see>.
Use this instance with sensors whose specifications provide a polynomial to convert electrical values to physical values. When you use this scaling type, NI-DAQmx requires coefficients for a polynomial that converts electrical values to physical values (forward), as well as coefficients for a polynomial that converts physical values to electrical values (reverse). If you only know one set of coefficients, use
<see cref="T:NationalInstruments.DAQmx.PolynomialScale" />
to generate the other set. This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.

</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">
The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />.
						 If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels.
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />,
						 NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTorqueBridgeTwoPointLinearChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTorqueBridgeTwoPointLinearChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,firstElectricalValue,secondElectricalValue,electricalUnits,firstPhysicalValue,secondPhysicalValue,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Torque.html');">measure torque</see>, with the specified custom scale. Use this instance with sensors whose specifications do not provide a polynomial for scaling or a table of electrical and physical values. When you use this scaling type, NI-DAQmx uses two points of electrical and physical values to calculate the slope and y-intercept of a linear equation and uses that equation to scale electrical values to physical values.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="firstElectricalValue">
The first electrical value, corresponding to <paramref name="firstPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="secondElectricalValue">
The second electrical value, corresponding to <paramref name="secondPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="firstPhysicalValue">
The first physical value, corresponding to <paramref name="firstElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.

</param>
<param name="secondPhysicalValue">
The second physical value, corresponding to <paramref name="secondElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTorqueBridgeTwoPointLinearChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITorqueUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTorqueBridgeTwoPointLinearChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,firstElectricalValue,secondElectricalValue,electricalUnits,firstPhysicalValue,secondPhysicalValue,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITorqueUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>


Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Torque.html');">measure torque</see>, with the specified custom scale. Use this instance with sensors whose specifications do not provide a polynomial for scaling or a table of electrical and physical values. When you use this scaling type, NI-DAQmx uses two points of electrical and physical values to calculate the slope and y-intercept of a linear equation and uses that equation to scale electrical values to physical values.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.

</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="firstElectricalValue">
The first electrical value, corresponding to <paramref name="firstPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="secondElectricalValue">
The second electrical value, corresponding to <paramref name="secondPhysicalValue" />. Specify this value in the units specified with <paramref name="electricalUnits" />.

</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="firstPhysicalValue">
The first physical value, corresponding to <paramref name="firstElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.

</param>
<param name="secondPhysicalValue">
The second physical value, corresponding to <paramref name="secondElectricalValue" />. Specify this value in the units specified with <paramref name="physicalUnits" />.
</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTorqueBridgeTableChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTorqueBridgeTableChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,electricalValues,electricalUnits,physicalValues,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Torque.html');">measure torque</see>, with the specified custom scale.
Use this instance with sensors whose specifications provide a table of electrical values and the corresponding physical values. When you use this scaling type, NI-DAQmx performs linear scaling between each pair of electrical and physical values. The input limits specified with the minimum value and maximum value parameters must fall within the smallest and largest physical values. For any data outside those endpoints, NI-DAQmx coerces that data to the endpoints.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="electricalValues">
The array of electrical values that map to the values in <paramref name="physicalValues" />. Specify this value in the units specified with <paramref name="electricalUnits" />.
</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">
The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalValues">The array of physical values that map to the values in <paramref name="electricalValues" />. Specify this value in the units specified with <paramref name="physicalUnits" />.</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.		</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTorqueBridgeTableChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITorqueUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTorqueBridgeTableChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,electricalValues,electricalUnits,physicalValues,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITorqueUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,System.Double[],NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>


Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Torque.html');">measure torque</see>, with the specified custom scale.
Use this instance with sensors whose specifications provide a table of electrical values and the corresponding physical values. When you use this scaling type, NI-DAQmx performs linear scaling between each pair of electrical and physical values. The input limits specified with the minimum value and maximum value parameters must fall within the smallest and largest physical values. For any data outside those endpoints, NI-DAQmx coerces that data to the endpoints.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.

</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="electricalValues">
The array of electrical values that map to the values in <paramref name="physicalValues" />. Specify this value in the units specified with <paramref name="electricalUnits" />.
</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">
The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalValues">The array of physical 
values that map to the values in <paramref name="electricalValues" />. Specify this value in the units specified with <paramref name="physicalUnits" />.</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.		</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTorqueBridgePolynomialChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTorqueBridgePolynomialChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,forwardCoefficients,reverseCoefficients,electricalUnits,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Torque.html');">measure torque</see>, with the specified custom scale.
Use this instance with sensors whose specifications provide a polynomial to convert electrical values to physical values. When you use this scaling type, NI-DAQmx requires coefficients for a polynomial that converts electrical values to physical values (forward), as well as coefficients for a polynomial that converts physical values to electrical values (reverse). If you only know one set of coefficients, use <see cref="T:NationalInstruments.DAQmx.PolynomialScale" />
					to generate the other set. This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">
The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.		</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTorqueBridgePolynomialChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITorqueUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTorqueBridgePolynomialChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance,forwardCoefficients,reverseCoefficients,electricalUnits,physicalUnits" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITorqueUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double[],System.Double[],NationalInstruments.DAQmx.AIBridgeElectricalUnits,NationalInstruments.DAQmx.AIBridgePhysicalUnits" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Torque.html');">measure torque</see>.
Use this instance with sensors whose specifications provide a polynomial to convert electrical values to physical values. When you use this scaling type, NI-DAQmx requires coefficients for a polynomial that converts electrical values to physical values (forward), as well as coefficients for a polynomial that converts physical values to electrical values (reverse). If you only know one set of coefficients, use <see cref="T:NationalInstruments.DAQmx.PolynomialScale" />
to generate the other set. This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.

</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<param name="forwardCoefficients">
The array of the forward coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9x<format type="superscript">3</format>.
</param>
<param name="reverseCoefficients">
The array of the reverse coefficients of the polynomial. Each element of the array corresponds to a term of the equation. For example, if index three of the array is <format type="monospace">9</format>, the fourth term of the equation is 9y<format type="superscript">3</format>.
</param>
<param name="electricalUnits">Specifies from which electrical units to scale data. Use the units that correspond to the units used for electrical values provided by the sensor data sheet or calibration certificate.</param>
<param name="physicalUnits">Specifies to which physical units to scale electrical data.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.		</returns>
<remarks>
<para>
Specify different values for <paramref name="physical units" /> if the sensor specifications provide physical values in one unit, but you want NI-DAQmx to scale data to a different unit.
</para>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateBridgeChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" /> that measures <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeScaling.html');">voltage ratios</see> from a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see>, with the specified custom scale.  Use this instance with bridge-based sensors that measure phenomena other than strain, force, pressure, or torque, or that scale data to physical units NI-DAQmx does not support.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />. Use a custom scale or other scaling code to convert the voltage ratios to physical units.
</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
you expect to measure, in custom scaled units.
</param>
<param name="maximumValue">
The
<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
you expect to measure, in custom scaled units.
</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateBridgeChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,bridgeConfiguration,voltageExcitationSource,voltageExcitationValue,nominalBridgeResistance" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeUnits,NationalInstruments.DAQmx.AIBridgeConfiguration,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" /> that measures <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeScaling.html');">voltage ratios</see> from a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see>.  Use this instance with bridge-based sensors that measure phenomena other than strain, force, pressure, or torque, or that scale data to physical units NI-DAQmx does not support.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />. Use a custom scale or other scaling code to convert the voltage ratios to physical units.
</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="bridgeConfiguration">The type of Wheatstone <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeconfiggeneric.html');">bridge configuration </see> connected to the channel.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<param name="nominalBridgeResistance">The resistance, in ohms, of the bridge while not under load.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />.
						 If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels.
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />,
						 NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsBridgeChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,voltageExcitationSource,voltageExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that measures a a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see>, with the specified custom scale. You must configure the physical channel(s) with TEDS information to use this method. Use this instance with bridge-based sensors that measure phenomena other than strain, force, pressure, or torque, or that scale data to physical units NI-DAQmx does not support.
This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
you expect to measure, in custom scaled units.
</param>
<param name="maximumValue">
The
<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
you expect to measure, in custom scaled units.
</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						

					</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsBridgeChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,voltageExcitationSource,voltageExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIBridgeUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that measures a a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see>. You must configure the physical channel(s) with TEDS information to use this method. Use this instance with bridge-based sensors that measure phenomena other than strain, force, pressure, or torque, or that scale data to physical units NI-DAQmx does not support.
This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						

					</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsForceBridgeChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsForceBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,voltageExcitationSource,voltageExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>, with the specified custom scale. You must configure the physical channel(s) with TEDS information to use this method. NI-DAQmx scales electrical values to physical values according to that TEDS information.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.

									</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
									</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.

					</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsForceBridgeChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsForceBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,voltageExcitationSource,voltageExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>. You must configure the physical channel(s) with TEDS information to use this method. NI-DAQmx scales electrical values to physical values according to that TEDS information.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.

									</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation in volts that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.

					</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsPressureBridgeChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsPressureBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,voltageExcitationSource,voltageExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Pressure.html');">measure pressure</see>, with the specified custom scale. You must configure the physical channel(s) with TEDS information to use this method. NI-DAQmx scales electrical values to physical values according to that TEDS information.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />. You must configure the physical channel(s) with TEDS information to use this method.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
you expect to measure, in custom scaled units.
</param>
<param name="maximumValue">
The
<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
you expect to measure, in custom scaled units.
</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />.
						 If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels.
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />,
						 NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsPressureBridgeChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIPressureUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsPressureBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,voltageExcitationSource,voltageExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIPressureUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Pressure.html');">measure pressure</see>. You must configure the physical channel(s) with TEDS information to use this method. NI-DAQmx scales electrical values to physical values according to that TEDS information.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />. You must configure the physical channel(s) with TEDS information to use this method.
</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />.
						 If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels.
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />,
						 NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
						
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsTorqueBridgeChannel(System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsTorqueBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName,voltageExcitationSource,voltageExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Torque.html');">measure torque</see>, with the specified custom scale. You must configure the physical channel(s) with TEDS information to use this method. NI-DAQmx scales electrical values to physical values according to that TEDS information.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.		</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsTorqueBridgeChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITorqueUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsTorqueBridgeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units,voltageExcitationSource,voltageExcitationValue" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AITorqueUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/bridgeforcepressuretorque.html');">Wheatstone bridge</see> to <see href="javascript:launchMeasApp('Torque.html');">measure torque</see>. You must configure the physical channel(s) with TEDS information to use this method. NI-DAQmx scales electrical values to physical values according to that TEDS information.
This method adds one or more physical channels to the
<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
					
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="voltageExcitationSource">The source of excitation.</param>
<param name="voltageExcitationValue">The amount of excitation, in volts, that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.		</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateForceIepeChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String,System.Double,NationalInstruments.DAQmx.AIForceIepeSensorSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateForceIepeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName,sensitivity,sensitivityUnits,currentExcitationSource,currentExcitationValue" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String,System.Double,NationalInstruments.DAQmx.AIForceIepeSensorSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses an <see href="javascript:launchSharedHelp('measfunds.chm::/forcePiezo.html')">IEPE force sensor</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>, with the specified custom scale. This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="terminalConfiguration">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.    To use the default terminal configuration for the physical channel(s) being used, pass a value of
					<entity value="ndash" />
					1 casted to an
					<see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="sensitivity">
					The sensitivity of the sensor. This value is in the units you specify with
					<paramref name="sensitivityUnits" />.
					 Refer to the sensor documentation to determine this value.
				</param>
<param name="sensitivityUnits">
					The units of
					<paramref name="sensitivity" />.
					
				</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation, in amperes, that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateForceIepeChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,System.Double,NationalInstruments.DAQmx.AIForceIepeSensorSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateForceIepeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units,sensitivity,sensitivityUnits,currentExcitationSource,currentExcitationValue" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,System.Double,NationalInstruments.DAQmx.AIForceIepeSensorSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses an <see href="javascript:launchSharedHelp('measfunds.chm::/forcePiezo.html')">IEPE force sensor</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>. This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
					
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="terminalConfiguration">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.    To use the default terminal configuration for the physical channel(s) being used, pass a value of
					<entity value="ndash" />
					1 casted to an
					<see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="sensitivity">
					The sensitivity of the sensor. This value is in the units you specify with
					<paramref name="sensitivityUnits" />.
					 Refer to the sensor documentation to determine this value.
				</param>
<param name="sensitivityUnits">
					The units of
					<paramref name="sensitivity" />.
					
				</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation, in amperes, that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<remarks>
<para>
						This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for
						<paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in
						<paramref name="nameToAssignChannel" />
						than you create, NI-DAQmx
						<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see>
						to the local virtual channels. 
					</para>
<para>
						If you do not provide a value for
						<paramref name="nameToAssignChannel" />, NI-DAQmx uses the
						<paramref name="physicalChannelName" />
						as the local virtual channel name. If you use
						<paramref name="nameToAssignChannel" />
						to create a name for the local virtual channel, you must use this name in other properties and methods.
					</para>
<para>
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.
					</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsForceIepeChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsForceIepeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName,currentExcitationSource,currentExcitationValue" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses an <see href="javascript:launchSharedHelp('measfunds.chm::/forcePiezo.html')">IEPE force sensor</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>, with the specified custom scale. 
You must configure the physical channel(s) with TEDS information to use this method. This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="terminalConfiguration">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.    To use the default terminal configuration for the physical channel(s) being used, pass a value of
					<entity value="ndash" />
					1 casted to an
					<see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in custom scaled units.
				</param>
<param name="customScaleName">
					The name of the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>
					to apply to the local virtual channel.
				</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
				</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
						
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.

					</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateTedsForceIepeChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTedsForceIepeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units,currentExcitationSource,currentExcitationValue" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIForceUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
					Creates an
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />
					that uses an <see href="javascript:launchSharedHelp('measfunds.chm::/forcePiezo.html')">IEPE force sensor</see> to <see href="javascript:launchMeasApp('Force.html');">measure force or load</see>. 
You must configure the physical channel(s) with TEDS information to use this method. This method adds one or more physical channels to the
					<see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
				</summary>
<param name="physicalChannelName">
					The names of one or more
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>
					to use to create one or more local virtual channels.
				</param>
<param name="nameToAssignChannel">
					One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to
					<see cref="F:System.String.Empty" />.
				</param>
<param name="terminalConfiguration">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');">input terminal configuration</see>.    To use the default terminal configuration for the physical channel(s) being used, pass a value of
					<entity value="ndash" />
					1 casted to an
					<see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.
				</param>
<param name="minimumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see>
					you expect to measure, in units.
				</param>
<param name="maximumValue">
					The
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see>
					you expect to measure, in units.
				</param>
<param name="units">The units to use to return the measurement.</param>
<param name="currentExcitationSource">The source of excitation.</param>
<param name="currentExcitationValue">The amount of excitation in amperes that the sensor requires.</param>
<returns>
					The newly created
					<see cref="T:NationalInstruments.DAQmx.AIChannel" />.
					
				</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
						
						The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a
						<see cref="T:NationalInstruments.DAQmx.Task" />
						are valid, you must verify the task by starting the task, either with
						<see cref="M:NationalInstruments.DAQmx.Task.Start" />
						or by reading from or writing to the task, or by calling
						<see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" />
						with
						<see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.

					</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVelocityIepeChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String,System.Double,NationalInstruments.DAQmx.AIVelocityIepeSensorSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVelocityIepeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,customScaleName,sensitivity,sensitivityUnits,currentExcitationSource,currentExcitationValue" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,System.String,System.Double,NationalInstruments.DAQmx.AIVelocityIepeSensorSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:launchMergedHelp('daqhelp.chm','measfunds.chm::/velocity.html');">IEPE velocity sensor</see> to
measure velocity. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to the sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="currentExcitationSource">
The source of excitation.

</param>
<param name="currentExcitationValue">
The amount of excitation  in amperes that the sensor requires.

</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateVelocityIepeChannel(System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVelocityUnits,System.Double,NationalInstruments.DAQmx.AIVelocityIepeSensorSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVelocityIepeChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,terminalConfiguration,minimumValue,maximumValue,units,sensitivity,sensitivityUnits,currentExcitationSource,currentExcitationValue" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AITerminalConfiguration,System.Double,System.Double,NationalInstruments.DAQmx.AIVelocityUnits,System.Double,NationalInstruments.DAQmx.AIVelocityIepeSensorSensitivityUnits,NationalInstruments.DAQmx.AIExcitationSource,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> that uses an <see href="javascript:launchMergedHelp('daqhelp.chm','measfunds.chm::/velocity.html');">IEPE velocity sensor</see> to
measure velocity. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="terminalConfiguration"> The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/groundSig.html');"> input terminal configuration</see>.   To use the default terminal configuration for the physical channel(s) being used, pass a value of <entity value="ndash" />1 casted to an <see cref="T:NationalInstruments.DAQmx.AITerminalConfiguration" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="units">The units to use to return the measurement.</param>
<param name="sensitivity">The sensitivity of the sensor. This value is in the units you specify with <paramref name="sensitivityUnits" />. Refer to the sensor documentation to determine this value. </param>
<param name="sensitivityUnits">The units of <paramref name="sensitivity" />.</param>
<param name="currentExcitationSource">
The source of excitation.

</param>
<param name="currentExcitationValue">
The amount of excitation  in amperes that the sensor requires.

</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.AIChannelCollection.CreateRosetteStrainGageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainGageConfiguration,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIRosetteType,System.Double,NationalInstruments.DAQmx.AIRosetteMeasurementType[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateRosetteStrainGageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,strainGageConfiguration,leadWireResistance,excitationSource,excitationValue,gageFactor,nominalGageResistance,poissonRatio,rosetteType,rosetteStrainGageOrientation,rosetteMeasurementTypes" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIStrainGageConfiguration,System.Double,NationalInstruments.DAQmx.AIExcitationSource,System.Double,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.AIRosetteType,System.Double,NationalInstruments.DAQmx.AIRosetteMeasurementType[]" nireturnvaluetype="NationalInstruments.DAQmx.AIChannel">
      <summary>
Creates an <see cref="T:NationalInstruments.DAQmx.AIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Meas_Strain.html');">measure two-dimensional strain</see>  using a rosette strain gage. This method adds one or more physical channels to the <see cref="T:NationalInstruments.DAQmx.AIChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more virtual strain gage channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. </param>
<param name="minimumValue">The minimum strain you expect to measure. This value applies to each strain gage in the rosette.</param>
<param name="maximumValue">The maximum strain you expect to measure. This value applies to each strain gage in the rosette</param>
<param name="strainGageConfiguration">The bridge configuration for the strain gages. The possible values for this parameter are listed in <see cref="T:NationalInstruments.DAQmx.AIStrainGageConfiguration" />. </param>
<param name="leadWireResistance">The amount of resistance in ohms in the lead wires. Ideally, this value is the same for all leads. </param>
<param name="excitationSource">The source of excitation. The possible values for this parameter are listed in <see cref="T:NationalInstruments.DAQmx.AIExcitationSource" />.</param>
<param name="excitationValue">The amount of excitation in volts supplied to the sensor. Refer to the sensor documentation to determine appropriate excitation values.</param>
<param name="gageFactor">The sensitivity of the strain gages and relates the change in electrical resistance to the change in strain. Each gage in the bridge must have the same gage factor. Refer to the sensor documentation to determine this value.
</param>
<param name="nominalGageResistance">The resistance in ohms of the gages in an unstrained position. Each gage in the bridge must have the same nominal gage resistance. The resistance across arms of the bridge that do not have strain gages must also be the same as the nominal gage resistance. Refer to the sensor documentation to determine this value.</param>
<param name="poissonRatio">The ratio of lateral strain to axial strain in the material you are measuring.</param>
<param name="rosetteType">The type of the rosette. The possible values for this parameter are listed in <see cref="T:NationalInstruments.DAQmx.AIRosetteType" />.</param>
<param name="rosetteStrainGageOrientation">The orientation, in degrees, of the gage with respect to the preferred X axis.</param>
<param name="rosetteMeasurementTypes">An array of <see cref="T:NationalInstruments.DAQmx.AIRosetteMeasurementType" /> that specifies the virtual channels to create for the rosette measurements. For each rosette sensor, this method creates one strain virtual channel for each strain gage in the rosette, and one rosette virtual channel for each measurement specified in the rosette measurements array. 
.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AIChannel" />.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels. 
If you use this input to provide your own names for the virtual channels, you must use the names when you refer to these channels in other methods.
</para>
<para>
<format type="bold">physicalChannelName  Considerations</format>
</para>
<para>
For each rosette sensor, this method creates one strain virtual channel for each strain gage in the rosette, and one rosette virtual channel for each measurement specified in the rosette measurements array. For the <see cref="F:NationalInstruments.DAQmx.AIRosetteType.Tee" /> type, at least 2 physical channels are required. For the <see cref="F:NationalInstruments.DAQmx.AIRosetteType.Rectangular" /> and <see cref="F:NationalInstruments.DAQmx.AIRosetteType.Delta" /> types, at least 3 physical channels are required. You are also able to specify a multiple of the required number of physical channels to create the virtual channels necessary for multiple rosette sensors. The order of these channels is critical for proper rosette measurements and should be in the order of the gages in the rosette. The gages in the rosette are typically labeled as A, B, and C or 1, 2, and 3 which is the order required by DAQmx. The DAQmx physical channel constant lists all physical channels on devices and modules installed in the system. You also can wire a string that contains a list or range of physical channels to this input.</para>
<para>
<format type="bold">nameToAssignChannel  Considerations</format>
</para>
<para>If you do not define a value for this input, NI-DAQmx creates a default channel name. The format of this name is rosette#_TYPE, where # is an index number incremented to the first unique value, and TYPE is the channel type.
<list type="table"><listheader><term>Name Format</term><description>Type</description></listheader><item><term>
rosette#_strainGage1

</term><description>
Strain gage 1.

</description></item><item><term>
rosette#_strainGage2

</term><description>
Strain gage 2.

</description></item><item><term>
rosette#_strainGage3

</term><description>
Strain gage 3.

</description></item><item><term>
rosette#_principalStrain1

</term><description>
Principal strain 1.

</description></item><item><term>
rosette#_principalStrain2

</term><description>
Principal strain 2.

</description></item><item><term>
rosette#_principalStrainAngle

</term><description>
Principal strain angle.

</description></item><item><term>
rosette#_cartesianStrainX

</term><description>
Cartesian strain X.

</description></item><item><term>
rosette#_cartesianStrainY

</term><description>
Cartesian strain Y.

</description></item><item><term>
rosette#_cartesianShearStrainXY

</term><description>
Cartesian shear strain XY.

</description></item><item><term>
rosette#_maximumShearStrain

</term><description>
Maximum shear strain.

</description></item><item><term>
rosette#_maximumShearStrainAngle

</term><description>
Minimum shear strain.

</description></item></list></para>
</remarks>
</member>
    <member name="T:NationalInstruments.DAQmx.AOChannelCollection" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOChannelCollection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains the collection of analog output channels for a <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.AOChannels" />
<seealso cref="T:NationalInstruments.DAQmx.AOChannel" />
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.GetEnumerator" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetEnumerator" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Collections.IEnumerator">
      <summary>Returns an enumerator that you can use to iterate through the collection.</summary>
<returns>Enumerator for the collection.</returns>
<remarks>
For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> in the Microsoft
.NET Framework documentation.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.CreateVoltageChannel(System.String,System.String,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVoltageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AOChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/genVolt.html');">generate voltage</see>. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.AOChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> to generate.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> to generate.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AOChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AOChannelCollection.CreateVoltageChannel(System.String,System.String,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.CreateVoltageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AOVoltageUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateVoltageChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AOVoltageUnits" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AOChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/genVolt.html');">generate voltage</see>. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.AOChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> to generate, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> to generate, in <paramref name="units" />.</param>
<param name="units">The units to use to generate voltage.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AOChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AOChannelCollection.CreateVoltageChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AOVoltageUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.CreateCurrentChannel(System.String,System.String,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AOChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">generate current</see>. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.AOChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> to generate, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> to generate, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AOChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AOChannelCollection.CreateCurrentChannel(System.String,System.String,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.CreateCurrentChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AOCurrentUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCurrentChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AOCurrentUnits" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AOChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Measuring_Current.html');">generate current</see>. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.AOChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> to generate, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> to generate, in <paramref name="units" />.</param>
<param name="units">The units to use to generate current.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AOChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AOChannelCollection.CreateCurrentChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.AOCurrentUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannelCollection.Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets the number of elements in the collection.</summary>
<value>The number of elements contained in the collection.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannelCollection.All" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Gets an  <see cref="T:NationalInstruments.DAQmx.AOChannel" /> that operates on all of the channels in the task.</summary>
<value>An <see cref="T:NationalInstruments.DAQmx.AOChannel" /> that operates on all of the channels in a task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannelCollection.Item(System.String)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="virtualChannelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AOChannel" /> with the specified virtual channel name. In Visual C#, this property is the indexer.</summary>
<param name="virtualChannelName">One or more virtual channel names that the retrieved <see cref="T:NationalInstruments.DAQmx.AOChannel" /> operates on.</param>
<value>The specified <see cref="T:NationalInstruments.DAQmx.AOChannel" />.</value>
<remarks>By using a comma or colon in <paramref name="virtualChannelName" />, you can retrieve more than one channel at a time. For more information refer to <see keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</see>.
</remarks>
<seealso cref="T:NationalInstruments.DAQmx.AOChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannelCollection.Item(System.Int64)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="index" niparametertypes="System.Int64" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.AOChannel" /> at the specified index. In Visual C#, this property is the indexer.</summary>
<param name="index">The zero-based index of the entry to locate in the collection.</param>
<value>The <see cref="T:NationalInstruments.DAQmx.AOChannel" /> at the specified index.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso cref="T:NationalInstruments.DAQmx.AOChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.CopyTo(System.Array,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CopyTo" nihasget="0" nihasset="0" niparameters="array,index" niparametertypes="System.Array,System.Int32" nireturnvaluetype="System.Void">
      <summary>
Copies the collection to an array or a portion of an array.  This operation is not supported for <see cref="T:NationalInstruments.DAQmx.AOChannelCollection" />.
</summary>
<param name="array">
Destination array for the collection.
</param>
<param name="index">
The index in the target array at which you want to begin copying the collection to.
</param>
<exception cref="T:System.NotSupportedException">
This method always throws a <see cref="T:System.NotSupportedException" />.
</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannelCollection.IsSynchronized" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsSynchronized" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannelCollection.SyncRoot" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SyncRoot" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Object">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.AOChannelCollection.ICollection_Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ICollection_Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.CreateFunctionGenerationChannel(System.String,System.String,NationalInstruments.DAQmx.AOFunctionGenerationType,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateFunctionGenerationChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,waveformType,frequency,amplitude,offset" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AOFunctionGenerationType,System.Double,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AOChannel" /> that continuously generates a waveform with the specificed waveform type, frequency, amplitude, and offset. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.AOChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="waveformType">The <see cref="T:NationalInstruments.DAQmx.AOFunctionGenerationType" />  to generate.</param>
<param name="frequency">The desired frequency of the output <paramref name="waveformType" />.</param>
<param name="amplitude">The desired amplitude of the output <paramref name="waveformType" />, in units of volts zero-to-peak.  Zero and negative values are valid.</param>
<param name="offset">The desired offset of the output <paramref name="waveformType" />.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AOChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AOChannelCollection.CreateCurrentChannel(System.String,System.String,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AOChannelCollection.CreateFunctionGenerationChannel(System.String,System.String,NationalInstruments.DAQmx.AOFunctionGenerationType,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateFunctionGenerationChannel" nihasget="0" nihasset="0" niparameters="physicalChannelName,nameToAssignChannel,waveformType,frequency,amplitude" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.AOFunctionGenerationType,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.AOChannel">
      <summary>Creates an <see cref="T:NationalInstruments.DAQmx.AOChannel" /> that continuously generates a waveform with the specificed waveform type, frequency, and amplitude. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.AOChannelCollection" />.
</summary>
<param name="physicalChannelName">The names of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see> to use to create one or more local virtual channels.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="waveformType">The <see cref="T:NationalInstruments.DAQmx.AOFunctionGenerationType" />  to generate.</param>
<param name="frequency">The desired frequency of the output <paramref name="waveformType" />.</param>
<param name="amplitude">The desired amplitude of the output <paramref name="waveformType" />, in units of volts zero-to-peak.  Zero and negative values are valid.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.AOChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.AOChannelCollection.CreateCurrentChannel(System.String,System.String,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DIChannelCollection" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DIChannelCollection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains the collection of digital input channels for a <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DIChannels" />
<seealso cref="T:NationalInstruments.DAQmx.DIChannel" />
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannelCollection.GetEnumerator" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetEnumerator" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Collections.IEnumerator">
      <summary>Returns an enumerator that you can use to iterate through the collection.</summary>
<returns>Enumerator for the collection.</returns>
<remarks>
For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> in the Microsoft
.NET Framework documentation.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannelCollection.CreateChannel(System.String,System.String,NationalInstruments.DAQmx.ChannelLineGrouping)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateChannel" nihasget="0" nihasset="0" niparameters="lines,nameToAssign,grouping" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.ChannelLineGrouping" nireturnvaluetype="NationalInstruments.DAQmx.DIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.DIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/DigLevelMeasGen.html');">measure digital signals</see>. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.DIChannelCollection" />.
</summary>
<param name="lines">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the digital lines or ports</see> to use to create the virtual channel.</param>
<param name="nameToAssign">The name of the virtual channel this method creates.</param>
<param name="grouping">The grouping of digital lines into one or more <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects. If you specify one or more entire ports with <paramref name="lines" />, you must set <paramref name="grouping" /> to <see cref="F:NationalInstruments.DAQmx.ChannelLineGrouping.OneChannelForAllLines" />.</param>
<remarks>
You can group digital lines into one <see cref="T:NationalInstruments.DAQmx.DIChannel" /> or separate them into multiple <see cref="T:NationalInstruments.DAQmx.DIChannel" /> objects. If you specify one or more entire ports with <paramref name="lines" /> by using port physical channel names, you cannot separate the ports into multiple channels. To separate ports into multiple channels, use this method multiple times with a different port each time.
<para>
If you do not specify a value for <paramref name="nameToAssign" />, NI-DAQmx uses the physical channel name for the virtual channel name. If you use <paramref name="nameToAssign" /> to create a name for the local virtual channel, you must use that name when you refer to this channel in other NI-DAQmx properties and methods.
</para><para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.DIChannelCollection.CreateChannel(System.String,System.String,NationalInstruments.DAQmx.ChannelLineGrouping)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.DIChannel" />.</returns>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannelCollection.Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets the number of elements in the collection.</summary>
<value>The number of elements contained in the collection.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannelCollection.All" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DIChannel">
      <summary>Gets a <see cref="T:NationalInstruments.DAQmx.DIChannel" /> that operates on all of the channels in the task.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.DIChannel" /> that operates on all of the channels in a task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannelCollection.Item(System.String)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="virtualChannelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.DIChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DIChannel" /> with the specified virtual channel name. In Visual C#, this property is the indexer.</summary>
<param name="virtualChannelName">One or more virtual channel names that the retrieved <see cref="T:NationalInstruments.DAQmx.DIChannel" /> operates on.</param>
<value>The specified <see cref="T:NationalInstruments.DAQmx.DIChannel" />.</value>
<seealso cref="T:NationalInstruments.DAQmx.DIChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>By using a comma or colon in <paramref name="virtualChannelName" />, you can retrieve more than one channel at a time. For more information refer to <see keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</see>.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannelCollection.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannelCollection.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannelCollection.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannelCollection.Item(System.Int64)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="index" niparametertypes="System.Int64" nireturnvaluetype="NationalInstruments.DAQmx.DIChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DIChannel" /> at the specified index. In Visual C#, this property is the indexer.</summary>
<param name="index">The zero-based index of the entry to locate in the collection.</param>
<value>The <see cref="T:NationalInstruments.DAQmx.DIChannel" /> at the specified index.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso cref="T:NationalInstruments.DAQmx.DIChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DIChannelCollection.CopyTo(System.Array,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CopyTo" nihasget="0" nihasset="0" niparameters="array,index" niparametertypes="System.Array,System.Int32" nireturnvaluetype="System.Void">
      <summary>
Copies the collection to an array or a portion of an array.  This operation is not supported for <see cref="T:NationalInstruments.DAQmx.DIChannelCollection" />.
</summary>
<param name="array">
Destination array for the collection.
</param>
<param name="index">
The index in the target array at which you want to begin copying the collection to.
</param>
<exception cref="T:System.NotSupportedException">
This method always throws a <see cref="T:System.NotSupportedException" />.
</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannelCollection.IsSynchronized" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsSynchronized" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannelCollection.SyncRoot" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SyncRoot" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Object">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DIChannelCollection.ICollection_Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ICollection_Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <exclude />
</member>
    <member name="T:NationalInstruments.DAQmx.DOChannelCollection" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DOChannelCollection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains the collection of digital output channels for a <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.DOChannels" />
<seealso cref="T:NationalInstruments.DAQmx.DOChannel" />
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannelCollection.GetEnumerator" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetEnumerator" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Collections.IEnumerator">
      <summary>Returns an enumerator that you can use to iterate through the collection.</summary>
<returns>Enumerator for the collection.</returns>
<remarks>
For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> in the Microsoft
.NET Framework documentation.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannelCollection.CreateChannel(System.String,System.String,NationalInstruments.DAQmx.ChannelLineGrouping)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateChannel" nihasget="0" nihasset="0" niparameters="lines,nameToAssign,grouping" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.ChannelLineGrouping" nireturnvaluetype="NationalInstruments.DAQmx.DOChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.DOChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/DigLevelMeasGen.html');">generate  digital signals</see>. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.DOChannelCollection" />.
</summary>
<param name="lines">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the digital lines or ports</see> to use to create the virtual channel.</param>
<param name="nameToAssign">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="grouping">The grouping of digital lines into one or more <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects. If you specify one or more entire ports with <paramref name="lines" />, you must set <paramref name="grouping" /> to <see cref="F:NationalInstruments.DAQmx.ChannelLineGrouping.OneChannelForAllLines" />.</param>
<remarks>
You can group digital lines into one <see cref="T:NationalInstruments.DAQmx.DOChannel" /> or separate them into multiple <see cref="T:NationalInstruments.DAQmx.DOChannel" /> objects. If you specify one or more entire ports with <paramref name="lines" /> by using port physical channel names, you cannot separate the ports into multiple channels. To separate ports into multiple channels, use this method multiple times with a different port each time.
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.DOChannelCollection.CreateChannel(System.String,System.String,NationalInstruments.DAQmx.ChannelLineGrouping)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.DOChannel" />.</returns>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannelCollection.Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets the number of elements in the collection.</summary>
<value>The number of elements contained in the collection.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannelCollection.All" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DOChannel">
      <summary>Gets a <see cref="T:NationalInstruments.DAQmx.DOChannel" /> that operates on all of the channels in the task.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.DOChannel" /> that operates on all of the channels in a task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannelCollection.Item(System.String)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="virtualChannelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.DOChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DOChannel" /> with the specified virtual channel name. In Visual C#, this property is the indexer.</summary>
<param name="virtualChannelName">One or more virtual channel names that the retrieved <see cref="T:NationalInstruments.DAQmx.DOChannel" /> operates on.</param>
<value>The specified <see cref="T:NationalInstruments.DAQmx.DOChannel" />.</value>
<seealso cref="T:NationalInstruments.DAQmx.DOChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>By using a comma or colon in <paramref name="virtualChannelName" />, you can retrieve more than one channel at a time. For more information refer to <see keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</see>.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannelCollection.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannelCollection.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannelCollection.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannelCollection.Item(System.Int64)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="index" niparametertypes="System.Int64" nireturnvaluetype="NationalInstruments.DAQmx.DOChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DOChannel" /> at the specified index. In Visual C#, this property is the indexer.</summary>
<param name="index">The zero-based index of the entry to locate in the collection.</param>
<value>The <see cref="T:NationalInstruments.DAQmx.DOChannel" /> at the specified index.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso cref="T:NationalInstruments.DAQmx.DOChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.DOChannelCollection.CopyTo(System.Array,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CopyTo" nihasget="0" nihasset="0" niparameters="array,index" niparametertypes="System.Array,System.Int32" nireturnvaluetype="System.Void">
      <summary>
Copies the collection to an array or a portion of an array.  This operation is not supported for <see cref="T:NationalInstruments.DAQmx.DOChannelCollection" />.
</summary>
<param name="array">
Destination array for the collection.
</param>
<param name="index">
The index in the target array at which you want to begin copying the collection to.
</param>
<exception cref="T:System.NotSupportedException">
This method always throws a <see cref="T:System.NotSupportedException" />.
</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannelCollection.IsSynchronized" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsSynchronized" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannelCollection.SyncRoot" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SyncRoot" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Object">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DOChannelCollection.ICollection_Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ICollection_Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <exclude />
</member>
    <member name="T:NationalInstruments.DAQmx.CIChannelCollection" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIChannelCollection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains the collection of counter/timer input channels for a <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.CIChannels" />
<seealso cref="T:NationalInstruments.DAQmx.CIChannel" />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.GetEnumerator" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetEnumerator" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Collections.IEnumerator">
      <summary>Returns an enumerator that you can use to iterate through the collection.</summary>
<returns>Enumerator for the collection.</returns>
<remarks>
For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> in the Microsoft
.NET Framework documentation.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateFrequencyChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIFrequencyStartingEdge,NationalInstruments.DAQmx.CIFrequencyMeasurementMethod,System.Double,System.Int64,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateFrequencyChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,edge,method,measurementTime,divisor,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIFrequencyStartingEdge,NationalInstruments.DAQmx.CIFrequencyMeasurementMethod,System.Double,System.Int64,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measure the frequency of a digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="edge">The edges between which to measure the frequency.
</param>
<param name="method">The method to use to calculate the frequency of the signal.</param>
<param name="measurementTime">The length of time to measure the frequency of a digital signal when <paramref name="method" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.HighFrequencyTwoCounter" />. Measurement accuracy increases with increased measurement time and with increased signal frequency. If you measure a high-frequency signal for too long, the count register might roll over, resulting in an incorrect measurement. 
</param>
<param name="divisor">The value by which to divide the input signal, when <paramref name="method" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.LargeRangeTwoCounter" />. The larger the <paramref name="divisor" />, the more accurate the measurement. However, too large a value might cause the count register to roll over, resulting in an incorrect measurement.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateFrequencyChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIFrequencyStartingEdge,NationalInstruments.DAQmx.CIFrequencyMeasurementMethod,System.Double,System.Int64,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePeriodChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPeriodStartingEdge,NationalInstruments.DAQmx.CIPeriodMeasurementMethod,System.Double,System.Int64,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePeriodChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,edge,method,measurementTime,divisor,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPeriodStartingEdge,NationalInstruments.DAQmx.CIPeriodMeasurementMethod,System.Double,System.Int64,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measure the period of a digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="edge">The edges between which to measure the period of the signal.</param>
<param name="method">The method to use to calculate the period of the signal.</param>
<param name="measurementTime">The length of time to measure the period of a digital signal when <paramref name="method" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.HighFrequencyTwoCounter" />. Measurement accuracy increases with increased measurement time and with increased signal frequency. If you measure a high-frequency signal for too long, the count register might roll over, resulting in an incorrect measurement. 
</param>
<param name="divisor">The value by which to divide the input signal, when <paramref name="method" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.LargeRangeTwoCounter" />. The larger the <paramref name="divisor" />, the more accurate the measurement. However, too large a value might cause the count register to roll over, resulting in an incorrect measurement.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePeriodChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPeriodStartingEdge,NationalInstruments.DAQmx.CIPeriodMeasurementMethod,System.Double,System.Int64,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateCountEdgesChannel(System.String,System.String,NationalInstruments.DAQmx.CICountEdgesActiveEdge,System.Int64,NationalInstruments.DAQmx.CICountEdgesCountDirection)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateCountEdgesChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,edge,initialCount,countDirection" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.CICountEdgesActiveEdge,System.Int64,NationalInstruments.DAQmx.CICountEdgesCountDirection" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/CountEdge.html');">count the number of rising or falling edges of a digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="edge">The edge of the source signal to increment or decrement the count.</param>
<param name="initialCount">The value from which to start counting.</param>
<param name="countDirection">The direction in which to change the count on each edge. </param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateCountEdgesChannel(System.String,System.String,NationalInstruments.DAQmx.CICountEdgesActiveEdge,System.Int64,NationalInstruments.DAQmx.CICountEdgesCountDirection)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseWidthChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseWidthStartingEdge,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePulseWidthChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,edge,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseWidthStartingEdge,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measure the width of a digital pulse</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="edge">The edge to begin measuring the pulse width. The value of <paramref name="edge" /> determines whether to measure a high or low pulse.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseWidthChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseWidthStartingEdge,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateSemiPeriodChannel(System.String,System.String,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateSemiPeriodChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> with the specified custom scale to <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measure the time between state transitions of a digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateSemiPeriodChannel(System.String,System.String,System.Double,System.Double,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateSemiPeriodChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CISemiPeriodUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateSemiPeriodChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CISemiPeriodUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measure the time between state transitions of a digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the measurement.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateSemiPeriodChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CISemiPeriodUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannelCollection.Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets the number of elements in the collection.</summary>
<value>The number of elements contained in the collection.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannelCollection.All" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Gets a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> that operates on all of the channels in the task.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.CIChannel" /> that operates on all of the channels in a task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannelCollection.Item(System.String)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="virtualChannelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.CIChannel" /> with the specified virtual channel name. In Visual C#, this property is the indexer.</summary>
<param name="virtualChannelName">One or more virtual channel names that the retrieved <see cref="T:NationalInstruments.DAQmx.CIChannel" /> operates on.</param>
<value>The specified <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</value>
<seealso cref="T:NationalInstruments.DAQmx.CIChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>By using a comma or colon in <paramref name="virtualChannelName" />, you can retrieve more than one channel at a time. For more information refer to <see keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</see>.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateFrequencyChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIFrequencyStartingEdge,NationalInstruments.DAQmx.CIFrequencyMeasurementMethod,System.Double,System.Int64,NationalInstruments.DAQmx.CIFrequencyUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateFrequencyChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,edge,method,measurementTime,divisor,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIFrequencyStartingEdge,NationalInstruments.DAQmx.CIFrequencyMeasurementMethod,System.Double,System.Int64,NationalInstruments.DAQmx.CIFrequencyUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measure the frequency of a digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="edge">The edges between which to measure the frequency.
</param>
<param name="method">The method to use to calculate the frequency of the signal.</param>
<param name="measurementTime">The length of time to measure the frequency of a digital signal when <paramref name="method" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.HighFrequencyTwoCounter" />. Measurement accuracy increases with increased measurement time and with increased signal frequency. If you measure a high-frequency signal for too long, the count register might roll over, resulting in an incorrect measurement. 
</param>
<param name="divisor">The value by which to divide the input signal, when <paramref name="method" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.LargeRangeTwoCounter" />. The larger the <paramref name="divisor" />, the more accurate the measurement. However, too large a value might cause the count register to roll over, resulting in an incorrect measurement.</param>
<param name="units">The units to use to return the measurement.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateFrequencyChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIFrequencyStartingEdge,NationalInstruments.DAQmx.CIFrequencyMeasurementMethod,System.Double,System.Int64,NationalInstruments.DAQmx.CIFrequencyUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePeriodChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPeriodStartingEdge,NationalInstruments.DAQmx.CIPeriodMeasurementMethod,System.Double,System.Int64,NationalInstruments.DAQmx.CIPeriodUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePeriodChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,edge,method,measurementTime,divisor,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPeriodStartingEdge,NationalInstruments.DAQmx.CIPeriodMeasurementMethod,System.Double,System.Int64,NationalInstruments.DAQmx.CIPeriodUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measure the period of a digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="edge">The edges between which to measure the period of the signal.</param>
<param name="method">The method to use to calculate the period of the signal.</param>
<param name="measurementTime">The length of time to measure the period of a digital signal when <paramref name="method" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.HighFrequencyTwoCounter" />. Measurement accuracy increases with increased measurement time and with increased signal frequency. If you measure a high-frequency signal for too long, the count register might roll over, resulting in an incorrect measurement. 
</param>
<param name="divisor">The value by which to divide the input signal, when <paramref name="method" /> is <see cref="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.LargeRangeTwoCounter" />. The larger the <paramref name="divisor" />, the more accurate the measurement. However, too large a value might cause the count register to roll over, resulting in an incorrect measurement.</param>
<param name="units">The units to use to return the measurement.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePeriodChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPeriodStartingEdge,NationalInstruments.DAQmx.CIPeriodMeasurementMethod,System.Double,System.Int64,NationalInstruments.DAQmx.CIPeriodUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseWidthChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseWidthStartingEdge,NationalInstruments.DAQmx.CIPulseWidthUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePulseWidthChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,edge,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseWidthStartingEdge,NationalInstruments.DAQmx.CIPulseWidthUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measure the width of a digital pulse</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="edge">The edge to begin measuring the pulse width. The value of <paramref name="edge" /> determines whether to measure a high or low pulse.</param>
<param name="units">The units to use to return the measurement.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseWidthChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseWidthStartingEdge,NationalInstruments.DAQmx.CIPulseWidthUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannelCollection.Item(System.Int64)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="index" niparametertypes="System.Int64" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.CIChannel" /> at the specified index in the collection. In Visual C#, this property is the indexer.</summary>
<param name="index">The index of the channel to get.</param>
<value>The specified <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso cref="T:NationalInstruments.DAQmx.CIChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CopyTo(System.Array,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CopyTo" nihasget="0" nihasset="0" niparameters="array,index" niparametertypes="System.Array,System.Int32" nireturnvaluetype="System.Void">
      <summary>
Copies the collection to an array or a portion of an array.  This operation is not supported for <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<param name="array">
Destination array for the collection.
</param>
<param name="index">
The index in the target array at which you want to begin copying the collection to.
</param>
<exception cref="T:System.NotSupportedException">
This method always throws a <see cref="T:System.NotSupportedException" />.
</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannelCollection.IsSynchronized" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsSynchronized" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannelCollection.SyncRoot" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SyncRoot" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Object">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateTwoEdgeSeparationChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTwoEdgeSeparationChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,firstEdge,secondEdge,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> that <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measures the amount of time between the rising or falling edge of one digital signal and the rising or falling edge of another digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counter</see> to use to create the virtual channels.</param>
<param name="nameToAssignChannel">The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="firstEdge">The edge of the first signal to start each measurement.</param>
<param name="secondEdge">The edge of the first signal to stop each measurement.</param>
<param name="units">The units to use to return time or period measurements.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para><para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified. <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateTwoEdgeSeparationChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateTwoEdgeSeparationChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateTwoEdgeSeparationChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,firstEdge,secondEdge,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> with the specified custom scale that <see href="javascript:LaunchHelp('daqhelp.chm::/measTime.html');">measures the amount of time between the rising or falling edge of one digital signal and the rising or falling edge of another digital signal</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counter</see> to use to create the virtual channels.</param>
<param name="nameToAssignChannel">The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in units.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in units.</param>
<param name="firstEdge">The edge of the first signal to start each measurement.</param>
<param name="secondEdge">The edge of the first signal to stop each measurement.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified. <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateTwoEdgeSeparationChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge,NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge,System.String)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateAngularEncoderChannel(System.String,System.String,NationalInstruments.DAQmx.CIEncoderDecodingType,System.Boolean,System.Double,NationalInstruments.DAQmx.CIEncoderZIndexPhase,System.Int32,System.Double,NationalInstruments.DAQmx.CIAngularEncoderUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateAngularEncoderChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,encoderDecodingType,zIndexEnable,zIndexValue,zIndexPhase,pulsesPerRevolution,initialAngle,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.CIEncoderDecodingType,System.Boolean,System.Double,NationalInstruments.DAQmx.CIEncoderZIndexPhase,System.Int32,System.Double,NationalInstruments.DAQmx.CIAngularEncoderUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/quadEncoders.html');">angular encoder</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/angDisplaceRVDT.html');">measure angular position</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channels. You can pass a string that contains a list or range  of counters to this input.</param>
<param name="nameToAssignChannel">The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="encoderDecodingType">The count and interpretation of the pulses that the encoder generates on signal A and signal B. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" />, <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" />, and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> are valid for quadrature encoders only. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.TwoPulseCounting" /> is valid only for two-pulse encoders. 
</param>
<param name="zIndexEnable">Whether to use <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/zIndexing.html');">z indexing</see> for the channel.</param>
<param name="zIndexValue">The value, in <paramref name="units" />, to which to reset the measurement when signal Z is high, and signal A and signal B are at the states you specify with <paramref name="zIndexPhase" />.</param>
<param name="zIndexPhase">The states that signal A and signal B must be at while signal Z is high for NI-DAQmx to reset the measurement. If the signal Z is never high while the signal A and signal B are high, for example, you must choose a phase other than <see cref="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" />.</param>
<param name="pulsesPerRevolution">The number of pulses that the encoder generates per revolution. This value is the number of pulses on one of either the A signal or the B signal, not the total number of pulses on both the A and B signals.</param>
<param name="initialAngle">The starting angle of the encoder. This value is in the units that you specify in the <paramref name="units" /> parameter.</param>
<param name="units">The units to use to return angular position measurements from the channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
<see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" /> and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> decoding are more sensitive to smaller changes in position than <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" /> encoding, with <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> being the most sensitive. However, more sensitive decoding is more likely to produce erroneous measurements if vibration exists in the encoder or other noise exists in the signals.
</para>
<para>
When signal Z goes high and how long it stays high varies from encoder to encoder. Refer to the documentation for the encoder to determine the timing of signal Z with respect to signal A and signal B.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateAngularEncoderChannel(System.String,System.String,NationalInstruments.DAQmx.CIEncoderDecodingType,System.Boolean,System.Double,NationalInstruments.DAQmx.CIEncoderZIndexPhase,System.Int32,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateAngularEncoderChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,encoderDecodingType,zIndexEnable,zIndexValue,zIndexPhase,pulsesPerRevolution,initialAngle,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.CIEncoderDecodingType,System.Boolean,System.Double,NationalInstruments.DAQmx.CIEncoderZIndexPhase,System.Int32,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> with the specified custom scale that uses an <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/quadEncoders.html');">angular encoder</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/angDisplaceRVDT.html');">measure angular position</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channels. You can pass a string that contains a list or range  of counters to this input.</param>
<param name="nameToAssignChannel">The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="encoderDecodingType">
The count and interpretation of the pulses that the encoder generates on signal A and signal B. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" />, <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" />, and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> are valid for quadrature encoders only. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.TwoPulseCounting" /> is valid only for two-pulse encoders.</param>
<param name="zIndexEnable">Whether to use <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/zIndexing.html');">z indexing</see> for the channel.</param>
<param name="zIndexValue">The value, in units, to which to reset the measurement when signal Z is high, and signal A and signal B are at the states you specify with <paramref name="zIndexPhase" />.</param>
<param name="zIndexPhase">The states signal A and signal B must be at while signal Z is high for NI-DAQmx to reset the measurement. If the signal Z is never high while the signal A and signal B are high, for example, you must choose a phase other than <see cref="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" />.</param>
<param name="pulsesPerRevolution">The number of pulses that the encoder generates per revolution. This value is the number of pulses on one of either the A signal or the B signal, not the total number of pulses on both the A and B signals.</param>
<param name="initialAngle">The starting angle of the encoder. This value is in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.
</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>
<see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" /> and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> decoding are more sensitive to smaller changes in position than <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" /> encoding, with <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> being the most sensitive. However, more sensitive decoding is more likely to produce erroneous measurements if vibration exists in the encoder or other noise exists in the signals.
</para>
<para>
When signal Z goes high and how long it stays high varies from encoder to encoder. Refer to the documentation for the encoder to determine the timing of signal Z with respect to signal A and signal B.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateLinearEncoderChannel(System.String,System.String,NationalInstruments.DAQmx.CIEncoderDecodingType,System.Boolean,System.Double,NationalInstruments.DAQmx.CIEncoderZIndexPhase,System.Double,System.Double,NationalInstruments.DAQmx.CILinearEncoderUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateLinearEncoderChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,encoderDecodingType,zIndexEnable,zIndexValue,zIndexPhase,distancePerPulse,initialPosition,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.CIEncoderDecodingType,System.Boolean,System.Double,NationalInstruments.DAQmx.CIEncoderZIndexPhase,System.Double,System.Double,NationalInstruments.DAQmx.CILinearEncoderUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/twoPulse.html');">linear encoder</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/linDisplaceLVDT.html');">measure linear position</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">name of the counter</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="encoderDecodingType">The count and interpretation of the pulses that the encoder generates on signal A and signal B. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" />, <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" />, and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> are valid for quadrature encoders only.</param>
<param name="zIndexEnable">Whether to use <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/zIndexing.html');">z indexing</see> for the channel.</param>
<param name="zIndexValue">The value, in <paramref name="units" />, to which to reset the measurement when signal Z is high, and signal A and signal B are at the states you specify with <paramref name="zIndexPhase" />.</param>
<param name="zIndexPhase">The states signal A and signal B must be at while signal Z is high for NI-DAQmx to reset the measurement. If the signal Z is never high while the signal A and signal B are high, for example, you must choose a phase other than <see cref="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" />.</param>
<param name="distancePerPulse">The distance measured for each pulse that the encoder generates. This value is in the units that you specify in the  <paramref name="units" /> parameter.</param>
<param name="initialPosition">The position of the encoder when the measurement begins. This value is in the units that you specify in the <paramref name="units" /> parameter.</param>
<param name="units">The units to use to return linear position measurements from the channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods.</para>
<para>
<see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" /> and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> decoding are more sensitive to smaller changes in position than <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" /> encoding, with <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> being the most sensitive. However, more sensitive decoding is more likely to produce erroneous measurements if vibration exists in the encoder or other noise exists in the signals.
</para>
<para>
When signal Z goes high and how long it stays high varies from encoder to encoder. Refer to the documentation for the encoder to determine the timing of signal Z with respect to signal A and signal B.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateLinearEncoderChannel(System.String,System.String,NationalInstruments.DAQmx.CIEncoderDecodingType,System.Boolean,System.Double,NationalInstruments.DAQmx.CIEncoderZIndexPhase,System.Double,System.Double,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateLinearEncoderChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,encoderDecodingType,zIndexEnable,zIndexValue,zIndexPhase,distancePerPulse,initialPosition,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.CIEncoderDecodingType,System.Boolean,System.Double,NationalInstruments.DAQmx.CIEncoderZIndexPhase,System.Double,System.Double,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> with the specified custom scale that uses a <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/twoPulse.html');">linear encoder</see> to <see href="javascript:LaunchHelp('daqhelp.chm::/linDisplaceLVDT.html');">measure linear position</see>. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">name of the counter</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="encoderDecodingType">The count and interpretation of the pulses that the encoder generates on signal A and signal B. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" />, <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" />, and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> are valid for quadrature encoders only.</param>
<param name="zIndexEnable">Whether to use <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/zIndexing.html');">z indexing</see> for the channel.</param>
<param name="zIndexValue">The value, in units, to which to reset the measurement when signal Z is high, and signal A and signal B are at the states you specify with <paramref name="zIndexPhase" />.</param>
<param name="zIndexPhase">The states signal A and signal B must be at while signal Z is high for NI-DAQmx to reset the measurement. If the signal Z is never high while the signal A and signal B are high, for example, you must choose a phase other than <see cref="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" />.</param>
<param name="distancePerPulse">The distance measured for each pulse the encoder generates. This value is in units.</param>
<param name="initialPosition">The position of the encoder when the measurement begins. This value is in units.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to apply to the local virtual channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods.</para>
<para>
<see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" /> and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> decoding are more sensitive to smaller changes in position than <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" /> encoding, with <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> being the most sensitive. However, more sensitive decoding is more likely to produce erroneous measurements if vibration exists in the encoder or other noise exists in the signals.
</para>
<para>
When signal Z goes high and how long it stays high varies from encoder to encoder. Refer to the documentation for the encoder to determine the timing of signal Z with respect to signal A and signal B.
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  This method does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateGpsTimestampChannel(System.String,System.String,NationalInstruments.DAQmx.CIGpsSyncMethod,NationalInstruments.DAQmx.CITimestampUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateGpsTimestampChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,method,units" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.CIGpsSyncMethod,NationalInstruments.DAQmx.CITimestampUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> that uses a special purpose counter to <see href="javascript:LaunchHelp('daqhelp.chm::/GPSStampMeas.html');">take a timestamp</see> and synchronize that counter to a GPS receiver. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">name of the counter</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="method">The method to use to synchronize the counter to a GPS receiver.</param>
<param name="units">The units to use to return GPS timestamp measurements from the channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para><para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateGpsTimestampChannel(System.String,System.String,NationalInstruments.DAQmx.CIGpsSyncMethod,NationalInstruments.DAQmx.CITimestampUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateGpsTimestampChannel(System.String,System.String,NationalInstruments.DAQmx.CIGpsSyncMethod,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateGpsTimestampChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,method,customScaleName" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.CIGpsSyncMethod,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> that uses a special purpose counter to <see href="javascript:LaunchHelp('daqhelp.chm::/GPSStampMeas.html');">take a timestamp</see> and synchronize that counter to a GPS receiver. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">name of the counter</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="method">The method to use to synchronize the counter to a GPS receiver.</param>
<param name="customScaleName">The name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to use to return GPS timestamp measurements from the channel.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods.</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreateGpsTimestampChannel(System.String,System.String,NationalInstruments.DAQmx.CIGpsSyncMethod,NationalInstruments.DAQmx.CITimestampUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
</member>
    <member name="P:NationalInstruments.DAQmx.CIChannelCollection.ICollection_Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ICollection_Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseChannelFrequency(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseFrequencyUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePulseChannelFrequency" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseFrequencyUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> to measure digital pulses defined by frequency and <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/DutyCycle.html');">duty cycle</see>. This function adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the measurement.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseChannelFrequency(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseFrequencyUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseChannelTime(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseTimeUnits)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePulseChannelTime" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumValue,maximumValue,units" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseTimeUnits" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> to measure digital pulses defined by the amount of time the pulse is at a high and low state. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="units" />.</param>
<param name="units">The units to use to return the measurement.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseChannelTime(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIPulseTimeUnits)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseChannelTicks(System.String,System.String,System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePulseChannelTicks" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,sourceTerminal,minimumValue,maximumValue" niparametertypes="System.String,System.String,System.String,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.CIChannel" /> to measure digital pulses defined by the number of timebase ticks that the pulse is at the high and low states. This method adds one channel to the <see cref="T:NationalInstruments.DAQmx.CIChannelCollection" />.
</summary>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.</returns>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="sourceTerminal">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> to which you connect an external timebase.</param>
<param name="minimumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">minimum value</see> expected from the measurement, in <paramref name="ticks" />.</param>
<param name="maximumValue">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/limitSettings.html');">maximum value</see> expected from the measurement, in <paramref name="ticks" />.</param>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>
<para>This method creates a virtual channel for the physical channel name you specify.</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.CIChannelCollection.CreatePulseChannelTicks(System.String,System.String,System.String,System.Double,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CIChannelCollection.CreateDutyCycleChannel(System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIDutyCycleStartingEdge,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreateDutyCycleChannel" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,minimumFrequency,maximumFrequency,edge,customScaleName" niparametertypes="System.String,System.String,System.Double,System.Double,NationalInstruments.DAQmx.CIDutyCycleStartingEdge,System.String" nireturnvaluetype="NationalInstruments.DAQmx.CIChannel">
      <summary>
Creates <see cref="T:NationalInstruments.DAQmx.CIChannel" />  to duty cycle of a digital pulse.

</summary>
<param name="counter">
The name of the counter to use to create virtual channels.
</param>
<param name="nameToAssignChannel">
The name to assign to the created channel. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="minimumFrequency">
The minimum frequency you expect to measure.
</param>
<param name="maximumFrequency">
The maximum frequency you expect to measure.

</param>
<param name="edge">
Specifies between which edges to measure the frequency or period of the signal.
</param>
<param name="customScaleName">
The name of a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>  to apply to the channel. 
</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.CIChannel" />.
</returns>
<remarks>
<para>
With the exception of <see href="javascript:launchSharedHelp('mxdevconsid.chm::/multicounterdevices.html');">devices that support multi-counter tasks</see>, you can create only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />  at a time with this function because a task can contain only one <see cref="T:NationalInstruments.DAQmx.CIChannel" />. To read from multiple counters simultaneously, use a separate task for each counter.</para>

<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="physicalChannelName" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception></member>
    <member name="T:NationalInstruments.DAQmx.COChannelCollection" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="COChannelCollection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains the collection of counter/timer output channels for a <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.COChannels" />
<seealso cref="T:NationalInstruments.DAQmx.COChannel" />
</member>
    <member name="M:NationalInstruments.DAQmx.COChannelCollection.GetEnumerator" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetEnumerator" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Collections.IEnumerator">
      <summary>Returns an enumerator that you can use to iterate through the collection.</summary>
<returns>Enumerator for the collection.</returns>
<remarks>
For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> in the Microsoft
.NET Framework documentation.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.COChannelCollection.CreatePulseChannelFrequency(System.String,System.String,NationalInstruments.DAQmx.COPulseFrequencyUnits,NationalInstruments.DAQmx.COPulseIdleState,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePulseChannelFrequency" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,units,idleState,initialDelay,frequency,dutyCycle" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.COPulseFrequencyUnits,NationalInstruments.DAQmx.COPulseIdleState,System.Double,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.COChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.COChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Generating_Pulses.html');">generate digital pulses</see> defined by frequency and duty cycle. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.COChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.
</param>
<param name="units">The units to use to define pulse frequency.</param>
<param name="idleState">The resting state of the output terminal.</param>
<param name="initialDelay">The amount of time in seconds to wait before generating the first pulse. </param>
<param name="frequency">The frequency at which to generate the pulse.</param>
<param name="dutyCycle">The width of the pulse divided by pulse period. NI-DAQmx uses this ratio, combined with frequency, to determine both pulse width and the interval between pulses.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.COChannel" />.</returns>
<remarks>
<para>
When you use this method, the pulses appear on the default output terminal of the counter unless you select a different output terminal.
</para>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.COChannelCollection.CreatePulseChannelFrequency(System.String,System.String,NationalInstruments.DAQmx.COPulseFrequencyUnits,NationalInstruments.DAQmx.COPulseIdleState,System.Double,System.Double,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.COChannelCollection.CreatePulseChannelTime(System.String,System.String,NationalInstruments.DAQmx.COPulseTimeUnits,NationalInstruments.DAQmx.COPulseIdleState,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePulseChannelTime" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,units,idleState,initialDelay,lowTime,highTime" niparametertypes="System.String,System.String,NationalInstruments.DAQmx.COPulseTimeUnits,NationalInstruments.DAQmx.COPulseIdleState,System.Double,System.Double,System.Double" nireturnvaluetype="NationalInstruments.DAQmx.COChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.COChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Generating_Pulses.html');">generate digital pulses</see> defined by the amount of time that the pulse is at the high and low states. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.COChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="units">The units to use to define pulse high and low time.</param>
<param name="idleState">The resting state of the output terminal.</param>
<param name="initialDelay">The amount of time in seconds to wait before generating the first pulse.</param>
<param name="lowTime">The amount of time that the pulse is low.</param>
<param name="highTime">The amount of time that the pulse is high.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.COChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.COChannelCollection.CreatePulseChannelTime(System.String,System.String,NationalInstruments.DAQmx.COPulseTimeUnits,NationalInstruments.DAQmx.COPulseIdleState,System.Double,System.Double,System.Double)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.COChannelCollection.CreatePulseChannelTicks(System.String,System.String,System.String,NationalInstruments.DAQmx.COPulseIdleState,System.Int32,System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CreatePulseChannelTicks" nihasget="0" nihasset="0" niparameters="counter,nameToAssignChannel,sourceTerminal,idleState,initialDelay,lowTicks,highTicks" niparametertypes="System.String,System.String,System.String,NationalInstruments.DAQmx.COPulseIdleState,System.Int32,System.Int32,System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.COChannel">
      <summary>Creates a <see cref="T:NationalInstruments.DAQmx.COChannel" /> to <see href="javascript:LaunchHelp('daqhelp.chm::/Generating_Pulses.html');">generate digital pulses</see> defined by the number of timebase ticks that the pulse is at the high and low states. This method adds one or more channels to the <see cref="T:NationalInstruments.DAQmx.COChannelCollection" />.
</summary>
<param name="counter">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">names of the counters</see> to use to create the virtual channel.</param>
<param name="nameToAssignChannel">
One or more names to assign to the created local virtual channels. To use the physical channel name as the local virtual channel name, set this value to <see cref="F:System.String.Empty" />.</param>
<param name="sourceTerminal">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/terminal.html');">terminal</see> to which you connect an external timebase.</param>
<param name="idleState">The resting state of the output terminal.</param>
<param name="initialDelay">The number of timebase ticks to wait before generating the first pulse. Specify the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termnamesyntax.html');">terminal name</see>.</param>
<param name="lowTicks">The number of timebase ticks that the pulse is low.</param>
<param name="highTicks">The number of timebase ticks that the pulse is high.</param>
<returns>The newly created <see cref="T:NationalInstruments.DAQmx.COChannel" />.</returns>
<remarks>
<para>
This method creates a local virtual channel for every physical channel name you specify. If you create multiple local virtual channels with one call to this method, you can specify a comma-delimited list of names for <paramref name="nameToAssignChannel" />. If you provide fewer local virtual channel names in <paramref name="nameToAssignChannel" /> than you create, NI-DAQmx <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/nameAssignment.html');">automatically assigns names</see> to the local virtual channels.
</para>
<para>
If you do not provide a value for <paramref name="nameToAssignChannel" />, NI-DAQmx uses the <paramref name="counter" /> as the local virtual channel name. If you use <paramref name="nameToAssignChannel" /> to create a name for the local virtual channel, you must use this name in other properties and methods. 
</para>
<para>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.COChannelCollection.CreatePulseChannelTicks(System.String,System.String,System.String,NationalInstruments.DAQmx.COPulseIdleState,System.Int32,System.Int32,System.Int32)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannelCollection.Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets the number of elements in the collection.</summary>
<value>The number of elements contained in the collection.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannelCollection.All" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.COChannel">
      <summary>Gets a <see cref="T:NationalInstruments.DAQmx.COChannel" /> that operates on all of the channels in the task.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.COChannel" /> that operates on all of the channels in a task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannelCollection.Item(System.String)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="virtualChannelName" niparametertypes="System.String" nireturnvaluetype="NationalInstruments.DAQmx.COChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.COChannel" /> with the specified virtual channel name. In Visual C#, this property is the indexer.</summary>
<param name="virtualChannelName">One or more virtual channel names that the retrieved <see cref="T:NationalInstruments.DAQmx.COChannel" /> operates on.</param>
<value>The specified <see cref="T:NationalInstruments.DAQmx.COChannel" />.</value>
<seealso cref="T:NationalInstruments.DAQmx.COChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>By using a comma or colon in <paramref name="virtualChannelName" />, you can retrieve more than one channel at a time. For more information refer to <see keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</see>.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.COChannelCollection.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.COChannelCollection.__dtor" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="__dtor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.COChannelCollection.Finalize" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/26/2003 3:48:49 PM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.COChannelCollection.Item(System.Int64)" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Item" nihasget="1" nihasset="0" niparameters="index" niparametertypes="System.Int64" nireturnvaluetype="NationalInstruments.DAQmx.COChannel">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.COChannel" /> at the specified index. In Visual C#, this property is the indexer.</summary>
<param name="index">The zero-based index of the entry to locate in the collection.</param>
<value>The <see cref="T:NationalInstruments.DAQmx.COChannel" /> at the specified index.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso cref="T:NationalInstruments.DAQmx.COChannel" />
<seealso keywordType="mstudio" keyword="ManipulateDAQChannel">Manipulating Channels in an NI-DAQmx Task</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.COChannelCollection.CopyTo(System.Array,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CopyTo" nihasget="0" nihasset="0" niparameters="array,index" niparametertypes="System.Array,System.Int32" nireturnvaluetype="System.Void">
      <summary>
Copies the collection to an array or a portion of an array.  This operation is not supported for <see cref="T:NationalInstruments.DAQmx.COChannelCollection" />.
</summary>
<param name="array">
Destination array for the collection.
</param>
<param name="index">
The index in the target array at which you want to begin copying the collection to.
</param>
<exception cref="T:System.NotSupportedException">
This method always throws a <see cref="T:System.NotSupportedException" />.
</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.COChannelCollection.IsSynchronized" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IsSynchronized" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.COChannelCollection.SyncRoot" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SyncRoot" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Object">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.COChannelCollection.ICollection_Count" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ICollection_Count" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <exclude />
</member>
    <member name="T:NationalInstruments.DAQmx.PolynomialDirection" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PolynomialDirection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the direction of the conversion the provided polynomial coefficients perform.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PolynomialDirection.Reverse" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Reverse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The provided coefficients are the coefficients of the reverse polynomial.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PolynomialDirection.Forward" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Forward" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The provided coefficients are the coefficients of the forward polynomial.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogUnscaledReader" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogUnscaledReader" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods that read unscaled samples from a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogUnscaledReader" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.AnalogUnscaledReader" /> class to read from the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to read.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for readers to access the samples generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.ReadInt16(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadInt16" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Int16[,]">
      <summary>Reads one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 16-bit integer samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of unscaled 16-bit integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.ReadUInt16(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadUInt16" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.UInt16[,]">
      <summary>Reads one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 16-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of unscaled 16-bit unsigned integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt16(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadInt16" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 16-bit integer samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt16(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int16[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt16(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt16(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of unscaled 16-bit integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt16(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt16(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadUInt16" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 16-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt16(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadUInt16(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadUInt16(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadUInt16" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt16[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt16(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt16(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of unscaled 16-bit unsigned integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadUInt16(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadUInt16(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt16(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogUnscaledReader.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 

<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.ReadInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Int32[,]">
      <summary>Reads one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 32-bit integer samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of unscaled 32-bit integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.ReadUInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.UInt32[,]">
      <summary>Reads one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 32-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of unscaled 32-bit unsigned integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<remarks>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 32-bit integer samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of unscaled 32-bit integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 32-bit unsigned integer samples from one or more <see cref="T:NationalInstruments.DAQmx.AIChannel" /> objects in a task.
</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 2D array of unscaled 32-bit unsigned integer samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from that channel. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.EndReadUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledReader.BeginReadUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogUnscaledReader.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 

<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogUnscaledWriter" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogUnscaledWriter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods that write unscaled samples to a task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AnalogUnscaledWriter" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.AnalogUnscaledWriter" /> class to write to the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to write to.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for writers to provide samples to be generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.Write(System.Boolean,System.UInt16[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Write" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt16[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 16-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.Write(System.Boolean,System.Int16[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Write" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int16[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 16-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.BeginWrite(System.Boolean,System.UInt16[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWrite" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt16[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 16-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.BeginWrite(System.Boolean,System.Int16[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWrite" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int16[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 16-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.EndWrite(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndWrite" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Void">
      <summary>Handles the end of an asynchronous write initiated with <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.BeginWrite(System.Boolean,System.UInt16[0:,0:],System.AsyncCallback,System.Object)" />.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.BeginWrite(System.Boolean,System.UInt16[0:,0:],System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.EndWrite(System.IAsyncResult)" /> before the asynchronous write represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.EndWrite(System.IAsyncResult)" /> waits for the write to complete before returning.  For a write to a buffered task, the write is considered complete when all of the written samples have been transferred to the task buffer.  Use <see cref="P:NationalInstruments.DAQmx.Task.IsDone" /> or <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.TimeSpan)" /> on the <see cref="T:NationalInstruments.DAQmx.Task" /> object to determine if a task has generated all of the data it was configured to generate.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.BeginWrite(System.Boolean,System.UInt16[0:,0:],System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.IndexOutOfRangeException">The data provided to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.BeginWrite(System.Boolean,System.UInt16[0:,0:],System.AsyncCallback,System.Object)" /> had a non-zero lower bound.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogUnscaledWriter.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />.
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>. 

</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.Write(System.Boolean,System.UInt32[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Write" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.UInt32[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 32-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.Write(System.Boolean,System.Int32[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Write" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,System.Int32[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 32-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<remarks>If the task uses on-demand timing, this method returns only after the device generates all samples.  If the task uses any timing type other than on-demand, this method returns immediately and does not wait for the device to generate all samples. Your application must call the <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone" /> method to block until the device has generated all samples.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.BeginWrite(System.Boolean,System.UInt32[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWrite" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.UInt32[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 32-bit unsigned integer samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.BeginWrite(System.Boolean,System.Int32[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWrite" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,System.Int32[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/unscaledData.html');">unscaled</see> 32-bit integer samples to one or more <see cref="T:NationalInstruments.DAQmx.AOChannel" /> objects in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task. The order of the lines in the array corresponds to the order in which you add the lines to the channel.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.AnalogUnscaledWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.AnalogUnscaledWriter.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>. 

</member>
    <member name="T:NationalInstruments.DAQmx.ScaleType" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ScaleType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see>.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScaleType.Table" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Table" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>An array of raw values is mapped to an array of corresponding scaled values, with all other values scaled proportionally.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScaleType.RangeMap" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RangeMap" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Values are scaled proportionally from a range of raw values to a range of scaled values.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScaleType.Polynomial" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Polynomial" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Values are scaled by using an <format type="italics">n</format>th order polynomial equation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScaleType.Linear" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Linear" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Values are scaled linearly.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ExportSignal" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ExportSignal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the name of the trigger, clock, or event to export.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.CounterOutputEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterOutputEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Signal a counter generates. Each time the counter reaches terminal count, this signal toggles or pulses.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.AIHoldCompleteEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AIHoldCompleteEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Signal an E Series device generates when the device latches analog input data (the ADC enters "hold" mode) and it is safe for any external switching hardware to remove the signal and replace it with the next signal. This event does not indicate the completion of the actual analog-to-digital conversion.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.AdvanceCompleteEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdvanceCompleteEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Signal a switch product generates after it both executes the command(s) in a scan list entry and waits for the settling time to elapse.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.Timebase20MHz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Timebase20MHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Output of an oscillator that is the onboard source of the Master Timebase. Other timebases are derived from this clock.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.AIConvertClock" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AIConvertClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Clock that causes an analog-to-digital conversion on an E Series device. One conversion corresponds to a single sample from one channel.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.ReferenceTrigger" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReferenceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger that establishes the reference point between pretrigger and posttrigger samples.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.AdvanceTrigger" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdvanceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger that moves a switch to the next entry in a scan list.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.SampleClock" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Clock the device uses to time each sample.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.StartTrigger" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="StartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger that begins a measurement or generation.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.WatchdogExpiredEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WatchdogExpiredEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The signal that a static DIO device generates when the watchdog timer expires.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.ChangeDetectionEvent" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ChangeDetectionEvent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The signal that a static DIO device generates when the device detects a rising or falling edge on any of the lines or ports you selected when you configured change detection timing.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExportSignal.ReferenceClock10MHz" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReferenceClock10MHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Output of an oscillator that you can use to synchronize multiple devices.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ExternalCalibrationSession" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ExternalCalibrationSession" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents a handle to an <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> session on a device.</summary>
<threadsafety safety="safe" />
<remarks>Use <see cref="M:NationalInstruments.DAQmx.Device.StartExternalCalibration(System.String)" /> to start an external calibration and create an instance of this class.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.ExternalCalSession" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustESeries(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustESeries" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants on an E Series device.</summary>
<param name="referenceVoltage">The known voltage to use as a reference for calibration. This voltage must be between +6.000 V and +9.999 V.</param>
<remarks>You must <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/calSigESeries.html');">connect a known voltage to the device</see> and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.SaveChangesAndDispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveChangesAndDispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Closes an open <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> session and saves the calibration changes made in the session.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustAOSeries(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustAOSeries" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants on an AO Series device.</summary>
<param name="referenceVoltage">The known voltage to use as a reference for calibration. This voltage must be between +6.000 V and +9.999 V.</param>
<remarks>You must <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/calSigAOSeries.html');">connect a known voltage to the device</see> and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustSCBaseboard(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustSCBaseboard" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for the baseboard of an SC Series device.</summary>
<param name="referenceVoltage">The known voltage to use as a reference for calibration. This voltage must be between +6.000 V and +9.999 V. </param>
<remarks>You must connect a known voltage to the device and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsaAI(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustDsaAI" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for the analog input section of a DSA device without shorting the input terminals.</summary>
<param name="referenceVoltage">The known voltage to use as a reference for calibration. This voltage must be between +4.9 V and +9.1 V.</param>
<remarks>You must connect a known voltage to the device and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsaTimebase(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustDsaTimebase" nihasget="0" nihasset="0" niparameters="referenceFrequency" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for the timebase of a DSA device with an adjustible oscillator.</summary>
<param name="referenceFrequency">The frequency, in hertz, of the signal to use as a reference for calibration.</param>
<remarks>You must connect a sinusoidal signal with a known frequency to the device and specify that frequency with <paramref name="referenceFrequency" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustSSeries(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustSSeries" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an S Series device.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration. This voltage must be between +6.000 V and +9.999 V.</param>
<remarks>You must connect a known voltage to the device and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustMSeries(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustMSeries" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an M Series device.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration. This voltage must be between +6.000 V and +9.999 V.</param>
<remarks>You must <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/MCalConn.html');">connect a known voltage to the device</see> and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsaAO(System.Int64,System.Double,System.Double,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustDsaAO" nihasget="0" nihasset="0" niparameters="channel,requestedLowVoltage,actualLowVoltage,requestedHighVoltage,actualHighVoltage,gainSetting" niparametertypes="System.Int64,System.Double,System.Double,System.Double,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for the analog output section of a DSA device.</summary>
<param name="channel">The number of the channel to calibrate. This number is the numeric portion of the physical channel name, not the full physical channel name.</param>
<param name="requestedLowVoltage">The low voltage you attempted to generate at the <paramref name="gainSetting" /> you specified.</param>
<param name="actualLowVoltage">The actual low voltage as measured by an external sensor.</param>
<param name="requestedHighVoltage">The high voltage you attempted to generate at the <paramref name="gainSetting" /> you specified.</param>
<param name="actualHighVoltage">The actual high voltage as measured by an external sensor.</param>
<param name="gainSetting">The gain setting you used when you attempted to generate the <paramref name="requestedHighVoltage" /> and <paramref name="requestedLowVoltage" />.</param>
<remarks>You must use the device to generate a high voltage and low voltage at a specified gain, measure the high and low voltages, then specify the requested high voltage, low voltage, and gain along with the actual high voltage and low voltage.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4204(System.String,System.Double,System.Boolean,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4204" nihasget="0" nihasset="0" niparameters="physicalChannels,lowpassFilterCutoffFrequency,sampleAndHoldEnabled,referenceVoltage" niparametertypes="System.String,System.Double,System.Boolean,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an NI 4204 device.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="lowpassFilterCutoffFrequency">The lowpass filter cutoff frequency, in hertz, to calibrate.</param>
<param name="sampleAndHoldEnabled">Specifies whether to calibrate the channel(s) with the sample and hold circuitry of the channel enabled. </param>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<remarks>You must connect a known voltage to the device and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4220(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4220" nihasget="0" nihasset="0" niparameters="physicalChannels,gain,referenceVoltage" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an  NI 4220 device.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<remarks>This device requires reference signals of 0.0 volts at gains of 1, 15, 20, and 310 on a particular channel in order to perform an offset calibration for that channel. If you do not manually supply those reference signals, the device measures them internally with sample and hold circuitry enabled. 
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4224(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4224" nihasget="0" nihasset="0" niparameters="physicalChannels,gain,referenceVoltage" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an  NI 4224 device.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<remarks>You must connect a known voltage to the device and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4225(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4225" nihasget="0" nihasset="0" niparameters="physicalChannels,gain,referenceVoltage" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>The <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4225(System.String,System.Double,System.Double)" /> method has been deprecated. Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an  NI 4225 device.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<remarks>You must connect a known voltage to the device and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1102(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1102" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1102 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input/output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1102/B/C User Manual </format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1102(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1102" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1102 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1125(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1125" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1125 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input/output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1125 User Manual</format>  
for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1125(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1125" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1125 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1520(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1520" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1520 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input/output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1520 User Manual</format>  for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1520(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1520" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1520 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1124(System.String,NationalInstruments.DAQmx.Scxi1124Range,System.Int64)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1124" nihasget="0" nihasset="0" niparameters="physicalChannels,range,dacValue" niparametertypes="System.String,NationalInstruments.DAQmx.Scxi1124Range,System.Int64" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1124 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="range">The range of the calibration.</param>
<param name="dacValue">The binary value to be written out to the specified channels DAC at the specified range.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1124(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1124" nihasget="0" nihasset="0" niparameters="measuredOutput" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1124 module.</summary>
<param name="measuredOutput">A DMM measured reading of the output of the SCXI-1124 after the  call.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1502(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1502" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1502 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input/output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. </note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1502(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1502" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1502 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1503(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1503" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1503 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input/output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. </note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1503(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1503" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1503 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1503Current(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1503Current" nihasget="0" nihasset="0" niparameters="physicalChannels,measuredCurrent" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1503 module.</summary>
<param name="physicalChannels">Specifies the physical channel to calibrate.</param>
<param name="measuredCurrent">Specifies the current measured for the specified channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1124(System.String,NationalInstruments.DAQmx.Scxi1124Range,System.UInt32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1124" nihasget="0" nihasset="0" niparameters="physicalChannels,range,dacValue" niparametertypes="System.String,NationalInstruments.DAQmx.Scxi1124Range,System.UInt32" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1124 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="range">The range of the calibration.</param>
<param name="dacValue">The binary value to be written out to the specified channels DAC at the specified range.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1104(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1104" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1104 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1104 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1104(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1104" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1104 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />. </remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1112(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1112" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1112 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1112 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1112(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1112" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1112 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup153x(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup153x" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the gain value for an SCXI-1530 or SCXI-1531 module calibration task.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1530/1531 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust153x(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust153x" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1530 or SCXI-1531 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1540(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1540" nihasget="0" nihasset="0" niparameters="physicalChannels,excitationRmsValue,excitationFrequency" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the gain value for an SCXI-1540 module calibration task.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="excitationRmsValue">The excitation root mean square value.</param>
<param name="excitationFrequency">The excitation frequency.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1540 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1540(System.Double,System.Double,NationalInstruments.DAQmx.InputCalibrationSource)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1540" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput,calibrationSource" niparametertypes="System.Double,System.Double,NationalInstruments.DAQmx.InputCalibrationSource" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1540 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<param name="calibrationSource">The calibration source.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1126(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1126" nihasget="0" nihasset="0" niparameters="physicalChannels,upperFrequencyLimit" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the channel and range for an SCXI-1126 module calibration task.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="upperFrequencyLimit">The upper frequency limit.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs.  
<note type="note">
The terminal where you can measure module output depends on the configuration of the module in MAX. 
National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. 
Refer to the <format type="italics">SCXI-1126 User Manual</format> for more information on the routing of module output. 

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1126(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1126" nihasget="0" nihasset="0" niparameters="referenceFrequency,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1126 module. </summary>
<param name="referenceFrequency">The frequency, in Hertz, of the signal to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1141(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1141" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the gain value for an SCXI-1141 module calibration task.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input andoutput points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1141/1142/1143 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1141(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1141" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1141 module. </summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1142(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1142" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the gain value for an SCXI-1142 module calibration task.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1141/1142/1143 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1142(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1142" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1142 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1143(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1143" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the gain value for an SCXI-1143 module calibration task.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1141/1142/1143 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1143(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1143" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1143 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1122(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1122" nihasget="0" nihasset="0" niparameters="physicalChannels,gain" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1122 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="gain">The gain setting to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1122 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1122(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1122" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1122 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup1521(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup1521" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an SCXI-1521 module.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You can measure calibration input and output points by supplying reference signals to the specified channel and measuring the outputs. 
<note type="note">
The terminal on which to measure module output depends on the configuration of the module in MAX. National Instruments recommends cabling the module to the digitizer so that the output appears on the MCH0± pins of the rear signal connector. Refer to the <format type="italics">SCXI-1521 User Manual</format> for more information on the routing of module output.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust1521(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust1521" nihasget="0" nihasset="0" niparameters="referenceVoltage,measuredOutput" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see> constants for an SCXI-1521 module.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="measuredOutput">The measured output, in volts, for the channel.</param>
<remarks>You must connect a known voltage to the module. You must specify the voltage with <paramref name="referenceVoltage" /> and specify the measured output with <paramref name="measuredOutput" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsaAI(System.Double,System.Boolean)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustDsaAI" nihasget="0" nihasset="0" niparameters="referenceVoltage,inputsShorted" niparametertypes="System.Double,System.Boolean" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for the analog input section of a DSA device. You can specify whether you want to short the input terminals or not.</summary>
<param name="referenceVoltage">The known voltage to use as a reference for calibration. This voltage must be between +4.9 V and +9.1 V.</param>
<param name="inputsShorted">Specifies whether the input terminals are shorted for the calibration procedure. Refer to the calibration procedure for your device for more information. 
</param>
<remarks>You must connect a known voltage to the device and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustXSeries(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustXSeries" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an X Series device.</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration. This voltage must be between +6.000 V and +8.500 V.</param>
<remarks>You must connect a known voltage to the device and specify that voltage with <paramref name="referenceVoltage" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup433x(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup433x" nihasget="0" nihasset="0" niparameters="physicalChannels,excitationVoltage" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an NI PXIe-433x device.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="excitationVoltage">The voltage value for calibration.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust433x(System.Double,System.Double,NationalInstruments.DAQmx.ShuntElementLocation)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust433x" nihasget="0" nihasset="0" niparameters="referenceVoltage,referenceExcitation,shuntLocation" niparametertypes="System.Double,System.Double,NationalInstruments.DAQmx.ShuntElementLocation" nireturnvaluetype="System.Void">
      <summary>
					Adjusts the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see>
					constants on an NI PXIe-433x device.
				</summary>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<param name="referenceExcitation">The known excitation value to use as a reference for calibration.</param>
<param name="shuntLocation">Specifies the location of the shunted leg.</param>
<remarks>
					You must
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/calSigESeries.html');">connect a known voltage to the device</see>
					and specify that voltage with
					<paramref name="referenceVoltage" />.
					
				</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4300(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4300" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>
					Adjusts the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see>
					constants on an NI 4300 device.
				</summary>
<param name="referenceVoltage">The known voltage, in volts,  to use as a reference for calibration.</param>
<remarks>
					You must
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/calSigESeries.html');">connect a known voltage to the device</see>
					and specify that voltage with
					<paramref name="referenceVoltage" />.
					
				</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4353(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4353" nihasget="0" nihasset="0" niparameters="physicalChannels,referenceVoltage" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>
					Adjusts the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/DevCalibrate.html');">external calibration</see>
					constants on an  NI 4353 device.
				</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="referenceVoltage">The known voltage, in volts, to use as a reference for calibration.</param>
<remarks>
					
					You must
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/calSigESeries.html');">connect a known voltage to the device</see>
					and specify that voltage with
					<paramref name="referenceVoltage" />.

				</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9223(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9223" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9223 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9225AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9225AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9225(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9225" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9225 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9227AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9227AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference current  values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference current  values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9227(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9227" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9227 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9229AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9229AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9229(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9229" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9229 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9233(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="6/18/2010 4:02:23 PM" niupdatedby="Sebastius" nidisplayname="Adjust9233" nihasget="0" nihasset="0" niparameters="physicalChannels,frequency,amplitude" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9233 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="frequency">Specifies</param>
<param name="amplitude">Specifies</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9234AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9234AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9234Gain(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9234Gain" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> gain constants for an NI 9234 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9234Offset(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9234Offset" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> offset constants for an NI 9234 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9239AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9239AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9239(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9239" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9239 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9263AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9263AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32[]">
      <summary>Returns the reference voltage values to be measured by a reference device.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of binary DAC codes that correspond to reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup9263(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup9263" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Void">
      <summary>Writes the specified binary value to the DAC on the specified physical channel. This method requires a sweep of DAC values obtained from <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9263AdjustmentPoints" />.</summary>
<param name="physicalChannels">Specifies the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channel</see>  to use to create the virtual channel. The <see href="javascript:LaunchMergedHelp('daqhelp.chm','lvdaqmx.chm::/mxphyschanconst.html');">DAQmx physical channel constant</see> lists all physical channels for devices installed in the system. You cannot specify more than one physical channel.</param>
<param name="value">The binary number to write to the DAC.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9263(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9263" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9263 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9264AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9264AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32[]">
      <summary>Returns the reference voltage values to be measured by  a reference device.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of binary DAC codes that correspond to reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup9264(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup9264" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Void">
      <summary>Writes the specified binary value to the DAC on the specified physical channel. This method requires a sweep of DAC values obtained from <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9264AdjustmentPoints" />.</summary>
<param name="physicalChannels">Specifies the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channel</see>  to use to create the virtual channel. The <see href="javascript:LaunchMergedHelp('daqhelp.chm','lvdaqmx.chm::/mxphyschanconst.html');">DAQmx physical channel constant</see> lists all physical channels for devices installed in the system. You cannot specify more than one physical channel.</param>
<param name="value">The binary number to write to the DAC.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9264(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9264" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9264 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9265AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9265AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32[]">
      <summary>Returns the reference current  values to be measured by a reference device.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of binary DAC codes that correspond to reference current  values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup9265(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup9265" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Void">
      <summary>Writes the specified binary value to the DAC on the specified physical channel. This method requires a sweep of DAC values obtained from <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9265AdjustmentPoints" />.</summary>
<param name="physicalChannels">Specifies the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channel</see>  to use to create the virtual channel. The <see href="javascript:LaunchMergedHelp('daqhelp.chm','lvdaqmx.chm::/mxphyschanconst.html');">DAQmx physical channel constant</see> lists all physical channels for devices installed in the system. You cannot specify more than one physical channel.</param>
<param name="value">The binary number to write to the DAC.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9265(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9265" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9265 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9269AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9269AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32[]">
      <summary>Returns the reference voltage values to be measured by a reference device.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of binary DAC codes that correspond to reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup9269(System.String,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup9269" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Int32" nireturnvaluetype="System.Void">
      <summary>Writes the specified binary value to the DAC on the specified physical channel. This method requires a sweep of DAC values obtained from <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9269AdjustmentPoints" />.</summary>
<param name="physicalChannels">Specifies the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channel</see>  to use to create the virtual channel. The <see href="javascript:LaunchMergedHelp('daqhelp.chm','lvdaqmx.chm::/mxphyschanconst.html');">DAQmx physical channel constant</see> lists all physical channels for devices installed in the system. You cannot specify more than one physical channel.</param>
<param name="value">The binary number to write to the DAC.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9269(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9269" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9269 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsaAI(NationalInstruments.DAQmx.AICoupling,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustDsaAI" nihasget="0" nihasset="0" niparameters="coupling,gain,referenceVoltage" niparametertypes="NationalInstruments.DAQmx.AICoupling,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Performs external calibration adjustment on a DSA device with the specified gain and coupling configuration.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<param name="coupling">Specifies the coupling setting to calibrate.</param>
<param name="gain">Specifies, in decibels, the gain setting to calibrate.</param>
<param name="referenceVoltage">Specifies, in volts, the known voltage to use as a reference for calibration.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.CSeriesSetCalibrationTemperature(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CSeriesSetCalibrationTemperature" nihasget="0" nihasset="0" niparameters="temperature" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Specifies the temperature of a C Series device for the current external calibration session.</summary>
<param name="temperature">Specifies the temperature of the device, in degrees Celsius.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9201AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9201AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9201(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9201" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9201 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9203AdjustmentPoints(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9203AdjustmentPoints" nihasget="0" nihasset="0" niparameters="rangeMinimum,rangeMaximum" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference current values to be used by a reference device to create a reference signal.</summary>
<param name="rangeMinimum">Specifies the minimum value for the range, in amps.</param>
<param name="rangeMaximum">Specifies the maximum value for the range, in amps.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference current values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9203Gain(System.String,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9203Gain" nihasget="0" nihasset="0" niparameters="physicalChannels,rangeMinimum,rangeMaximum,value" niparametertypes="System.String,System.Double,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> gain constants for an NI 9203 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="rangeMinimum">Specifies the minimum value for the range, in amps.</param>
<param name="rangeMaximum">Specifies the maximum value for the range, in amps.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9203Offset(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9203Offset" nihasget="0" nihasset="0" niparameters="physicalChannels,rangeMinimum,rangeMaximum" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> offset constants for an NI 9203 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="rangeMinimum">Specifies the minimum value for the range, in amps.</param>
<param name="rangeMaximum">Specifies the maximum value for the range, in amps.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9205(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9205" nihasget="0" nihasset="0" niparameters="value" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9205 device.</summary>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9206(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9206" nihasget="0" nihasset="0" niparameters="value" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9206 device.</summary>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9207AdjustmentPoints(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9207AdjustmentPoints" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage or current  values to be used by a reference device to create a reference signal.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage or current  values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9207Gain(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9207Gain" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> gain constants for an NI 9207 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9207Offset(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9207Offset" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> offset constants for an NI 9207 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9208AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9208AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference current  values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference current  values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9208Gain(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9208Gain" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> gain constants for an NI 9208 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9208Offset(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9208Offset" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> offset constants for an NI 9208 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9211(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9211" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9211 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9213AdjustmentPoints(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9213AdjustmentPoints" nihasget="0" nihasset="0" niparameters="rangeMinimum,rangeMaximum" niparametertypes="System.Double,System.Double" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<param name="rangeMinimum">Specifies the minimum value for the range, in volts.</param>
<param name="rangeMaximum">Specifies the maximum value for the range, in volts.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>Returns the reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9213(System.String,System.Double,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9213" nihasget="0" nihasset="0" niparameters="physicalChannels,rangeMinimum,rangeMaximum,value" niparametertypes="System.String,System.Double,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9213 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="rangeMinimum">Specifies the minimum value for the range, in volts.</param>
<param name="rangeMaximum">Specifies the maximum value for the range, in volts.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9214AdjustmentPoints(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9214AdjustmentPoints" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9214(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9214" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9214 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9215AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9215AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9215(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9215" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9215 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9217AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9217AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9217(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9217" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9217 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup9219(System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIMeasurementType,NationalInstruments.DAQmx.AIBridgeConfiguration)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup9219" nihasget="0" nihasset="0" niparameters="physicalChannels,rangeMinimum,rangeMaximum,measurementType,bridgeConfiguration" niparametertypes="System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIMeasurementType,NationalInstruments.DAQmx.AIBridgeConfiguration" nireturnvaluetype="System.Void">
      <summary>Sets up external calibration for an NI 9219 device.</summary>
<param name="physicalChannels">Specifies the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channel</see>  to use to create the virtual channel. The <see href="javascript:LaunchMergedHelp('daqhelp.chm','lvdaqmx.chm::/mxphyschanconst.html');">DAQmx physical channel constant</see> lists all physical channels for devices installed in the system. You cannot specify more than one physical channel.</param>
<param name="rangeMinimum">The minimum value in the range, in the units of the measurement type specified by <paramref name="measurementType" />. If your <paramref name="measurementType" /> is RTD, you must specify your minimum range in ohms.</param>
<param name="rangeMaximum">The maximum value in the range, in the units of the measurement type specified by <paramref name="measurementType" />. If your <paramref name="measurementType" /> is RTD, you must specify your maximum range in ohms.</param>
<param name="measurementType">The type of measurement for the device.</param>
<param name="bridgeConfiguration">The type of Wheatstone bridge the sensor is.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9219AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9219AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9219(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9219" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9219 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9221AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9221AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9221(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9221" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9221 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9222AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9222AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9222(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9222" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9222 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9223AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9223AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.ConnectSCExpressCalibrationAccessoryChannels(System.String,System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConnectSCExpressCalibrationAccessoryChannels" nihasget="0" nihasset="0" niparameters="physicalChannels,connection" niparametertypes="System.String,System.String" nireturnvaluetype="System.Void">
      <summary>Configures a connection on the SC Express accessory for the specified physical channel(s).

</summary>
<param name="physicalChannels">
The physical channel(s) to calibrate.
</param>
<param name="connection">
Specifies how channels on the SC Express accessory should be configured. The resulting configuration connects channels to a particular external signal or to an onboard terminal. The supported connections depend on the accessory.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.DisconnectSCExpressCalibrationAccessoryChannels" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DisconnectSCExpressCalibrationAccessoryChannels" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Disconnects the configured connection on an SC Express accessory and connects the accessory in the default configuration.


</summary>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.SetSCExpressCalibrationAccessoryBridgeOutput(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetSCExpressCalibrationAccessoryBridgeOutput" nihasget="0" nihasset="0" niparameters="voltsPerVolt" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Configures an SC Express accessory to produce the bridge output specified in volts-per-volt.

</summary>
<typeparam>
</typeparam>
<param name="voltsPerVolt">
The bridge output in volts-per-volt to be set on the SC Express accessory.

</param>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9232AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9232AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9232(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9232" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9232 device.
</summary>
<param name="physicalChannels">
Specifies the physical channel(s) to calibrate.
</param>
<param name="value">
Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4357(System.String,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4357" nihasget="0" nihasset="0" niparameters="physicalChannels,referenceValues" niparametertypes="System.String,System.Double[]" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 4357 device.
</summary>
<param name="physicalChannels">
Specifies the physical channel(s) to calibrate.
</param>
<param name="referenceValues">
Specifies in volts the known voltages to use as the references for calibration. 

</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9220AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9220AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
					Refer to the
					<see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see>
					for detailed calibration instructions.
					<note type="note">After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9220(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9220" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>
					Adjusts the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see>
					constants for an NI 9220 device.
				</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
					Refer to the
					<see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see>
					for detailed calibration instructions.
					<note type="note">After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup4322(System.String,NationalInstruments.DAQmx.AOOutputType,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup4322" nihasget="0" nihasset="0" niparameters="physicalChannels,outputType,outputValue" niparametertypes="System.String,NationalInstruments.DAQmx.AOOutputType,System.Double" nireturnvaluetype="System.Void">
      <summary>Configures the calibration task for an NI 4322 device.</summary>
<param name="physicalChannels">The physical channel(s) to calibrate.</param>
<param name="outputType">The output type.</param>
<param name="outputValue">The  value for calibration.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4322(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4322" nihasget="0" nihasset="0" niparameters="physicalChannels,referenceValue" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>
					Adjusts the
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see>
					constants on an NI 4322 device.
				</summary>
<param name="referenceValue">The known voltage, in volts,  to use as a reference for calibration.</param>
<param name="physicalChannels">The name(s) of the physical channels to calibrate.</param>
<remarks>
					You must
					<see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/calSigESeries.html');">connect a known voltage to the device</see>
					and specify that voltage with
					<paramref name="referenceValue" />.
					
				</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get4322AdjustmentPoints(NationalInstruments.DAQmx.AOOutputType)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get4322AdjustmentPoints" nihasget="0" nihasset="0" niparameters="outputType" niparametertypes="NationalInstruments.DAQmx.AOOutputType" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference  values to be used by a reference device to create a reference signal.</summary>
<param name="outputType">The output type.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference  values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsa4610(System.String,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustDsa4610" nihasget="0" nihasset="0" niparameters="physicalChannels,gain,offset" niparametertypes="System.String,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> gain constants for an NI 4610.</summary>
<param name="physicalChannels">Specifies the physical channel to calibrate.</param>
<param name="gain">Specifies, in decibels, the gain setting to calibrate.</param>
<param name="offset">Specifies the offset at which to begin a read operation.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustTioTimebase(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustTioTimebase" nihasget="0" nihasset="0" niparameters="referenceFrequency" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for the  timebase of a TIO device. </summary>
the timebase of a DSA device with an adjustable oscillator. You must connect a sinusoidal signal with a known frequency to the device and specify that frequency with referenceFrequency.

<remarks>
You must connect a sinusoidal signal with a known frequency to the device. You cannot calibrate PXI-6608 devices with this function. Refer to KnowledgeBase 40KGCD2F for more information.

</remarks><param name="referenceFrequency">The frequency, in hertz, of the signal to use as a reference for calibration.</param><exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception></member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.DsaSetCalibrationTemperature(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DsaSetCalibrationTemperature" nihasget="0" nihasset="0" niparameters="temperature" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>Specifies the temperature of a DSA device for the current external calibration session.
</summary>
<param name="temperature">The temperature of the device, in degrees Celsius.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup9242(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup9242" nihasget="0" nihasset="0" niparameters="physicalChannels,adjustmentPoint" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Reads the specified value from the ADC  on the specified physical channel. This method requires a sweep of DAC values obtained from <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9242AdjustmentPoints" />.</summary>
<param name="physicalChannels">Specifies the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channel(s)</see>  to calibrate. The <see href="javascript:LaunchMergedHelp('daqhelp.chm','lvdaqmx.chm::/mxphyschanconst.html');">DAQmx physical channel constant</see> lists all physical channels for devices installed in the system.</param>
<param name="adjustmentPoint">The binary number to read from the ADC.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup9244(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup9244" nihasget="0" nihasset="0" niparameters="physicalChannels,adjustmentPoint" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Reads the specified value from the ADC on the specified physical channel. This method requires a sweep of DAC values obtained from <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9244AdjustmentPoints" />.</summary>
<param name="physicalChannels">Specifies the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channel</see>  to use to create the virtual channel. The <see href="javascript:LaunchMergedHelp('daqhelp.chm','lvdaqmx.chm::/mxphyschanconst.html');">DAQmx physical channel constant</see> lists all physical channels for devices installed in the system. You cannot specify more than one physical channel.</param>
<param name="adjustmentPoint">The binary number to read from the ADC.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.SetupDsaAOTimebase" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetupDsaAOTimebase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Generates a sine wave of a fixed frequency from the DSA device. You must measure the frequency of the generated sine wave and pass that value into <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsaAOTimebase(System.Double,System.Boolean@)" />. </summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<returns>The expected frequency of the sine wave of a calibrated device.</returns>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsaAOTimebase(System.Double,System.Boolean@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustDsaAOTimebase" nihasget="0" nihasset="0" niparameters="measuredFrequency,calibrationComplete" niparametertypes="System.Double,out System.Boolean" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for the timebase of a DSA device with an adjustible oscillator.</summary>
<param name="measuredFrequency">The measured frequency of the sine wave generated by the device.</param>
<param name="calibrationComplete">Returns <see langword="true" /> if calibration of the device is complete. If this parameter returns <see langword="false" />, repeat the calibration process.
</param>
<remarks>You must first call <see cref="M:NationalInstruments.DAQmx.ExternalCalibrationSession.SetupDsaAOTimebase" /> and measure the frequency of the resulting sine wave. Repeat this process until <paramref name="calibrationComplete" /> returns <see langword="true" />.
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9242(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9242" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9242 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9242AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9242AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9244(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9244" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9244 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9244AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9244AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage  values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage  values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9218(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9218" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9218 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup9218(System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIMeasurementType)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup9218" nihasget="0" nihasset="0" niparameters="physicalChannels,rangeMinimum,rangeMaximum,measurementType" niparametertypes="System.String,System.Double,System.Double,NationalInstruments.DAQmx.AIMeasurementType" nireturnvaluetype="System.Void">
      <summary>Sets up external calibration for an NI 9218 device.</summary>
<param name="physicalChannels">The <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">physical channels</see>  to calibrate.   </param>
<param name="rangeMinimum">The minimum value in the range, in the units of the measurement type specified by <paramref name="measurementType" />. </param>
<param name="rangeMaximum">The maximum value in the range, in the units of the measurement type specified by <paramref name="measurementType" />. </param>
<param name="measurementType">The type of measurement for the device.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9218AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9218AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9238AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9238AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9238(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9238" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9238 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9212AdjustmentPoints(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9212AdjustmentPoints" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference  values to be used by a reference device to create a reference signal.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.
</note></remarks>
<returns>Returns the reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9212(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9212" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9212 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9216AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9216AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage  values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>The reference voltage values returned by this method.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9216(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9216" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>
Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9216 device.
</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9226AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9226AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9226(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9226" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9226 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.AdjustDsa4463(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AdjustDsa4463" nihasget="0" nihasset="0" niparameters="physicalChannels,referenceVoltage" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for the analog output section of a NI 4463 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="referenceVoltage">
The known voltage, in volts, to use as a reference for calibration.

</param>
<remarks>You must connect a known voltage to the device and specify that voltage with the <paramref name="referenceVoltage" /> parameter.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.GetDsa4463AdjustmentPoints(NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration4463,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetDsa4463AdjustmentPoints" nihasget="0" nihasset="0" niparameters="terminalConfiguration,gain" niparametertypes="NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration4463,System.Double" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>The reference voltage values returned by this method.</returns>
<param name="terminalConfiguration">
The input terminal configuration for the channel.
</param>
<param name="gain">
The gain setting to calibrate.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.SetupDsa4463(System.String,NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration4463,System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SetupDsa4463" nihasget="0" nihasset="0" niparameters="physicalChannels,terminalConfiguration,gain,outputVoltage" niparametertypes="System.String,NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration4463,System.Double,System.Double" nireturnvaluetype="System.Void">
      <summary>
Generates a specified voltage from the DSA device. </summary>
<param name="physicalChannels">
The physical channel(s) to calibrate.
</param>
<param name="terminalConfiguration">
The input terminal configuration of the device.</param>
<param name="gain">
The gain setting to calibrate.
</param>
<param name="outputVoltage">
The output voltage to generate, in Hz.
</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9209Offset(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9209Offset" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>
Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> offset constants for an NI 9209 device.
</summary>
<param name="physicalChannels">
Specifies the physical channel(s) to calibrate.
</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9230AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9230AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>Returns the reference voltage values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9230(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9230" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> constants for an NI 9230 device.</summary>
<param name="physicalChannels">Specifies the physical channel(s) to calibrate.</param>
<param name="value">Specifies the reference value measured using a calibrator.</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9246AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9246AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9246Gain(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9246Gain" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>
Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> gain constants for an NI 9246 device.
</summary>
<param name="physicalChannels">
Specifies the physical channel(s) to calibrate.
</param>
<param name="value">
Specifies the reference value measured using a calibrator.
</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9246Offset(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9246Offset" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>
Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> offset constants for an NI 9246 device.
</summary>
<param name="physicalChannels">
Specifies the physical channel(s) to calibrate.
</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9247AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9247AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference values.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9247Gain(System.String,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9247Gain" nihasget="0" nihasset="0" niparameters="physicalChannels,value" niparametertypes="System.String,System.Double" nireturnvaluetype="System.Void">
      <summary>
Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> gain constants for an NI 9247 device.
</summary>
<param name="physicalChannels">
Specifies the physical channel(s) to calibrate.
</param>
<param name="value">
Specifies the reference value measured using a calibrator.
</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9247Offset(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9247Offset" nihasget="0" nihasset="0" niparameters="physicalChannels" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>
Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> offset constants for an NI 9247 device.
</summary>
<param name="physicalChannels">
Specifies the physical channel(s) to calibrate.
</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.
</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get9209AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get9209AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>The reference voltage values returned by this method.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust9209Gain(System.String,NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration9209,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust9209Gain" nihasget="0" nihasset="0" niparameters="physicalChannels,terminalConfiguration,value" niparametertypes="System.String,NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration9209,System.Double" nireturnvaluetype="System.Void">
      <summary>
Adjusts the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/calibration.html');">external calibration</see> gain constants for an NI 9209 device.
</summary>
<param name="physicalChannels">
Specifies the physical channel(s) to calibrate.
</param>
<param name="terminalConfiguration">
The input terminal configuration for the channel.
</param>
<param name="value">
Specifies the reference value measured using a calibrator.
</param>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Setup4339(System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.CalibrationMode4339)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Setup4339" nihasget="0" nihasset="0" niparameters="physicalChannels,rangeMinimum,rangeMaximum,excitationVoltage,calibrationMode" niparametertypes="System.String,System.Double,System.Double,System.Double,NationalInstruments.DAQmx.CalibrationMode4339" nireturnvaluetype="System.Void">
      <summary>
Initializes an NI PXIe 4339 device with the specified mode, range, and exitation for calibration.

</summary>
<param name="physicalChannels">
The physical channel(s) to calibrate.
</param>
<param name="rangeMinimum">
The minimum value in the range.

</param>
<param name="rangeMaximum">
The maximum value in the range.
</param>
<param name="excitationVoltage">
The voltage value for calibration.
</param>
<param name="calibrationMode">
The calibration mode  for the device.

</param>

<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<seealso cref="T:NationalInstruments.DAQmx.CalibrationMode4339" /></member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Get4339AdjustmentPoints" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Get4339AdjustmentPoints" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Returns the reference voltage  values to be used by a reference device to create a reference signal.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Refer to the <see href="http://digital.ni.com/express.nsf/bycode/rdcalp">calibration procedure for your device</see> for detailed calibration instructions.
<note type="note">
After you commit the calibration, you cannot undo it. If any calibration settings are incorrect, you must recalibrate the device.

</note></remarks>
<returns>A 1D array of reference voltage  values.</returns></member>
    <member name="M:NationalInstruments.DAQmx.ExternalCalibrationSession.Adjust4339(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Adjust4339" nihasget="0" nihasset="0" niparameters="referenceVoltage" niparametertypes="System.Double" nireturnvaluetype="System.Void">
      <summary>
Adjusts the external calibration constants for an NI PXIe 4339 device.

</summary>
<param name="referenceVoltage">
The voltage across the AI+ and AI- terminals, measured using a DMM.

</param>
</member>
    <member name="T:NationalInstruments.DAQmx.ArmStartTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ArmStartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure a trigger that <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/armTrig.html');">arms the task for a start trigger</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.StartTrigger" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Triggers" />
<seealso cref="P:NationalInstruments.DAQmx.Triggers.ArmStartTrigger" />
</member>
    <member name="M:NationalInstruments.DAQmx.ArmStartTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ArmStartTrigger.ConfigureNone" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Disables <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/armTrig.html');">arm start triggering</see> for the task.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.ArmStartTrigger.ConfigureNone" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.ArmStartTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeArmStartTriggerEdge)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalEdgeTrigger" nihasget="0" nihasset="0" niparameters="source,edge" niparametertypes="System.String,NationalInstruments.DAQmx.DigitalEdgeArmStartTriggerEdge" nireturnvaluetype="System.Void">
      <summary>Configures a task to <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/armTrig.html');">arm for a start trigger</see> upon a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">rising or falling edge of a digital signal</see>.</summary>
<param name="source">The terminal of the trigger signal.</param>
<param name="edge">The edge of the trigger signal that causes the task to arm to respond to a start trigger.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.ArmStartTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeArmStartTriggerEdge)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.ArmStartTrigger.DigitalEdge" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.ArmStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.ArmStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.ArmStartTrigger.Type" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Type" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::ArmStartTriggerType">
      <summary>Specifies the type of trigger to use to arm the task for a Start Trigger. If you configure an Arm Start Trigger, the task does not respond to a Start Trigger until the device receives the Arm Start Trigger.</summary>
<value>Specifies the type of trigger to use to arm the task for a Start Trigger. If you configure an Arm Start Trigger, the task does not respond to a Start Trigger until the device receives the Arm Start Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.ArmStartTrigger.Terminal" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Terminal" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the name of the internal Arm Start Trigger terminal for the task. This property does not return the name of the trigger source terminal.</summary>
<value>Indicates the name of the internal Arm Start Trigger terminal for the task. This property does not return the name of the trigger source terminal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeArmStartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">digital edge</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/armTrig.html');">arm start triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.ArmStartTrigger" />.
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.ArmStartTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.ArmStartTrigger.DigitalEdge" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the Arm Start Trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where there is a digital signal to use as the source of the Arm Start Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.Edge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Edge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalEdgeArmStartTriggerEdge">
      <summary>Specifies on which edge of a digital signal to arm the task for a Start Trigger.</summary>
<value>Specifies on which edge of a digital signal to arm the task for a Start Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.DigitalFilterEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</summary>
<value>Specifies whether to apply the pulse width <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> to the signal.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.DigitalFilterMinimumPulseWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterMinimumPulseWidth" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</summary>
<value>Specifies in seconds the minimum pulse width the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/digFiltering.html');">filter</see> recognizes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.DigitalFilterTimebaseSource" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseSource" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</summary>
<value>Specifies the input <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the signal to use as the timebase of the pulse width filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.DigitalFilterTimebaseRate" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalFilterTimebaseRate" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</summary>
<value>Specifies in hertz the rate of the pulse width filter timebase. NI-DAQmx uses this value to compute settings for the filter.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.DigitalSynchronizationEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalSynchronizationEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</summary>
<value>Specifies whether to synchronize recognition of transitions in the signal to the internal timebase of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
This property does not affect the minimum pulse width recognized by the device, 
but setting this property to <see langword="true" /> does limit the speed at which the device recognizes transitions 
to less than the frequency of the internal timebase.
</para>
</remarks>

</member>
    <member name="T:NationalInstruments.DAQmx.Watchdog" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Watchdog" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods for configuring and controlling a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/watchdogTimers.html');">watchdog timer</see><entity value="nbsp" /><see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Task" />
<seealso cref="P:NationalInstruments.DAQmx.Task.Watchdog" />
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.ResetTimer" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ResetTimer" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Resets the internal timer to 0.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
You must continually reset the internal timer to prevent it from timing out and locking out the device.
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.ClearExpiration" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ClearExpiration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Unlocks the device after the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/watchdogTimers.html');">watchdog timer</see> has expired.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.Watchdog.Timeout" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Timeout" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies in seconds the amount of time until the watchdog timer expires. A value of -1 means the internal timer never expires. Set this input to -1 if you use an Expiration Trigger to expire the watchdog task.</summary>
<value>Specifies in seconds the amount of time until the watchdog timer expires. A value of -1 means the internal timer never expires. Set this input to -1 if you use an Expiration Trigger to expire the watchdog task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.GetDOExpirationState(System.String)" nitypekind="Method" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="GetDOExpirationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WatchdogDOExpirationState">
      <summary>Specifies the state to which to set the digital physical channels when the watchdog task expires.  You cannot modify the expiration state of dedicated digital input physical channels.</summary>
<param name="physicalChannelName">The <see href="javascript:LaunchHelp('daqhelp.chm::/physchannames.html')">physical channel name</see> for which to retrieve the setting.</param>
<returns>Refer to summary.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.SetDOExpirationState(System.String,NationalInstruments.DAQmx.WatchdogDOExpirationState)" nitypekind="Method" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="SetDOExpirationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WatchdogDOExpirationState">
      <summary>Specifies the state to which to set the digital physical channels when the watchdog task expires.  You cannot modify the expiration state of dedicated digital input physical channels.</summary>
<param name="physicalChannelName">The <see href="javascript:LaunchHelp('daqhelp.chm::/physchannames.html')">physical channel name</see> to which to apply <paramref name="value" />.</param>
<param name="value">The setting to apply to the given physical channel.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.GetAOExpirationStateType(System.String)" nitypekind="Method" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="GetAOExpirationStateType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WatchdogAOExpirationStateType">
      <summary>Specifies the output type of the analog output physical channels when the watchdog task expires.</summary>
<param name="physicalChannelName">The <see href="javascript:LaunchHelp('daqhelp.chm::/physchannames.html')">physical channel name</see> for which to retrieve the setting.</param>
<returns>Refer to summary.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.SetAOExpirationStateType(System.String,NationalInstruments.DAQmx.WatchdogAOExpirationStateType)" nitypekind="Method" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="SetAOExpirationStateType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WatchdogAOExpirationStateType">
      <summary>Specifies the output type of the analog output physical channels when the watchdog task expires.</summary>
<param name="physicalChannelName">The <see href="javascript:LaunchHelp('daqhelp.chm::/physchannames.html')">physical channel name</see> to which to apply <paramref name="value" />.</param>
<param name="value">The setting to apply to the given physical channel.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.GetAOExpirationState(System.String)" nitypekind="Method" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="GetAOExpirationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the state to set the analog output physical channels when the watchdog task expires.</summary>
<param name="physicalChannelName">The <see href="javascript:LaunchHelp('daqhelp.chm::/physchannames.html')">physical channel name</see> for which to retrieve the setting.</param>
<returns>Refer to summary.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.SetAOExpirationState(System.String,System.Double)" nitypekind="Method" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="SetAOExpirationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Specifies the state to set the analog output physical channels when the watchdog task expires.</summary>
<param name="physicalChannelName">The <see href="javascript:LaunchHelp('daqhelp.chm::/physchannames.html')">physical channel name</see> to which to apply <paramref name="value" />.</param>
<param name="value">The setting to apply to the given physical channel.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.GetCOExpirationState(System.String)" nitypekind="Method" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="GetCOExpirationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WatchdogCOExpirationState">
      <summary>Specifies the state to set the counter output channel terminal when the watchdog task expires.</summary>
<param name="physicalChannelName">The <see href="javascript:LaunchHelp('daqhelp.chm::/physchannames.html')">physical channel name</see> for which to retrieve the setting.</param>
<returns>Refer to summary.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.Watchdog.SetCOExpirationState(System.String,NationalInstruments.DAQmx.WatchdogCOExpirationState)" nitypekind="Method" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="SetCOExpirationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WatchdogCOExpirationState">
      <summary>Specifies the state to set the counter output channel terminal when the watchdog task expires.</summary>
<param name="physicalChannelName">The <see href="javascript:LaunchHelp('daqhelp.chm::/physchannames.html')">physical channel name</see> to which to apply <paramref name="value" />.</param>
<param name="value">The setting to apply to the given physical channel.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.Watchdog.HasExpired" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="HasExpired" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the watchdog timer expired. You can read this property only while the task is running.</summary>
<value>Indicates if the watchdog timer expired. You can read this property only while the task is running.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.WatchdogExpirationTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WatchdogExpirationTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure a trigger to cause the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/expirationtrigger.html');">watchdog to expire</see> in a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/watchdogTimers.html');">watchdog timer</see> task.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Triggers" />
<seealso cref="P:NationalInstruments.DAQmx.Triggers.WatchdogExpirationTrigger" />
</member>
    <member name="M:NationalInstruments.DAQmx.WatchdogExpirationTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.WatchdogExpirationTrigger.ConfigureNone" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Disables <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/expirationtrigger.html');">watchdog expiration triggering</see> for the task.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.WatchdogExpirationTrigger.ConfigureNone" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.WatchdogExpirationTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTriggerEdge)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureDigitalEdgeTrigger" nihasget="0" nihasset="0" niparameters="source,edge" niparametertypes="System.String,NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTriggerEdge" nireturnvaluetype="System.Void">
      <summary>Configures the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxdevconsid.chm::/watchdogTimers.html');">watchdog timer</see> to expire upon a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">rising or falling edge of a digital signal</see>.</summary>
<param name="source">The terminal of the trigger signal.</param>
<param name="edge">The edge of the trigger signal that causes a watchdog expiration trigger to occur.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.WatchdogExpirationTrigger.ConfigureDigitalEdgeTrigger(System.String,NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTriggerEdge)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.WatchdogExpirationTrigger.DigitalEdge" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdge" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.WatchdogExpirationTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.WatchdogExpirationTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.WatchdogExpirationTrigger.Type" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Type" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WatchdogExpirationTriggerType">
      <summary>Specifies the type of trigger to use to expire a watchdog task.</summary>
<value>Specifies the type of trigger to use to expire a watchdog task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.WatchdogExpirationTrigger.TriggerOnNetworkConnectionLost" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TriggerOnNetworkConnectionLost" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies the watchdog timer behavior when the network connection is lost between the host and the chassis. If set to true, the watchdog timer expires when the chassis detects the loss of network connection.</summary>
<value>Specifies the watchdog timer behavior when the network connection is lost between the host and the chassis. If set to true, the watchdog timer expires when the chassis detects the loss of network connection.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalEdgeWatchdogExpirationTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digTrigger.html');">digital edge</see><entity value="nbsp" /><see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/expirationtrigger.html');">watchdog expiration triggers</see>. For more information, refer to <see cref="T:NationalInstruments.DAQmx.WatchdogExpirationTrigger" />.
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.WatchdogExpirationTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.WatchdogExpirationTrigger.DigitalEdge" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where a digital signal exists to use as the source of the Expiration Trigger.</summary>
<value>Specifies the name of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> where a digital signal exists to use as the source of the Expiration Trigger.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger.Edge" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Edge" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalEdgeWatchdogExpirationTriggerEdge">
      <summary>Specifies on which edge of a digital signal to expire the watchdog task.</summary>
<value>Specifies on which edge of a digital signal to expire the watchdog task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalPowerUpState" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalPowerUpState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the power up state to set for the physical channel.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalPowerUpState.Tristate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Tristate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High-impedance state. You can set this power up state only on devices with bidirectional ports, and you can set it only on entire ports. You cannot set this power up state on dedicated digital output lines.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalPowerUpState.Low" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalPowerUpState.High" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.PhysicalChannel" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PhysicalChannel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates one or more channels on an NI-DAQmx device and contains functions and properties that operate on the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">channel</see> outside the context of a task.</summary>
<threadsafety safety="safe" />
<remarks>Use the <see cref="M:NationalInstruments.DAQmx.DaqSystem.LoadPhysicalChannel(System.String)" /> method on the <see cref="P:NationalInstruments.DAQmx.DaqSystem.Local" /> instance of <see cref="T:NationalInstruments.DAQmx.DaqSystem" /> to create an instance of this class for a physical channel on your system.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.PhysicalChannel" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Use this method only if the application you create runs on a low memory system.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.PhysicalChannelName" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PhysicalChannelName" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Gets the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">name of the physical channel</see>.</summary>
<value>A <see cref="T:System.String" /> that represents the name of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/physChanNames.html');">physical channel</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.ConfigureTeds(System.String)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureTeds" nihasget="0" nihasset="0" niparameters="virtualTedsFile" niparametertypes="System.String" nireturnvaluetype="System.Void">
      <summary>Associates <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/TEDS.html');">TEDS</see> information with the physical channel you specify.</summary>
<param name="virtualTedsFile">The path to a virtual TEDS file that you want to associate with the physical channel. If you specify <see cref="F:System.String.Empty" /> for this parameter, this method attempts to find a TEDS sensor connected to the physical channel. </param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This method temporarily overrides any TEDS configuration for the physical channel that you performed in Measurement <entity value="amp" /> Automation Explorer (MAX).</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.ClearTeds" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ClearTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Removes <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/TEDS.html');">TEDS</see> information from the physical channel you specify.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This method temporarily overrides any TEDS configuration for the physical channel that you performed in Measurement <entity value="amp" /> Automation Explorer (MAX).</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.ConfigureTeds" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Associates <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/TEDS.html');">TEDS</see> information with the physical channel you specify, using a TEDS sensor connected to the physical channel.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>This method temporarily overrides any TEDS configuration for the physical channel that you performed in Measurement <entity value="amp" /> Automation Explorer (MAX).</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.WriteTedsData(System.Byte[],NationalInstruments.DAQmx.BasicTedsDataOption)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteTedsData" nihasget="0" nihasset="0" niparameters="bitStream,basicTedsDataOption" niparametertypes="System.Byte[],NationalInstruments.DAQmx.BasicTedsDataOption" nireturnvaluetype="System.Void">
      <summary>Write <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/TEDS.html');">TEDS</see> data from a <see cref="T:System.Byte" /> array to a sensor on the physical channel you specify. </summary>
<param name="bitStream">The bitstream to write to the sensor.  This bitstream must be constructed according to the IEEE 1451.4 specification.</param>
<param name="basicTedsDataOption">A value that specifies how to handle <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/writingTEDS.html');">basic TEDS data</see> in the bitstream.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.WriteTedsData(System.String,NationalInstruments.DAQmx.BasicTedsDataOption)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteTedsData" nihasget="0" nihasset="0" niparameters="virtualTedsFile,basicTedsDataOption" niparametertypes="System.String,NationalInstruments.DAQmx.BasicTedsDataOption" nireturnvaluetype="System.Void">
      <summary>Write <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/TEDS.html');">TEDS</see> data from a virtual TEDS file to a sensor on the physical channel you specify.</summary>
<param name="virtualTedsFile">The path to a virtual TEDS file that contains the bitstream to write to the sensor.</param>
<param name="basicTedsDataOption">A value that specifies how to handle <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/writingTEDS.html');">basic TEDS data</see> in the bitstream.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.PhysicalChannel.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOTerminalConfigurations" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOTerminalConfigurations" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.TerminalConfigurationTypes">
      <summary>Indicates the list of output terminal configurations supported by the channel.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.TerminalConfigurationTypes" /> that indicates the terminal configurations supported by the channel. The value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Differential" />, <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.None" />, <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Nrse" />, <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Pseudodifferential" />, and <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Rse" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AITerminalConfigurations" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AITerminalConfigurations" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.TerminalConfigurationTypes">
      <summary>Indicates the list of input terminal configurations supported by the channel.</summary>
<value>A <see cref="T:NationalInstruments.DAQmx.TerminalConfigurationTypes" /> that indicates the terminal configurations supported by the channel. The value is a bitwise combination of <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Differential" />, <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.None" />, <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Nrse" />, <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Pseudodifferential" />, and <see cref="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Rse" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AISupportedMeasurementTypes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AISupportedMeasurementTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AIMeasurementType[]">
      <summary>
Gets the measurement types supported by the physical channels of the device. 

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.AIMeasurementType" /> of the physical channel.

</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOSupportedOutputTypes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOSupportedOutputTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.AOOutputType[]">
      <summary>Gets the generation types supported by the physical channels of the device. 

</summary>
<value>
The values of the supported <see cref="T:NationalInstruments.DAQmx.AOOutputType" /> of the physical channel.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.COSupportedOutputTypes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="COSupportedOutputTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.COOutputType[]">
      <summary>Gets the generation types supported by the physical channels of the device
</summary>
<value>The values of the supported <see cref="T:NationalInstruments.DAQmx.COOutputType" /> of the physical channel.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.CISupportedMeasurementTypes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CISupportedMeasurementTypes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIMeasurementType[]">
      <summary>Gets the measurement types supported by the physical channels of the device. 

</summary>
<value>The values of the supported <see cref="T:NationalInstruments.DAQmx.CIMeasurementType" /> of the physical channel.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.DISampleModes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DISampleModes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SampleQuantityMode[]">
      <summary>Gets the sample modes supported by the physical channels that support sample clocked digital input.

</summary>
<value>The values of the supported <see cref="T:NationalInstruments.DAQmx.SampleQuantityMode" /> of the physical channel.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.DOSampleModes" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DOSampleModes" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.SampleQuantityMode[]">
      <summary>Gets the sample modes supported by physical channels that support sample clocked digital output.

</summary>
<value>The values of the supported <see cref="T:NationalInstruments.DAQmx.SampleQuantityMode" /> of the physical channel.
</value>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AIInputSources" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AIInputSources" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the list of input sources supported by the channel. Channels may support using the signal from the I/O connector or one of several calibration signals.</summary>
<value>Indicates the list of input sources supported by the channel. Channels may support using the signal from the I/O connector or one of several calibration signals.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOManualControlEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOManualControlEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies if you can control the physical channel externally via a manual control located on the device. You cannot simultaneously control a channel manually and with NI-DAQmx.</summary>
<value>Specifies if you can control the physical channel externally via a manual control located on the device. You cannot simultaneously control a channel manually and with NI-DAQmx.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOManualControlShortDetected" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOManualControlShortDetected" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the physical channel is currently disabled due to a short detected on the channel.</summary>
<value>Indicates whether the physical channel is currently disabled due to a short detected on the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOManualControlAmplitude" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOManualControlAmplitude" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the current value of the front panel amplitude control for the physical channel in volts.</summary>
<value>Indicates the current value of the front panel amplitude control for the physical channel in volts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOManualControlFrequency" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOManualControlFrequency" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the current value of the front panel frequency control for the physical channel in hertz.</summary>
<value>Indicates the current value of the front panel frequency control for the physical channel in hertz.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOPowerAmplifierChannelEnable" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOPowerAmplifierChannelEnable" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether to enable or disable a channel for amplification. This property can also be used to check if a channel is enabled.</summary>
<value>Specifies whether to enable or disable a channel for amplification. This property can also be used to check if a channel is enabled.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOPowerAmplifierScalingCoefficients" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOPowerAmplifierScalingCoefficients" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the coefficients of a polynomial equation used to scale from pre-amplified values.</summary>
<value>Indicates the coefficients of a polynomial equation used to scale from pre-amplified values.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOPowerAmplifierOvercurrent" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOPowerAmplifierOvercurrent" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the channel detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see>.</summary>
<value>Indicates if the channel detected an <see href="javascript:launchSharedHelp('mxdevconsid.chm::/overcurrentdet.html');">overcurrent condition</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOPowerAmplifierGain" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOPowerAmplifierGain" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the calibrated gain of the channel.</summary>
<value>Indicates the calibrated gain of the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.AOPowerAmplifierOffset" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AOPowerAmplifierOffset" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Double">
      <summary>Indicates the calibrated offset of the channel in volts.</summary>
<value>Indicates the calibrated offset of the channel in volts.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.DIPortWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DIPortWidth" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in bits the width of digital input port.</summary>
<value>Indicates in bits the width of digital input port.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.DISampleClockSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DISampleClockSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the sample clock timing type is supported for the digital input physical channel.</summary>
<value>Indicates if the sample clock timing type is supported for the digital input physical channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.DIChangeDetectionSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DIChangeDetectionSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the change detection timing type is supported for the digital input physical channel.</summary>
<value>Indicates if the change detection timing type is supported for the digital input physical channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.DOPortWidth" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DOPortWidth" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in bits the width of digital output port.</summary>
<value>Indicates in bits the width of digital output port.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.DOSampleClockSupported" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DOSampleClockSupported" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates if the sample clock timing type is supported for the digital output physical channel.</summary>
<value>Indicates if the sample clock timing type is supported for the digital output physical channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.TedsManufacturerID" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TedsManufacturerID" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the manufacturer ID of the sensor.</summary>
<value>Indicates the manufacturer ID of the sensor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.TedsModelNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TedsModelNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the model number of the sensor.</summary>
<value>Indicates the model number of the sensor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.TedsSerialNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TedsSerialNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the serial number of the sensor.</summary>
<value>Indicates the serial number of the sensor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.TedsVersionNumber" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TedsVersionNumber" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the version number of the sensor.</summary>
<value>Indicates the version number of the sensor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.TedsVersionLetter" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TedsVersionLetter" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the version letter of the sensor.</summary>
<value>Indicates the version letter of the sensor.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.TedsBitStream" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TedsBitStream" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Byte">
      <summary>Indicates the TEDS binary bitstream without checksums.</summary>
<value>Indicates the TEDS binary bitstream without checksums.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="P:NationalInstruments.DAQmx.PhysicalChannel.TedsTemplateIDs" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TedsTemplateIDs" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates the IDs of the templates in the bitstream in <see cref="P:NationalInstruments.DAQmx.PhysicalChannel.TedsBitStream" />.</summary>
<value>Indicates the IDs of the templates in the bitstream in <see cref="P:NationalInstruments.DAQmx.PhysicalChannel.TedsBitStream" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks><para>This property returns a copy of the actual array. Avoid calling this property within a for loop because it creates a copy for each iteration of the loop. Avoid using an indexer to set a member of the array because the indexer returns a copy of the object and has no effect on the actual object.</para></remarks></member>
    <member name="T:NationalInstruments.DAQmx.CODataFrequency" nitypekind="Struct" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CODataFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a counter output specified in terms of frequency and duty cycle.</summary>
<threadsafety safety="unsafe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.#ctor(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CODataFrequency" nihasget="0" nihasset="0" niparameters="frequency,dutyCycle" niparametertypes="System.Double,System.Double" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object with the specified initial values.</summary>
<param name="frequency">The frequency of the pulse.</param>
<param name="dutyCycle">The duty cycle of the pulse.</param>
</member>
    <member name="P:NationalInstruments.DAQmx.CODataFrequency.Frequency" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Frequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Gets or sets the frequency of the pulse.</summary>
<value>The frequency of the pulse.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CODataFrequency.DutyCycle" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DutyCycle" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Gets or sets the duty cycle of the pulse.</summary>
<value>The duty cycle of the pulse.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.Equals(System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="obj" niparametertypes="System.Object" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified object.</summary>
<param name="obj">An object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="obj" /> is a <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object that has the same frequency and duty cycle as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.Equals(NationalInstruments.DAQmx.CODataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c" niparametertypes="NationalInstruments.DAQmx.CODataFrequency" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object.</summary>
<param name="c">A <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="c" /> has the same frequency and duty cycle as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.Equals(NationalInstruments.DAQmx.CODataFrequency,NationalInstruments.DAQmx.CODataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataFrequency,NationalInstruments.DAQmx.CODataFrequency" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if two specified instances of <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> are equal.</summary>
<param name="c1">A <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object.</param>
<param name="c2">A <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object.</param>
<returns>
<see langword="true" /> if <paramref name="c1" /> and <paramref name="c2" /> are equal.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.GetHashCode" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetHashCode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Returns a hash code for the <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object.</summary>
<returns>A 32-bit signed integer hash code.</returns>
<remarks>
Two <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> objects might have the same hash code even though they represent different values. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.op_Equality(NationalInstruments.DAQmx.CODataFrequency,NationalInstruments.DAQmx.CODataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Equality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataFrequency,NationalInstruments.DAQmx.CODataFrequency" nireturnvaluetype="System.Boolean">
      <summary>
Returns true if two <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> objects are equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.op_Inequality(NationalInstruments.DAQmx.CODataFrequency,NationalInstruments.DAQmx.CODataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Inequality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataFrequency,NationalInstruments.DAQmx.CODataFrequency" nireturnvaluetype="System.Boolean">
      <summary>
Returns true if two <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> objects are not equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CODataFrequency" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are not equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataFrequency.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="11/21/2006 11:40:02 AM" niupdatedby="Sebastius" nidisplayname="CODataFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="T:NationalInstruments.DAQmx.CODataTime" nitypekind="Struct" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CODataTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a counter output specified in terms of time.</summary>
<threadsafety safety="unsafe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.#ctor(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CODataTime" nihasget="0" nihasset="0" niparameters="lowTime,highTime" niparametertypes="System.Double,System.Double" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object with the specified initial values.</summary>
<param name="lowTime">The amount of time the pulse is low.</param>
<param name="highTime">The amount of time the pulse is high.</param>
</member>
    <member name="P:NationalInstruments.DAQmx.CODataTime.LowTime" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LowTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Gets or sets the amount of time the pulse is low.</summary>
<value>The amount of time the pulse is low.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CODataTime.HighTime" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HighTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Gets or sets the amount of time the pulse is high.</summary>
<value>The amount of time the pulse is high.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.Equals(System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="obj" niparametertypes="System.Object" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified object.</summary>
<param name="obj">An object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="obj" /> is a <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object that has the same low time and high time as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.Equals(NationalInstruments.DAQmx.CODataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c" niparametertypes="NationalInstruments.DAQmx.CODataTime" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object.</summary>
<param name="c">A <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="c" /> has the same low time and high time as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.Equals(NationalInstruments.DAQmx.CODataTime,NationalInstruments.DAQmx.CODataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataTime,NationalInstruments.DAQmx.CODataTime" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if two specified instances of <see cref="T:NationalInstruments.DAQmx.CODataTime" /> are equal.</summary>
<param name="c1">A <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object.</param>
<param name="c2">A <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object.</param>
<returns>
<see langword="true" /> if <paramref name="c1" /> and <paramref name="c2" /> are equal.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.GetHashCode" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetHashCode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Returns a hash code for the <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object.</summary>
<returns>A 32-bit signed integer hash code.</returns>
<remarks>
Two <see cref="T:NationalInstruments.DAQmx.CODataTime" /> objects might have the same hash code even though they represent different values. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.op_Equality(NationalInstruments.DAQmx.CODataTime,NationalInstruments.DAQmx.CODataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Equality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataTime,NationalInstruments.DAQmx.CODataTime" nireturnvaluetype="System.Boolean">
      <summary>
Returns true if two <see cref="T:NationalInstruments.DAQmx.CODataTime" /> objects are equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.op_Inequality(NationalInstruments.DAQmx.CODataTime,NationalInstruments.DAQmx.CODataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Inequality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataTime,NationalInstruments.DAQmx.CODataTime" nireturnvaluetype="System.Boolean">
      <summary>
Returns true if two <see cref="T:NationalInstruments.DAQmx.CODataTime" /> objects are not equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CODataTime" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are not equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTime.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="11/21/2006 11:40:02 AM" niupdatedby="Sebastius" nidisplayname="CODataTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="T:NationalInstruments.DAQmx.CounterSingleChannelWriter" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterSingleChannelWriter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for writing samples to a single counter output channel in a counter output task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterSingleChannelWriter" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CounterSingleChannelWriter" /> class to write to the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to write to.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for the writer classes to provide samples to be generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.WriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTime" nireturnvaluetype="System.Void">
      <summary>Writes a time sample to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a   counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.WriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataFrequency" nireturnvaluetype="System.Void">
      <summary>Writes a frequency sample to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataTime,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTime,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a time sample to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library </seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataFrequency,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a frequency sample to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a   counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndWrite" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Void">
      <summary>Handles the end of an asynchronous write initiated with any of the counter asynchronous write methods, such as <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency,System.AsyncCallback,System.Object)" />.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling any of the counter asynchronous write methods, such as <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" /> before the asynchronous write represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" /> waits for the write to complete before returning.  For a write to a buffered task, the write is considered complete when all of the written samples have been transferred to the task buffer.  Use <see cref="P:NationalInstruments.DAQmx.Task.IsDone" /> or <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.TimeSpan)" /> on the <see cref="T:NationalInstruments.DAQmx.Task" /> object to determine if a task has generated all of the data that it was configured to generate.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to one of the counter asynchronous write methods, such as <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.CounterSingleChannelWriter.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.WriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTicks" nireturnvaluetype="System.Void">
      <summary>Writes a ticks sample to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a   counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataTicks,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTicks,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a ticks sample to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a   counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A sample to write to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.CounterSingleChannelWriter.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.WriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataTicks[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTicks[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more ticks samples to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel. </param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.WriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataTime[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTime[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more time samples to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a  counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel. </param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.WriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataFrequency[]" nireturnvaluetype="System.Void">
      <summary>Writes one or more frequency samples to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel. </param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataTicks[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTicks[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more ticks samples to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a  counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel. </param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataTime[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTime[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more time samples to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a  counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel. </param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library </seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.BeginWriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataFrequency[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more frequency samples to a single <see cref="T:NationalInstruments.DAQmx.COChannel" /> in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a sample to write to the channel. </param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.CounterMultiChannelWriter" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterMultiChannelWriter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for writing samples to one or more counter output channels in a counter output task.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterMultiChannelWriter" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CounterMultiChannelWriter" /> class to write to the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to write to.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for the writer classes to provide samples to be generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.WriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataTime[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTime[]" nireturnvaluetype="System.Void">
      <summary>Writes a single time sample to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a   counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.WriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataFrequency[]" nireturnvaluetype="System.Void">
      <summary>Writes a single frequency sample to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a   counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataTime[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTime[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single time sample to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataFrequency[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single frequency sample to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a  counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndWrite" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Void">
      <summary>Handles the end of an asynchronous write initiated with any of the counter asynchronous write methods, such as <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[],System.AsyncCallback,System.Object)" />.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling any of the counter asynchronous write methods, such as <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[],System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" /> before the asynchronous write represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" /> waits for the write to complete before returning.  For a write to a buffered task, the write is considered complete when all of the written samples have been transferred to the task buffer.  Use <see cref="P:NationalInstruments.DAQmx.Task.IsDone" /> or <see cref="M:NationalInstruments.DAQmx.Task.WaitUntilDone(System.TimeSpan)" /> on the <see cref="T:NationalInstruments.DAQmx.Task" /> object to determine if a task has generated all of the data that it was configured to generate.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to one of the counter asynchronous write methods, such as <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[],System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.IndexOutOfRangeException">The data provided to one of the counter asynchronous write methods, such as <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[],System.AsyncCallback,System.Object)" />, had a non-zero lower bound.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.CounterMultiChannelWriter.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />.
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.WriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataTicks[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTicks[]" nireturnvaluetype="System.Void">
      <summary>Writes a single ticks sample to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteSingleSample(System.Boolean,NationalInstruments.DAQmx.CODataTicks[],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginWriteSingleSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTicks[],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of a single ticks sample to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 1D array of samples to write to the task. Each element of the array corresponds to a channel in the task. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="P:NationalInstruments.DAQmx.CounterMultiChannelWriter.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.WriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataTicks[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="8/14/2009 1:28:04 PM" niupdatedby="Sebastius" nidisplayname="WriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTicks[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more ticks samples to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.WriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataTime[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="8/14/2009 1:28:04 PM" niupdatedby="Sebastius" nidisplayname="WriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTime[,]" nireturnvaluetype="System.Void">
      <summary>Writes one or more time samples to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel.  The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.WriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="8/14/2009 1:28:04 PM" niupdatedby="Sebastius" nidisplayname="WriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataFrequency[,]" nireturnvaluetype="System.Void">
      <summary>Writes a single frequency samples to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a  counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel. The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<remarks>
NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.IndexOutOfRangeException">
<paramref name="data" /> has a non-zero lower bound.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataTicks[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="8/14/2009 1:28:04 PM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTicks[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more ticks samples to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel.  The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataTime[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="8/14/2009 1:28:04 PM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataTime[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more time samples to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel.  The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.BeginWriteMultiSample(System.Boolean,NationalInstruments.DAQmx.CODataFrequency[0:,0:],System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="8/14/2009 1:28:04 PM" niupdatedby="Sebastius" nidisplayname="BeginWriteMultiSample" nihasget="0" nihasset="0" niparameters="autoStart,data,callback,state" niparametertypes="System.Boolean,NationalInstruments.DAQmx.CODataFrequency[,],System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous write of one or more frequency samples to one or more <see cref="T:NationalInstruments.DAQmx.COChannel" /> objects in a counter output task.</summary>
<param name="autoStart">
If set to <see langword="true" /> this method automatically calls <see cref="M:NationalInstruments.DAQmx.Task.Start" /> if you do not explicitly call it.  You cannot set this parameter to <see langword="true" /> if you have installed events on the task.</param>
<param name="data">A 2D array of samples to write to the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample to write to each channel.  The order of the channels in the array corresponds to the order in which you add the channels to the task.</param>
<param name="callback">An optional asynchronous callback that is called when the write is complete.  Specify <see langword="null" /> if you do not want a callback when the write is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous write request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>Pass the returned <see cref="T:System.IAsyncResult" /> to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelWriter.EndWrite(System.IAsyncResult)" /> to get any exceptions that occurred during the asynchronous write or to wait for the write to complete.</para>
<para>NI-DAQmx scales the generated data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>
</member>
    <member name="T:NationalInstruments.DAQmx.CODataTicks" nitypekind="Struct" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CODataTicks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a counter output specified in terms of timebase ticks.</summary>
<threadsafety safety="unsafe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.#ctor(System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CODataTicks" nihasget="0" nihasset="0" niparameters="lowTicks,highTicks" niparametertypes="System.Int32,System.Int32" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object with the specified initial values.</summary>
<param name="lowTicks">The number of timebase ticks the pulse is low.</param>
<param name="highTicks">The number of timebase ticks the pulse is high.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.#ctor(System.UInt32,System.UInt32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CODataTicks" nihasget="0" nihasset="0" niparameters="lowTicks,highTicks" niparametertypes="System.UInt32,System.UInt32" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object with the specified unsigned initial values.</summary>
<param name="lowTicks">The number of timebase ticks the pulse is low.</param>
<param name="highTicks">The number of timebase ticks the pulse is high.</param>
</member>
    <member name="P:NationalInstruments.DAQmx.CODataTicks.LowTicksInt32" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LowTicksInt32" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets or sets the number of timebase ticks the pulse is low.</summary>
<value>The number of timebase ticks the pulse is low.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CODataTicks.HighTicksInt32" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HighTicksInt32" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets or sets the number of timebase ticks the pulse is high.</summary>
<value>The number of timebase ticks the pulse is high.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CODataTicks.LowTicksUInt32" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LowTicksUInt32" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32">
      <summary>Gets or sets the number of timebase ticks the pulse is low.</summary>
<value>The number of timebase ticks the pulse is low.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CODataTicks.HighTicksUInt32" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HighTicksUInt32" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32">
      <summary>Gets or sets the number of timebase ticks the pulse is high.</summary>
<value>The number of timebase ticks the pulse is high.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.Equals(System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="obj" niparametertypes="System.Object" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified object.</summary>
<param name="obj">An object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="obj" /> is a <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object that has the same low ticks and high ticks as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.Equals(NationalInstruments.DAQmx.CODataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c" niparametertypes="NationalInstruments.DAQmx.CODataTicks" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object.</summary>
<param name="c">A <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="c" /> has the same low ticks and high ticks as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.Equals(NationalInstruments.DAQmx.CODataTicks,NationalInstruments.DAQmx.CODataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataTicks,NationalInstruments.DAQmx.CODataTicks" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if two specified instances of <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> are equal.</summary>
<param name="c1">A <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object.</param>
<param name="c2">A <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object.</param>
<returns>
<see langword="true" /> if <paramref name="c1" /> and <paramref name="c2" /> are equal.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.GetHashCode" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetHashCode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Returns a hash code for the <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object.</summary>
<returns>A 32-bit signed integer hash code.</returns>
<remarks>
Two <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> objects might have the same hash code even though they represent different values. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.op_Equality(NationalInstruments.DAQmx.CODataTicks,NationalInstruments.DAQmx.CODataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Equality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataTicks,NationalInstruments.DAQmx.CODataTicks" nireturnvaluetype="System.Boolean">
      <summary>
Returns true if two <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> objects are equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.op_Inequality(NationalInstruments.DAQmx.CODataTicks,NationalInstruments.DAQmx.CODataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Inequality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CODataTicks,NationalInstruments.DAQmx.CODataTicks" nireturnvaluetype="System.Boolean">
      <summary>
Returns true if two <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> objects are not equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CODataTicks" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are not equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CODataTicks.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="11/21/2006 11:40:02 AM" niupdatedby="Sebastius" nidisplayname="CODataTicks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="T:NationalInstruments.DAQmx.PhysicalChannelTypes" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PhysicalChannelTypes" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the types of physical channels to include when requesting a list of 
physical channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.All" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All types of physical channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.DOPort" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DOPort" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Digital output ports.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.DOLine" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DOLine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Digital output lines.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.DIPort" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DIPort" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Digital input ports.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.DILine" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DILine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Digital input lines.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.CO" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Counter outputs.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.CI" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CI" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Counter inputs.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.AO" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analog outputs.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelTypes.AI" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AI" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analog inputs.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.PhysicalChannelAccess" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PhysicalChannelAccess" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the physical channel access types to include when requesting a list of 
physical channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelAccess.All" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Both internal and external channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelAccess.Internal" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Internal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Physical channels internal to the device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PhysicalChannelAccess.External" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="External" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Physical channels with an external connector on the device.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.TerminalTypes" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TerminalTypes" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the types of terminals to include when requesting a list of terminals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TerminalTypes.All" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Both basic and advanced terminals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TerminalTypes.Advanced" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Advanced" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Terminals that are often internal to a device or terminals rarely used in typical measurement applications.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TerminalTypes.Basic" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Basic" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Terminals commonly used in typical measurement applications.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.BasicTedsDataOption" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BasicTedsDataOption" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how to handle <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/writingTEDS.html');">basic TEDS data</see> in a TEDS bitstream.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.BasicTedsDataOption.DoNotWrite" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DoNotWrite" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Basic TEDS data is ignored.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.BasicTedsDataOption.WriteToProm" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteToProm" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Basic TEDS data is written to the PROM. Any subsequent attempts to write basic TEDS data results in an error.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.BasicTedsDataOption.WriteToEeprom" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WriteToEeprom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Basic TEDS data is written to the EEPROM, even if the sensor includes a PROM.  You cannot write basic TEDS data if the PROM contains data.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalPatternStartTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalPatternStartTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties that let a task start acquiring or generating samples when a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see> is matched.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.StartTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.StartTrigger.DigitalPattern" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternStartTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternStartTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> to use for pattern matching. The order of the physical channels determines the order of the pattern. If a <see href="javascript:launchSharedHelp('mxcncpts.chm::/linesPorts.html');">port</see> is included, the order of the physical channels within the port is in ascending order.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> to use for pattern matching. The order of the physical channels determines the order of the pattern. If a <see href="javascript:launchSharedHelp('mxcncpts.chm::/linesPorts.html');">port</see> is included, the order of the physical channels within the port is in ascending order.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Pattern" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Pattern" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the Start Trigger to occur.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the Start Trigger to occur.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Condition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Condition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalPatternStartTriggerCondition">
      <summary>Specifies whether the Start Trigger occurs when the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Source" /> match or differ from the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Pattern" />.</summary>
<value>Specifies whether the Start Trigger occurs when the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Source" /> match or differ from the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Pattern" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalPatternReferenceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties that let a  task stop the acquisition when the device acquires all pretrigger samples, matches a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see>, and acquires all posttrigger samples. 
</summary>
<seealso cref="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureDigitalPatternTrigger(System.String,System.String,NationalInstruments.DAQmx.DigitalPatternReferenceTriggerCondition,System.Int64)" />
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.ReferenceTrigger.DigitalPattern" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> to use for pattern matching. The order of the physical channels determines the order of the pattern. If a <see href="javascript:launchSharedHelp('mxcncpts.chm::/linesPorts.html');">port</see> is included, the order of the physical channels within the port is in ascending order.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> to use for pattern matching. The order of the physical channels determines the order of the pattern. If a <see href="javascript:launchSharedHelp('mxcncpts.chm::/linesPorts.html');">port</see> is included, the order of the physical channels within the port is in ascending order.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Pattern" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Pattern" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> to occur.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> to occur.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Condition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Condition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalPatternReferenceTriggerCondition">
      <summary>Specifies whether the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs when the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Source" /> match or differ from the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Pattern" />.</summary>
<value>Specifies whether the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs when the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Source" /> match or differ from the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Pattern" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.HandshakeTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HandshakeTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Handshaking.html');">handshake trigger signals on a task</see>.</summary>
<seealso cref="T:NationalInstruments.DAQmx.Triggers" />
<seealso cref="P:NationalInstruments.DAQmx.Triggers.HandshakeTrigger" />
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.HandshakeTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.HandshakeTrigger.ConfigureNone" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureNone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Disables <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Handshaking.html');">handshake triggering</see> for the measurement.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.ReferenceTrigger.ConfigureNone" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.HandshakeTrigger.ConfigureInterlockedTrigger(System.String,NationalInstruments.DAQmx.InterlockedHandshakeTriggerAssertedLevel)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfigureInterlockedTrigger" nihasget="0" nihasset="0" niparameters="source,assertedLevel" niparametertypes="System.String,NationalInstruments.DAQmx.InterlockedHandshakeTriggerAssertedLevel" nireturnvaluetype="System.Void">
      <summary>Configures the task to stop the acquisition when the device acquires all pretrigger samples; an <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/analogTriggering.html');">analog signal reaches the level you specify</see>; and the device acquires all post-trigger samples.</summary>
<param name="source">
The name of a virtual channel or <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/termNames.html');">terminal</see> where there is an analog signal to use as the source of the trigger. For E Series devices, if you use a virtual channel, it must be the only channel in the task. The only terminal you can use for E Series devices is PFI0.
</param>
<param name="assertedLevel">
The value of the desired <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventInterlockedAssertedLevel" />.</param>
<remarks>The NI-DAQmx driver does not determine if the requested settings are possible until the task is verified.  <see cref="M:NationalInstruments.DAQmx.HandshakeTrigger.ConfigureInterlockedTrigger(System.String,NationalInstruments.DAQmx.InterlockedHandshakeTriggerAssertedLevel)" /> does not throw an exception for parameter values that are not compatible with your hardware or other settings in your task.  To determine if all of the settings for a <see cref="T:NationalInstruments.DAQmx.Task" /> are valid, you must verify the task by starting the task, either with <see cref="M:NationalInstruments.DAQmx.Task.Start" /> or by reading from or writing to the task, or by calling <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> with <see cref="F:NationalInstruments.DAQmx.TaskAction.Verify" />.</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.HandshakeTrigger.Interlocked" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Interlocked" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.InterlockedHandshakeTrigger">
      <summary>Gets the <see cref="T:NationalInstruments.DAQmx.InterlockedHandshakeTrigger" />.</summary>
<value>The <see cref="T:NationalInstruments.DAQmx.InterlockedHandshakeTrigger" />.</value>
</member>
    <member name="M:NationalInstruments.DAQmx.HandshakeTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.HandshakeTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.HandshakeTrigger.Type" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Type" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::HandshakeTriggerType">
      <summary>Specifies the type of <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see> to use.</summary>
<value>Specifies the type of <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see> to use.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.InterlockedHandshakeTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="InterlockedHandshakeTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties to configure interlocked handshake triggers. For more information, refer to <see cref="T:NationalInstruments.DAQmx.HandshakeTrigger" />.
</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.HandshakeTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.HandshakeTrigger.Interlocked" />
</member>
    <member name="M:NationalInstruments.DAQmx.InterlockedHandshakeTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.InterlockedHandshakeTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.InterlockedHandshakeTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.InterlockedHandshakeTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the source <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see>.</summary>
<value>Specifies the source <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.InterlockedHandshakeTrigger.AssertedLevel" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AssertedLevel" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::InterlockedHandshakeTriggerAssertedLevel">
      <summary>Specifies the asserted level of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see>.</summary>
<value>Specifies the asserted level of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see>.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.SavedTaskInfo" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SavedTaskInfo" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates information about a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see> stored in Measurement <entity value="amp" /> Automation Explorer (MAX).  You can retrieve an instance of this class by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.GetSavedTaskInfo(System.String)" />.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.SavedTaskInfo.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.SavedTaskInfo" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.SavedTaskInfo.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SavedTaskInfo.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedTaskInfo.Name" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Name" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Gets the name of the task.</summary>
<value>A <see cref="T:System.String" /> that represents the name of the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.SavedTaskInfo.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.SavedTaskInfo.Author" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Author" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the author of the task.</summary>
<value>Indicates the author of the task.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedTaskInfo.AllowInteractiveEditing" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AllowInteractiveEditing" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the task can be edited in the DAQ Assistant.</summary>
<value>Indicates whether the task can be edited in the DAQ Assistant.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedTaskInfo.AllowInteractiveDeletion" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AllowInteractiveDeletion" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the task can be deleted through MAX.</summary>
<value>Indicates whether the task can be deleted through MAX.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.SavedChannelInfo" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SavedChannelInfo" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates information about a global channel stored in Measurement <entity value="amp" /> Automation Explorer (MAX).  You can retrieve an instance of this class by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.GetSavedChannelInfo(System.String)" />.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.SavedChannelInfo.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.SavedChannelInfo" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.SavedChannelInfo.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SavedChannelInfo.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedChannelInfo.Name" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Name" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Gets the name of the channel.</summary>
<value>A <see cref="T:System.String" /> that represents the name of the channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.SavedChannelInfo.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.SavedChannelInfo.Author" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Author" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the author of the global channel.</summary>
<value>Indicates the author of the global channel.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedChannelInfo.AllowInteractiveEditing" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AllowInteractiveEditing" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the global channel can be edited in the DAQ Assistant.</summary>
<value>Indicates whether the global channel can be edited in the DAQ Assistant.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedChannelInfo.AllowInteractiveDeletion" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AllowInteractiveDeletion" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the global channel can be deleted through MAX.</summary>
<value>Indicates whether the global channel can be deleted through MAX.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.SavedScaleInfo" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SavedScaleInfo" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates information about a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> stored in Measurement <entity value="amp" /> Automation Explorer (MAX).  You can retrieve an instance of this class by calling <see cref="M:NationalInstruments.DAQmx.DaqSystem.GetSavedScaleInfo(System.String)" />.</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.SavedScaleInfo.Dispose" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Releases all resources used by <see cref="T:NationalInstruments.DAQmx.SavedScaleInfo" />.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.SavedScaleInfo.Finalize" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finalize" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SavedScaleInfo.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedScaleInfo.Name" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Name" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Gets the name of the scale.</summary>
<value>A <see cref="T:System.String" /> that represents the name of the scale.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.SavedScaleInfo.Dispose(System.Boolean)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Dispose" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.SavedScaleInfo.Author" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Author" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Indicates the author of the custom scale.</summary>
<value>Indicates the author of the custom scale.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedScaleInfo.AllowInteractiveEditing" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AllowInteractiveEditing" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the custom scale can be edited in the DAQ Assistant.</summary>
<value>Indicates whether the custom scale can be edited in the DAQ Assistant.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SavedScaleInfo.AllowInteractiveDeletion" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AllowInteractiveDeletion" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Indicates whether the custom scale can be deleted through MAX.</summary>
<value>Indicates whether the custom scale can be deleted through MAX.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.SaveOptions" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SaveOptions" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies various options used to save a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/tasksNIDAQmx.html');">task</see>, a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/Chans.html');">local or global channel</see> , or a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/customScales.html');">custom scale</see> to Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
<remarks>You can specify multiple options by using bitwise or combining individual values.</remarks>
</member>
    <member name="F:NationalInstruments.DAQmx.SaveOptions.Default" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Default" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The <see cref="F:NationalInstruments.DAQmx.SaveOptions.AllowInteractiveDeletion" /> and <see cref="F:NationalInstruments.DAQmx.SaveOptions.AllowInteractiveEditing" /> options are enabled.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SaveOptions.OverwriteExisting" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="OverwriteExisting" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>If a saved object already exists in Measurement <entity value="amp" /> Automation Explorer (MAX) with the same name as the new object, the new object overwrites the old object.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SaveOptions.AllowInteractiveDeletion" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AllowInteractiveDeletion" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The saved object may be deleted through an interactive tool, such as Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SaveOptions.AllowInteractiveEditing" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AllowInteractiveEditing" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The saved object may be edited through an interactive tool, such as Measurement <entity value="amp" /> Automation Explorer (MAX).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SaveOptions.All" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>All options are enabled.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SaveOptions.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No options are enabled.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.IFilteredTypeDescriptor" nitypekind="Interface" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="IFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Defines the interface that is implemented by all <see cref="T:NationalInstruments.DAQmx.Task" /> subobjects that can perform property filtering by programmatically returning an <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that contains the list of filtered properties for the subobject.</summary>
<remarks>
<para>The following <see cref="T:NationalInstruments.DAQmx.Task" /> subobjects currently implement this interface:</para>
<list type="bullet">
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AdvanceTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AIChannel" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AnalogEdgeStartTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AnalogLevelPauseTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AnalogWindowPauseTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AnalogWindowStartTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.AOChannel" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.ArmStartTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.CIChannel" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.COChannel" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DaqBuffer" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DaqStream" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DIChannel" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DigitalEdgeStartTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DigitalLevelPauseTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DigitalPatternStartTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.DOChannel" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.ExportSignals" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.HandshakeTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.InterlockedHandshakeTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.PauseTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.ReferenceTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.SinglePoint" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.StartTrigger" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.SwitchScan" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.Timing" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.Watchdog" />
</description>
</item>
<item>
<description>
<see cref="T:NationalInstruments.DAQmx.WatchdogExpirationTrigger" />
</description>
</item>
</list>
<para>
Visit the <see href="javascript:WWW(WWW_DAQMXPRO)">DAQmx Professional Developer Tools</see> Web site for more information and examples of programmatically determining device capabilities.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.IFilteredTypeDescriptor.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="filterType,filterFlags" niparametertypes="NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags" nireturnvaluetype="System.ComponentModel.ICustomTypeDescriptor">
      <summary>Returns a list of filtered properties  that belong to the <see cref="T:NationalInstruments.DAQmx.Task" /> subobject, according to the specified filtering type and filter flags.</summary>
<param name="filterType">The type of filtering to perform.</param>
<param name="filterFlags">The filtering options.</param>
<returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that contains the filtered properties.</returns>
<remarks>
<para>Property filtering is a mechanism whereby you can programmatically retrieve a list of properties that are applicable to a specific task's subobject, based on the filtering type.</para>
<para>You can call the <see cref="Overload:System.ComponentModel.ICustomTypeDescriptor.GetProperties" /> method on the returned <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> in order to access the list of properties as a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.  When <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])" /> is called with an attribute array as a filter, the returned properties are filtered as if they all have the <see cref="T:System.ComponentModel.BrowsableAttribute" /> set to <see langword="true" />.</para>
</remarks>
<exception cref="T:System.ArgumentException">An invalid enumeration value was passed as an argument to the function.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="M:NationalInstruments.DAQmx.IFilteredTypeDescriptor.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="filterType" niparametertypes="NationalInstruments.DAQmx.PropertyFilterType" nireturnvaluetype="System.ComponentModel.ICustomTypeDescriptor">
      <summary>Returns a list of filtered properties that belong to the <see cref="T:NationalInstruments.DAQmx.Task" /> subobject, according to the specified filtering type.</summary>
<param name="filterType">The type of filtering to perform.</param>
<returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that contains the filtered properties.</returns>
<remarks>
<para>Property filtering is a mechanism whereby you can programmatically retrieve a list of properties that are applicable to a specific task's subobject, based on the filtering type.</para>
<para>You can call the <see cref="Overload:System.ComponentModel.ICustomTypeDescriptor.GetProperties" /> method on the returned <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> in order to access the list of properties as a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.  When <see cref="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])" /> is called with an attribute array as a filter, the returned properties are filtered as if they all have the <see cref="T:System.ComponentModel.BrowsableAttribute" /> set to <see langword="true" />.</para>
</remarks>
<exception cref="T:System.ArgumentException">An invalid enumeration value was passed as an argument to the function.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.TaskDoneEventHandler" nitypekind="Delegate" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TaskDoneEventHandler" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the method that handles the <see cref="E:NationalInstruments.DAQmx.Task.Done" /> event.</summary>
<param name="sender">
The <see cref="T:NationalInstruments.DAQmx.Task" /> that caused this event.
</param>
<param name="e">
A <see cref="T:NationalInstruments.DAQmx.TaskDoneEventArgs" /> that contains the
event data.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.TaskDoneEventArgs" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TaskDoneEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides data for the <see cref="E:NationalInstruments.DAQmx.Task.Done" /> event. 
</summary>
<threadsafety safety="safe" />
</member>
    <member name="P:NationalInstruments.DAQmx.TaskDoneEventArgs.Error" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Error" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Exception">
      <summary>Gets the <see cref="T:System.Exception" /> that occurred, if any.</summary>
<value>If the task stopped due to an error, an <see cref="T:System.Exception" /> is returned that represents the particular error.  If the task did not stop due to an error, this value is <see langword="null" />.</value>
<remarks>As an alternative to checking this property, you can call the <see cref="M:NationalInstruments.DAQmx.TaskDoneEventArgs.CheckForException" /> method.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.TaskDoneEventArgs.#ctor(System.Exception)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TaskDoneEventArgs" nihasget="0" nihasset="0" niparameters="exception" niparametertypes="System.Exception" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.TaskDoneEventArgs" /> class with the specified exception.
</summary>
<param name="exception">
The <see cref="T:System.Exception" /> that explains why the task stopped, or <see langword="null" /> if the task completed successfully.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.TaskDoneEventArgs.CheckForException" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CheckForException" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Throws the <see cref="T:System.Exception" /> that occurred, if any exists.</summary>
<remarks>If the task stopped due to an error, an <see cref="T:System.Exception" /> is thrown that represents the particular error.  If the task did not stop due to an error, the method returns.  As an alternative to calling this method, you can check the <see cref="P:NationalInstruments.DAQmx.TaskDoneEventArgs.Error" /> property.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.TaskDoneEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TaskDoneEventArgs" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.TaskDoneEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.TaskDoneEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.DaqBuffer" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DaqBuffer" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Exposes a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/buffering.html');">buffer</see> on a <see cref="T:NationalInstruments.DAQmx.Task" /> that can be used to read or write samples to or from an NI-DAQmx task.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.DaqStream" />
<seealso cref="P:NationalInstruments.DAQmx.DaqStream.Buffer" />
</member>
    <member name="M:NationalInstruments.DAQmx.DaqBuffer.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DaqBuffer.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DaqBuffer.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DaqBuffer.InputBufferSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="InputBufferSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of samples the input buffer can hold for each channel in the task. Zero indicates to allocate no buffer. Use a buffer size of 0 to perform a hardware-timed operation without using a buffer. Setting this property overrides the <see href="javascript:launchSharedHelp('mxcncpts.chm::/bufferSize.html');">automatic input buffer allocation</see> that NI-DAQmx performs.</summary>
<value>Specifies the number of samples the input buffer can hold for each channel in the task. Zero indicates to allocate no buffer. Use a buffer size of 0 to perform a hardware-timed operation without using a buffer. Setting this property overrides the <see href="javascript:launchSharedHelp('mxcncpts.chm::/bufferSize.html');">automatic input buffer allocation</see> that NI-DAQmx performs.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqBuffer.InputOnBoardBufferSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="InputOnBoardBufferSize" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Indicates in samples per channel the size of the onboard input buffer of the device.</summary>
<value>Indicates in samples per channel the size of the onboard input buffer of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqBuffer.OutputBufferSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="OutputBufferSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of samples the output buffer can hold for each channel in the task. Zero indicates to allocate no buffer. Use a buffer size of 0 to perform a hardware-timed operation without using a buffer. Setting this property overrides the <see href="javascript:launchSharedHelp('mxcncpts.chm::/bufferSize.html');">automatic output buffer allocation</see> that NI-DAQmx performs.</summary>
<value>Specifies the number of samples the output buffer can hold for each channel in the task. Zero indicates to allocate no buffer. Use a buffer size of 0 to perform a hardware-timed operation without using a buffer. Setting this property overrides the <see href="javascript:launchSharedHelp('mxcncpts.chm::/bufferSize.html');">automatic output buffer allocation</see> that NI-DAQmx performs.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DaqBuffer.OutputOnBoardBufferSize" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="OutputOnBoardBufferSize" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies in samples per channel the size of the onboard output buffer of the device.</summary>
<value>Specifies in samples per channel the size of the onboard output buffer of the device.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.SinglePoint" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SinglePoint" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties and methods that configure how to align to the sample clock of the <see cref="T:NationalInstruments.DAQmx.Task" />.</summary>
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.Timing" />
<seealso cref="P:NationalInstruments.DAQmx.Timing.SinglePoint" />
</member>
    <member name="M:NationalInstruments.DAQmx.SinglePoint.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WaitForNextSampleClock" nihasget="0" nihasset="0" niparameters="timeout" niparametertypes="System.Double" nireturnvaluetype="System.Boolean">
      <summary>Waits until the next pulse of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/sampClock.html');">sample clock</see> occurs.
</summary>
<param name="timeout">
The maximum amount of time, in seconds, to wait for the next sample clock pulse. If the time elapses, this method returns an error. If you set timeout to <entity value="ndash" />1, this method waits indefinitely. 
</param>
<returns> Specifies whether the next sample clock is late.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
If an extra sample clock pulse occurs between calls to this method, the second call returns an error or warning and waits for the next sample clock pulse. Use the <see cref="P:NationalInstruments.DAQmx.SinglePoint.ConvertLateErrorsToWarnings" /> property to specify whether this method returns errors or warnings. 
</para>
<para>
Use this method to ensure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/iocycles.html');">I/O cycles</see> complete within sample clock periods. National Instruments recommends you use this method for certain applications only. 
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WaitForNextSampleClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Waits until the next pulse of the <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/sampClock.html');">sample clock</see> occurs, with a timeout value of 10 seconds.
</summary>
<returns> Specifies whether the next sample clock is late.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
<para>
If an extra sample clock pulse occurs between calls to this method, the second call returns an error or warning and waits for the next sample clock pulse. Use the <see cref="P:NationalInstruments.DAQmx.SinglePoint.ConvertLateErrorsToWarnings" /> property to specify whether this method returns errors or warnings. 
</para>
<para>
Use this method to ensure <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/iocycles.html');">I/O cycles</see> complete within sample clock periods. National Instruments recommends you use this method for certain applications only. 
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.SinglePoint.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SinglePoint.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="12/12/2005 12:10:09 PM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.SinglePoint.ConvertLateErrorsToWarnings" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ConvertLateErrorsToWarnings" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies if <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> and reading from the task convert late errors to warnings. NI-DAQmx returns no late warnings or errors until the number of warmup iterations you specify with <see cref="P:NationalInstruments.DAQmx.SinglePoint.NumberOfWarmupIterations" /> execute.</summary>
<value>Specifies if <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> and reading from the task convert late errors to warnings. NI-DAQmx returns no late warnings or errors until the number of warmup iterations you specify with <see cref="P:NationalInstruments.DAQmx.SinglePoint.NumberOfWarmupIterations" /> execute.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SinglePoint.NumberOfWarmupIterations" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="NumberOfWarmupIterations" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Int64">
      <summary>Specifies the number of loop iterations that must occur before <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> and reading from the task return any late warnings or errors. The system needs a number of iterations to stabilize. During this period, a large amount of jitter occurs, potentially causing reads and writes to be late. The default number of warmup iterations is 100. Specify a larger number if needed to stabilize the system.</summary>
<value>Specifies the number of loop iterations that must occur before <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> and reading from the task return any late warnings or errors. The system needs a number of iterations to stabilize. During this period, a large amount of jitter occurs, potentially causing reads and writes to be late. The default number of warmup iterations is 100. Specify a larger number if needed to stabilize the system.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClockWaitMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WaitForNextSampleClockWaitMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WaitForNextSampleClockWaitMode">
      <summary>Specifies how <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> waits for the next Sample Clock pulse.</summary>
<value>Specifies how <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> waits for the next Sample Clock pulse.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SinglePoint.ReportMissedSamples" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReportMissedSamples" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::Boolean">
      <summary>Specifies whether reading from the task returns lateness errors or warnings when it detects missed Sample Clock pulses. This setting does not affect <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" />. Set this property to <see langword="true" /> for <see href="javascript:launchSharedHelp('mxcncpts.chm::/readwritelate.html');">applications</see> that need to detect lateness without using <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" />.</summary>
<value>Specifies whether reading from the task returns lateness errors or warnings when it detects missed Sample Clock pulses. This setting does not affect <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" />. Set this property to <see langword="true" /> for <see href="javascript:launchSharedHelp('mxcncpts.chm::/readwritelate.html');">applications</see> that need to detect lateness without using <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.SinglePoint.WriteRecoveryMode" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WriteRecoveryMode" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::WriteRecoveryMode">
      <summary>Specifies how NI-DAQmx attempts to recover after missing a Sample Clock pulse when performing counter writes.</summary>
<value>Specifies how NI-DAQmx attempts to recover after missing a Sample Clock pulse when performing counter writes.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.PropertyFilterType" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PropertyFilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of property filtering to perform.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PropertyFilterType.DevicesInTask" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DevicesInTask" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Returns only the properties that apply to the devices being used in the task and belong to the <see cref="T:NationalInstruments.DAQmx.Task" /> subobject.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PropertyFilterType.ConfiguredDevices" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ConfiguredDevices" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Returns only the properties that apply to the configured devices on the system and belong to the <see cref="T:NationalInstruments.DAQmx.Task" /> subobject.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PropertyFilterType.All" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="All" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Returns all of the properties that belong to the <see cref="T:NationalInstruments.DAQmx.Task" /> subobject.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.PropertyFilterFlags" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PropertyFilterFlags" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies a set of property filtering options.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PropertyFilterFlags.Volatile" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Volatile" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The property filtering only returns properties that can be modified by the DAQmx driver while the task is running.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PropertyFilterFlags.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No additional filtering options.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleCompleteEventHandler" nitypekind="Delegate" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleCompleteEventHandler" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the method that handles the <see cref="E:NationalInstruments.DAQmx.Task.SampleComplete" /> event.</summary>
<param name="sender">
The <see cref="T:NationalInstruments.DAQmx.Task" /> that caused this event.
</param>
<param name="e">
A <see cref="T:NationalInstruments.DAQmx.SampleCompleteEventArgs" /> that contains the
event data.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.CounterOutputEventHandler" nitypekind="Delegate" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterOutputEventHandler" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the method that handles the <see cref="E:NationalInstruments.DAQmx.Task.CounterOutput" /> event.</summary>
<param name="sender">
The <see cref="T:NationalInstruments.DAQmx.Task" /> that caused this event.
</param>
<param name="e">
A <see cref="T:NationalInstruments.DAQmx.CounterOutputEventArgs" /> that contains the
event data.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalChangeDetectionEventHandler" nitypekind="Delegate" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalChangeDetectionEventHandler" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the method that handles the <see cref="E:NationalInstruments.DAQmx.Task.DigitalChangeDetection" /> event.</summary>
<param name="sender">
The <see cref="T:NationalInstruments.DAQmx.Task" /> that caused this event.
</param>
<param name="e">
A <see cref="T:NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs" /> that contains the
event data.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockEventHandler" nitypekind="Delegate" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleClockEventHandler" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the method that handles the <see cref="E:NationalInstruments.DAQmx.Task.SampleClock" /> event.</summary>
<param name="sender">
The <see cref="T:NationalInstruments.DAQmx.Task" /> that caused this event.
</param>
<param name="e">
A <see cref="T:NationalInstruments.DAQmx.SampleClockEventArgs" /> that contains the
event data.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.CounterOutputEventArgs" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterOutputEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides data for the <see cref="E:NationalInstruments.DAQmx.Task.CounterOutput" /> event. 
</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CounterOutputEventArgs.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterOutputEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CounterOutputEventArgs" /> class.
</summary>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterOutputEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterOutputEventArgs" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.CounterOutputEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterOutputEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalChangeDetectionEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides data for the <see cref="E:NationalInstruments.DAQmx.Task.DigitalChangeDetection" /> event. 
</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalChangeDetectionEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs" /> class.
</summary>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalChangeDetectionEventArgs" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalChangeDetectionEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockEventArgs" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleClockEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides data for the <see cref="E:NationalInstruments.DAQmx.Task.SampleClock" /> event. 
</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.SampleClockEventArgs.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleClockEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.SampleClockEventArgs" /> class.
</summary>
</member>
    <member name="M:NationalInstruments.DAQmx.SampleClockEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleClockEventArgs" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SampleClockEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.SampleClockEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleCompleteEventArgs" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleCompleteEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides data for the <see cref="E:NationalInstruments.DAQmx.Task.SampleComplete" /> event. 
</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.SampleCompleteEventArgs.#ctor" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleCompleteEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.SampleCompleteEventArgs" /> class.
</summary>
</member>
    <member name="M:NationalInstruments.DAQmx.SampleCompleteEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleCompleteEventArgs" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.SampleCompleteEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.SampleCompleteEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.WaveformAttributeModes" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="WaveformAttributeModes" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of information returned from waveform reads.</summary>
<remarks>
<para>The value of this property may affect performance when performing waveform reads.</para>
</remarks>
</member>
    <member name="F:NationalInstruments.DAQmx.WaveformAttributeModes.Timing" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Timing" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Returns timing information in addition to the waveform data. This value may degrade performance when performing waveform reads.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WaveformAttributeModes.ExtendedProperties" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ExtendedProperties" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Returns extended properties in addition to the waveform data. This value may degrade performance when performing waveform reads.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WaveformAttributeModes.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Returns only the waveform data itself, with no timing information or extended properties. Use this value for optimal performance.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalPatternPauseTrigger" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalPatternPauseTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains properties that let a task pause the acquisition or generation when the device matches a <see href="javascript:LaunchMergedHelp('daqhelp.chm','mxcncpts.chm::/digpattern.html');">digital pattern</see>. 
</summary>
<seealso cref="M:NationalInstruments.DAQmx.PauseTrigger.ConfigureDigitalPatternTrigger(System.String,System.String,NationalInstruments.DAQmx.DigitalPatternPauseTriggerCondition)" />
<threadsafety safety="safe" />
<seealso cref="T:NationalInstruments.DAQmx.PauseTrigger" />
<seealso cref="P:NationalInstruments.DAQmx.PauseTrigger.DigitalPattern" />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.GetFilteredTypeDescriptor(NationalInstruments.DAQmx.PropertyFilterType,NationalInstruments.DAQmx.PropertyFilterFlags)" nitypekind="Method" nieditor="Sebastius_NOEDIT" niapproved="True" nilastupdated="3/13/2006 10:12:20 AM" niupdatedby="Sebastius" nidisplayname="GetFilteredTypeDescriptor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <exclude />
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Source" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Source" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the physical channels to use for pattern matching. The order of the physical channels determines the order of the pattern. If a port is included, the lines within the port are in ascending order.</summary>
<value>Specifies the physical channels to use for pattern matching. The order of the physical channels determines the order of the pattern. If a port is included, the lines within the port are in ascending order.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Pattern" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Pattern" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System::String __gc*">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the Pause Trigger to occur.</summary>
<value>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> that must be met for the Pause Trigger to occur.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Condition" nitypekind="Property" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Condition" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments::DAQmx::DigitalPatternPauseTriggerCondition">
      <summary>Specifies if the Pause Trigger occurs when the physical channels specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Source" /> match or differ from the digital pattern specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Pattern" />.</summary>
<value>Specifies if the Pause Trigger occurs when the physical channels specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Source" /> match or differ from the digital pattern specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Pattern" />.</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.Scxi1124Range" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Scxi1124Range" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the range for the SCXI 1124 calibration values.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.Scxi1124Range.Range0to20mA" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Range0to20mA" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Range is from 0 mA to 20 mA.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.Scxi1124Range.RangeNeg10to10V" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RangeNeg10to10V" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Range is from -10 volts to 10 volts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.Scxi1124Range.RangeNeg5to5V" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RangeNeg5to5V" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Range is from -5 volts to 5 volts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.Scxi1124Range.RangeNeg1to1V" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="RangeNeg1to1V" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Range is from -1 volt to 1 volt.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.Scxi1124Range.Range0to10V" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Range0to10V" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Range is from 0 volts to 10 volts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.Scxi1124Range.Range0to5V" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Range0to5V" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Range is from 0 volts to 5 volts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.Scxi1124Range.Range0to1V" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Range0to1V" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Range is from 0 volts to 1 volt.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.TriggerUsageTypes" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TriggerUsageTypes" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies a set of trigger types a device may support.</summary>
<remarks>Specifies a set of trigger types a device may support.</remarks>
<seealso cref="P:NationalInstruments.DAQmx.Device.AITriggerUsage" />
<seealso cref="P:NationalInstruments.DAQmx.Device.AOTriggerUsage" />
<seealso cref="P:NationalInstruments.DAQmx.Device.CITriggerUsage" />
<seealso cref="P:NationalInstruments.DAQmx.Device.COTriggerUsage" />
<seealso cref="P:NationalInstruments.DAQmx.Device.DITriggerUsage" />
<seealso cref="P:NationalInstruments.DAQmx.Device.DOTriggerUsage" />
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerUsageTypes.ArmStart" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ArmStart" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device supports arm start triggers.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerUsageTypes.Handshake" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Handshake" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device supports handshake triggers.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerUsageTypes.Reference" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Reference" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device supports reference triggers.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerUsageTypes.Pause" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Pause" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device supports pause triggers.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerUsageTypes.Advance" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Advance" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device supports advance triggers.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerUsageTypes.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device supports no trigger types.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerUsageTypes.Start" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Start" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device supports start triggers.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.LogicFamily" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LogicFamily" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic family to use for generation and acquisition.</summary>
<remarks>A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to device documentation for information on the logic high and logic low voltages for these logic families.</remarks>
</member>
    <member name="F:NationalInstruments.DAQmx.LogicFamily.FiveVolts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="FiveVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with TTL and CMOS signals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.LogicFamily.ThreePointThreeVolts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ThreePointThreeVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with LVTTL and LVCMOS signals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.LogicFamily.TwoPointFiveVolts" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TwoPointFiveVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with CMOS signals.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CouplingTypes" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CouplingTypes" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies a set of coupling types a device may support.</summary>
<remarks>Specifies a set of coupling types a device may support.</remarks>
</member>
    <member name="F:NationalInstruments.DAQmx.CouplingTypes.Ground" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Ground" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Remove the signal from the measurement and measure only ground.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CouplingTypes.DC" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Allow NI-DAQmx to measure all of the signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CouplingTypes.AC" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Remove the DC offset from the signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CouplingTypes.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No coupling types supported by the device.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.TerminalConfigurationTypes" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="TerminalConfigurationTypes" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies a set of terminal configuration types a physical channel may support.</summary>
<remarks>Specifies a set of terminal configuration types a physical channel may support.</remarks>
<seealso cref="P:NationalInstruments.DAQmx.PhysicalChannel.AITerminalConfigurations" />
<seealso cref="P:NationalInstruments.DAQmx.PhysicalChannel.AOTerminalConfigurations" />
</member>
    <member name="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Pseudodifferential" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Pseudodifferential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pseudodifferential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Differential" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Nrse" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Nrse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Non-Referenced Single-Ended.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.Rse" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TerminalConfigurationTypes.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Physical channel does not support any terminal configuration types.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockTimingResponseMode" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SampleClockTimingResponseMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how the device responds to the sample clock and to triggers.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleClockTimingResponseMode.SingleCycle" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SingleCycle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device responds by the next sample clock edge.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleClockTimingResponseMode.Multicycle" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Multicycle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device acquires or generates samples on the next sample clock edge, but does not respond to certain triggers until a few sample clock edges later. Refer to device documentation for information about which triggers the multicycle response mode affects. This response mode allows higher data transfer rates at the cost of increased latency for responding to triggers.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.InputCalibrationSource" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="InputCalibrationSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the input source selection.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.InputCalibrationSource.Ground" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Ground" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Connect the channel to ground.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.InputCalibrationSource.CrossoverLoopback" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CrossoverLoopback" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Loopback the internal excitation voltage with 180 degree phase shift.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.InputCalibrationSource.Loopback" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Loopback" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Loopback the internal excitation voltage with 0 degree phase shift.

</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ShuntElementLocation" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ShuntElementLocation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies which resistor to use to calibrate the channel(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ShuntElementLocation.None" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No resistor.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ShuntElementLocation.R4" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="R4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Resistor 4.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ShuntElementLocation.R3" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="R3" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Resistor 3.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ShuntElementLocation.R2" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="R2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Resistor 2.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ShuntElementLocation.R1" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="R1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Resistor 1.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIDataFrequency" nitypekind="Struct" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIDataFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a counter input specified in terms of frequency and <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/DutyCycle.html');">duty cycle</see>.</summary>
<threadsafety safety="unsafe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.#ctor(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIDataFrequency" nihasget="0" nihasset="0" niparameters="frequency,dutyCycle" niparametertypes="System.Double,System.Double" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object with the specified frequency and <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/DutyCycle.html');">duty cycle</see>. </summary>
<param name="frequency">The frequency of the pulse.</param>
<param name="dutyCycle">The duty cycle of the pulse.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.op_Equality(NationalInstruments.DAQmx.CIDataFrequency,NationalInstruments.DAQmx.CIDataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Equality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataFrequency,NationalInstruments.DAQmx.CIDataFrequency" nireturnvaluetype="System.Boolean">
      <summary>
Returns <see langword="true" /> if two <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> objects are equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.op_Inequality(NationalInstruments.DAQmx.CIDataFrequency,NationalInstruments.DAQmx.CIDataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Inequality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataFrequency,NationalInstruments.DAQmx.CIDataFrequency" nireturnvaluetype="System.Boolean">
      <summary>
Returns <see langword="true" /> if two <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> objects are not equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are not equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.Equals(NationalInstruments.DAQmx.CIDataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c" niparametertypes="NationalInstruments.DAQmx.CIDataFrequency" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object.</summary>
<param name="c">A <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="c" /> has the same frequency and duty cycle as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.Equals(System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="obj" niparametertypes="System.Object" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified object.</summary>
<param name="obj">An object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="obj" /> is a <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object that has the same frequency and duty cycle as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.Equals(NationalInstruments.DAQmx.CIDataFrequency,NationalInstruments.DAQmx.CIDataFrequency)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataFrequency,NationalInstruments.DAQmx.CIDataFrequency" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if two specified instances of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> are equal.</summary>
<param name="c1">A <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object.</param>
<param name="c2">A <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object.</param>
<returns>
<see langword="true" /> if <paramref name="c1" /> and <paramref name="c2" /> are equal.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.GetHashCode" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetHashCode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Returns a hash code for the <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> object.</summary>
<returns>A 32-bit signed integer hash code.</returns>
<remarks>
Two <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> objects might have the same hash code even though they represent different values. 
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataFrequency.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="P:NationalInstruments.DAQmx.CIDataFrequency.Frequency" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Frequency" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Gets or sets the frequency of the pulse.</summary>
<value>The frequency of the pulse.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CIDataFrequency.DutyCycle" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DutyCycle" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Gets or sets the <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/DutyCycle.html');">duty cycle</see> of the pulse.</summary>
<value>The <see href="javascript:LaunchMergedHelp('daqhelp.chm','measfunds.chm::/DutyCycle.html');">duty cycle</see> of the pulse.</value>
</member>
    <member name="T:NationalInstruments.DAQmx.CIDataTicks" nitypekind="Struct" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIDataTicks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a counter input specified in terms of timebase ticks.</summary>
<threadsafety safety="unsafe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.#ctor(System.Int32,System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIDataTicks" nihasget="0" nihasset="0" niparameters="lowTicks,highTicks" niparametertypes="System.Int32,System.Int32" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object with the specified initial values.</summary>
<param name="lowTicks">The number of timebase ticks the pulse is low.</param>
<param name="highTicks">The number of timebase ticks the pulse is high.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.#ctor(System.UInt32,System.UInt32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIDataTicks" nihasget="0" nihasset="0" niparameters="lowTicks,highTicks" niparametertypes="System.UInt32,System.UInt32" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object with the specified unsigned initial values.</summary>
<param name="lowTicks">The number of timebase ticks the pulse is low.</param>
<param name="highTicks">The number of timebase ticks the pulse is high.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.op_Equality(NationalInstruments.DAQmx.CIDataTicks,NationalInstruments.DAQmx.CIDataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Equality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataTicks,NationalInstruments.DAQmx.CIDataTicks" nireturnvaluetype="System.Boolean">
      <summary>
Returns <see langword="true" /> if two <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> objects are equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.op_Inequality(NationalInstruments.DAQmx.CIDataTicks,NationalInstruments.DAQmx.CIDataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Inequality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataTicks,NationalInstruments.DAQmx.CIDataTicks" nireturnvaluetype="System.Boolean">
      <summary>
Returns <see langword="true" /> if two <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> objects are not equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are not equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.Equals(NationalInstruments.DAQmx.CIDataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c" niparametertypes="NationalInstruments.DAQmx.CIDataTicks" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object.</summary>
<param name="c">A <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="c" /> has the same low ticks and high ticks as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.Equals(System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="obj" niparametertypes="System.Object" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified object.</summary>
<param name="obj">An object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="obj" /> is a <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object that has the same low ticks and high ticks as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.Equals(NationalInstruments.DAQmx.CIDataTicks,NationalInstruments.DAQmx.CIDataTicks)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataTicks,NationalInstruments.DAQmx.CIDataTicks" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if two specified instances of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> are equal.</summary>
<param name="c1">A <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object.</param>
<param name="c2">A <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object.</param>
<returns>
<see langword="true" /> if <paramref name="c1" /> and <paramref name="c2" /> are equal.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTicks.GetHashCode" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetHashCode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Returns a hash code for the <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> object.</summary>
<returns>A 32-bit signed integer hash code.</returns>
<remarks>
Two <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> objects might have the same hash code even though they represent different values. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.CIDataTicks.LowTicksInt32" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LowTicksInt32" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets or sets the number of timebase ticks the pulse is low.</summary>
<value>The number of timebase ticks the pulse is low.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CIDataTicks.HighTicksInt32" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HighTicksInt32" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Gets or sets the number of timebase ticks the pulse is high.</summary>
<value>The number of timebase ticks the pulse is high.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CIDataTicks.LowTicksUInt32" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LowTicksUInt32" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32">
      <summary>Gets or sets the number of timebase ticks the pulse is low.</summary>
<value>The number of timebase ticks the pulse is low.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CIDataTicks.HighTicksUInt32" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HighTicksUInt32" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32">
      <summary>Gets or sets the number of timebase ticks the pulse is high.</summary>
<value>The number of timebase ticks the pulse is high.</value>
</member>
    <member name="T:NationalInstruments.DAQmx.CIDataTime" nitypekind="Struct" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIDataTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Encapsulates a counter input specified in terms of time.</summary>
<threadsafety safety="unsafe" />
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.#ctor(System.Double,System.Double)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CIDataTime" nihasget="0" nihasset="0" niparameters="lowTime,highTime" niparametertypes="System.Double,System.Double" nireturnvaluetype="">
      <summary>Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object with the specified time.</summary>
<param name="lowTime">The amount of time the pulse is low.</param>
<param name="highTime">The amount of time the pulse is high.</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.op_Equality(NationalInstruments.DAQmx.CIDataTime,NationalInstruments.DAQmx.CIDataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Equality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataTime,NationalInstruments.DAQmx.CIDataTime" nireturnvaluetype="System.Boolean">
      <summary>
Returns <see langword="true" /> if two <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> objects are equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.op_Inequality(NationalInstruments.DAQmx.CIDataTime,NationalInstruments.DAQmx.CIDataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="op_Inequality" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataTime,NationalInstruments.DAQmx.CIDataTime" nireturnvaluetype="System.Boolean">
      <summary>
Returns <see langword="true" /> if two <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> objects are not equal.
</summary>
<param name="c1">
A <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object.
</param>
<param name="c2">
A <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object.
</param>
<returns>
<see langword="true" /> if the values of <paramref name="c1" /> and <paramref name="c2" /> are not equal.
</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.Equals(NationalInstruments.DAQmx.CIDataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c" niparametertypes="NationalInstruments.DAQmx.CIDataTime" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object.</summary>
<param name="c">A <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="c" /> has the same low time and high time as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.Equals(System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="obj" niparametertypes="System.Object" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if this instance is equal to the specified object.</summary>
<param name="obj">An object to compare with this instance.</param>
<returns>
<see langword="true" /> if <paramref name="obj" /> is a <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object that has the same low time and high time as this instance.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.Equals(NationalInstruments.DAQmx.CIDataTime,NationalInstruments.DAQmx.CIDataTime)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Equals" nihasget="0" nihasset="0" niparameters="c1,c2" niparametertypes="NationalInstruments.DAQmx.CIDataTime,NationalInstruments.DAQmx.CIDataTime" nireturnvaluetype="System.Boolean">
      <summary>Returns a value indicating if two specified instances of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> are equal.</summary>
<param name="c1">A <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object.</param>
<param name="c2">A <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object.</param>
<returns>
<see langword="true" /> if <paramref name="c1" /> and <paramref name="c2" /> are equal.</returns>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.CIDataTime.GetHashCode" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetHashCode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Returns a hash code for the <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> object.</summary>
<returns>A 32-bit signed integer hash code.</returns>
<remarks>
Two <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> objects might have the same hash code even though they represent different values. 
</remarks>
</member>
    <member name="P:NationalInstruments.DAQmx.CIDataTime.LowTime" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="LowTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Gets or sets the amount of time the pulse is low.</summary>
<value>The amount of time the pulse is low.</value>
</member>
    <member name="P:NationalInstruments.DAQmx.CIDataTime.HighTime" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HighTime" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Gets or sets the amount of time the pulse is high.</summary>
<value>The amount of time the pulse is high.</value>
</member>
    <member name="T:NationalInstruments.DAQmx.ReallocationPolicy" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReallocationPolicy" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the behavior of a memory-optimized read method operation when the operation yields more samples than the current capacity of the buffer can allocate.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToGrow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The read operation can request more memory if the operation yields more samples than the capacity of the provided buffer.
You must use initialized data; otherwise, your application could throw a <see cref="T:NationalInstruments.DAQmx.DaqException" />.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DoNotReallocate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The read operation is limited to read up to the capacity of the provided buffer.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="DigitalPullUpPullDownResistorState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the pull up pull down level for each physical channel. 
</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState.PullDown" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PullDown" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pull down state for pull up pull down resistors.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalPullUpPullDownResistorState.PullUp" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pull up state for pull up pull down resistors.</summary>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
</member>
    <member name="T:NationalInstruments.DAQmx.EveryNSamplesReadEventHandler" nitypekind="Delegate" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesReadEventHandler" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the method that handles the <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesRead" /> event.</summary>
<param name="sender">
The <see cref="T:NationalInstruments.DAQmx.Task" /> that caused this event.
</param>
<param name="e">
An <see cref="T:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs" /> that contains the
event data.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.EveryNSamplesWrittenEventHandler" nitypekind="Delegate" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesWrittenEventHandler" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Represents the method that handles the <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesWritten" /> event.</summary>
<param name="sender">
The <see cref="T:NationalInstruments.DAQmx.Task" /> that caused this event.
</param>
<param name="e">
An <see cref="T:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs" /> that contains the
event data.
</param>
</member>
    <member name="T:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesReadEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides data for the <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesRead" /> event. 
</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesReadEventArgs" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.#ctor(System.Exception)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesReadEventArgs" nihasget="0" nihasset="0" niparameters="exception" niparametertypes="System.Exception" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs" /> class with the specified exception.
</summary>
<param name="exception">
An <see cref="T:System.Exception" /> that explains why the task stopped, or <see langword="null" /> if the task completed successfully.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.CheckForException" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CheckForException" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Throws the <see cref="T:System.Exception" /> that occurred, if any exists.</summary>
<remarks>If the task stops due to an error, the <see cref="P:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.Error" /> property returns an <see cref="T:System.Exception" /> that represents the particular error.  If the task did not stop due to an error, the method returns.  As an alternative to calling this method, you can check the <see cref="P:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.Error" /> property.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="P:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.Error" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Error" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Exception">
      <summary>Gets the <see cref="T:System.Exception" /> that occurred, if any.</summary>
<value>If the task stops due to an error, this property returns an <see cref="T:System.Exception" /> that represents the particular error.  If the task did not stop due to an error, this value is <see langword="null" />.</value>
<remarks>As an alternative to checking this property, you can call the <see cref="M:NationalInstruments.DAQmx.EveryNSamplesReadEventArgs.CheckForException" /> method.</remarks>
</member>
    <member name="T:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesWrittenEventArgs" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Provides data for the <see cref="E:NationalInstruments.DAQmx.Task.EveryNSamplesWritten" /> event. 
</summary>
<threadsafety safety="safe" />
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesWrittenEventArgs" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="">
      <exclude />
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.#ctor(System.Exception)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EveryNSamplesWrittenEventArgs" nihasget="0" nihasset="0" niparameters="exception" niparametertypes="System.Exception" nireturnvaluetype="">
      <summary>
Initializes a new instance of the <see cref="T:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs" /> class with the specified exception.
</summary>
<param name="exception">
An <see cref="T:System.Exception" /> that explains why the task stopped, or <see langword="null" /> if the task completed successfully.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.CheckForException" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CheckForException" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Void">
      <summary>Throws the <see cref="T:System.Exception" /> that occurred, if any exists.</summary>
<remarks>If the task stops due to an error, the <see cref="P:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.Error" /> property returns an <see cref="T:System.Exception" /> that represents the particular error.  If the task did not stop due to an error, the method returns.  As an alternative to calling this method, you can check the <see cref="P:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.Error" /> property.</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="1/21/2010 5:35:37 PM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="M:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="GetObjectData" nihasget="0" nihasset="0" niparameters="info,context" niparametertypes="System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext" nireturnvaluetype="System.Void">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with information about the exception.</summary>
<param name="info">
Object that holds the serialized object data.
</param>
<param name="context">
Contextual information about the source or destination.
</param>
</member>
    <member name="P:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.Error" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Error" nihasget="1" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Exception">
      <summary>Gets the <see cref="T:System.Exception" /> that occurred, if any.</summary>
<value>If the task stops due to an error, this property returns an <see cref="T:System.Exception" /> that represents the particular error.  If the task did not stop due to an error, this value is <see langword="null" />.</value>
<remarks>As an alternative to checking this property, you can call the <see cref="M:NationalInstruments.DAQmx.EveryNSamplesWrittenEventArgs.CheckForException" /> method.</remarks>
</member>
    <member name="T:NationalInstruments.DAQmx.AOPowerUpOutputBehavior" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="AOPowerUpOutputBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the analog output state of the physical channels for some devices when your computer is powered on or the device is reset in NI-DAQmx.</summary>
<remarks>
For all NI-DAQmx simulated devices, power-up states are not persisted. 

</remarks>
</member>
    <member name="F:NationalInstruments.DAQmx.AOPowerUpOutputBehavior.HighImpedance" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="HighImpedance" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High-impedance state.</summary>
<remarks>
You can set high-impedance   power-up states only for physical channels that support high-impedance output.
</remarks>
</member>
    <member name="F:NationalInstruments.DAQmx.AOPowerUpOutputBehavior.Current" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Current" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Current output. 
</summary>
<remarks>
You can set current  power-up states only for physical channels that support current  output.
</remarks>
</member>
    <member name="F:NationalInstruments.DAQmx.AOPowerUpOutputBehavior.Voltage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Voltage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Voltage output. 
</summary>
<remarks>
You can set voltage power-up states only for physical channels that support voltage output.
</remarks>
</member>
    <member name="T:NationalInstruments.DAQmx.SwitchScanBreakMode" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchScanBreakMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies the action to take between each entry in a scan list.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchScanBreakMode.BreakBeforeMake" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BreakBeforeMake" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
When advancing to the next entry in the scan list, disconnect all previous connections before making any new connections.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchScanBreakMode.NoAction" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="NoAction" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
When advancing to the next entry in the scan list, leave all previous connections intact.
</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SwitchScanRepeatMode" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchScanRepeatMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies if the task advances through the scan list multiple times.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchScanRepeatMode.Continuous" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Continuous" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The task returns to the beginning of the scan list when it reaches the end of the scan list.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchScanRepeatMode.Finite" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Finite" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
The task advances through the scan list one time only. NI-DAQmx ignores any Advance Triggers after completing the scan list.

</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SwitchChannelUsage" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SwitchChannelUsage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies how you can use the channel. Using this property acts as a safety mechanism to prevent you from connecting two source channels, for example.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchChannelUsage.ReservedForRouting" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReservedForRouting" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
You can use the channel only to complete routes within a switch.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchChannelUsage.Source" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Source" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
You can use the channel only as an input for a signal.

</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SwitchChannelUsage.Load" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Load" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
You can use the channel only as the output for a signal passing through the switch.

</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ProductCategory" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ProductCategory" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the product category of the device. This category corresponds to the category displayed in MAX when creating NI-DAQmx simulated devices.</summary>
<remarks>Indicates the product category of the device. This category corresponds to the category displayed in MAX when creating NI-DAQmx simulated devices.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Device.ProductCategory" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.MSeriesDaq" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="MSeriesDaq" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>M Series DAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.XSeriesDaq" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="XSeriesDaq" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>X Series DAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.ESeriesDaq" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ESeriesDaq" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>E Series DAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.SSeriesDaq" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SSeriesDaq" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>S Series DAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.BSeriesDaq" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="BSeriesDaq" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>B Series DAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.SCSeriesDaq" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SCSeriesDaq" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>SC Series DAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.UsbDaq" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="UsbDaq" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>USB DAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.AOSeries" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="AOSeries" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>AO Series.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.DigitalIO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DigitalIO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Digital I/O.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.TioSeries" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="TioSeries" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>TIO Series.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.DynamicSignalAcquisition" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DynamicSignalAcquisition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Dynamic Signal Acquisition.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.Switches" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Switches" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Switches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.CompactDaqChassis" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CompactDaqChassis" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>CompactDAQ chassis.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.CSeriesModule" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CSeriesModule" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>C Series I/O module.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.ScxiModule" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="ScxiModule" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>SCXI module.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.SccConnectorBlock" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SccConnectorBlock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>SCC Connector Block.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.SccModule" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SccModule" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>SCC Module.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.NIElvis" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="NIElvis" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>NI ELVIS.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.NetworkDAQ" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="NetworkDAQ" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Network DAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.SCExpress" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SCExpress" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>SC Express.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ProductCategory.Unknown" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Unknown" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Unknown category.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DeviceBusType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="DeviceBusType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the bus type of the device.</summary>
<remarks>Indicates the bus type of the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Device.BusType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Pci" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Pci" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>PCI.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Pcie" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Pcie" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>PCI Express.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Pxi" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Pxi" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>PXI.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Pxie" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Pxie" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>PXI Express.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Scxi" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Scxi" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>SCXI.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Scc" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Scc" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>SCC.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.PCCard" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="PCCard" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>PC Card/PCMCIA.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Usb" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Usb" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>USB.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.CompactDaq" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="CompactDaq" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>CompactDAQ.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Tcpip" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Tcpip" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>TCP/IP.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.Unknown" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="Unknown" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Unknown bus type.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DeviceBusType.SwitchBlock" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:01 PM" niupdatedby="GmfTool" nidisplayname="SwitchBlock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>SwitchBlock.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIMeasurementType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIMeasurementType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the measurement to take with the analog input channel and in some cases, such as for temperature measurements, the sensor to use.</summary>
<remarks>Indicates the measurement to take with the analog input channel and in some cases, such as for temperature measurements, the sensor to use.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.MeasurementType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Voltage" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Voltage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Voltage measurement.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.VoltageRms" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltageRms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Voltage RMS measurement.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Current" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Current" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Current measurement.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.CurrentRms" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CurrentRms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Current RMS measurement.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.VoltageCustomWithExcitation" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltageCustomWithExcitation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Voltage measurement with an excitation source. You can use this measurement type for custom sensors that require excitation, but you must use a custom scale to scale the measured voltage.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Bridge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Bridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measure <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScaling.html');">voltage ratios</see> from a Wheatstone bridge.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Frequency" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Frequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Frequency measurement using a frequency to voltage converter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Resistance" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Resistance" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Resistance measurement.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Thermocouple" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Thermocouple" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Temperature measurement using a thermocouple.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Thermistor" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Thermistor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Temperature measurement using a thermistor.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Rtd" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Rtd" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Temperature measurement using an RTD.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.BuiltInTemperatureSensor" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BuiltInTemperatureSensor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Temperature measurement using a built-in sensor on a terminal block or device. On SCXI modules, for example, this could be the CJC sensor.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.StrainGage" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="StrainGage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Strain measurement.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.RosetteStrainGage" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="RosetteStrainGage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Strain measurement using a rosette strain gage.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Lvdt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Lvdt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Position measurement using an LVDT.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Rvdt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Rvdt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Position measurement using an RVDT.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.EddyCurrentProximityProbe" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="EddyCurrentProximityProbe" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Position measurement using an eddy current proximity probe.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Accelerometer" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Accelerometer" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Acceleration measurement using an accelerometer.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.VelocityIepeSensor" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VelocityIepeSensor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Velocity measurement using an IEPE Sensor.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.ForceBridge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ForceBridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Force measurement using a bridge-based sensor.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.ForceIepeSensor" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ForceIepeSensor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Force measurement using an IEPE Sensor.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.PressureBridge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="PressureBridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pressure measurement using a bridge-based sensor.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.Microphone" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Microphone" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sound pressure measurement using a microphone.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.TorqueBridge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="TorqueBridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Torque measurement using a bridge-based sensor.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIMeasurementType.TedsSensor" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="TedsSensor" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measurement type defined by TEDS.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIVoltageUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIVoltageUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return voltage measurements from the channel.</summary>
<remarks>Specifies the units to use to return voltage measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.VoltageUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIVoltageUnits.Volts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Volts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIVoltageUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIVoltageUnits.FromTeds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units defined by TEDS information associated with the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIVoltageAcrmsUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIVoltageAcrmsUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return voltage RMS measurements from the channel.</summary>
<remarks>Specifies the units to use to return voltage RMS measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.VoltageAcrmsUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIVoltageAcrmsUnits.Volts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Volts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIVoltageAcrmsUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIVoltageAcrmsUnits.FromTeds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units defined by TEDS information associated with the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AITemperatureUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AITemperatureUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return temperature measurements from the channel.</summary>
<remarks>Specifies the units to use to return temperature measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.TemperatureUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AITemperatureUnits.DegreesC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DegreesC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees Celsius.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITemperatureUnits.DegreesF" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DegreesF" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees Fahrenheit.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITemperatureUnits.Kelvins" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Kelvins" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Kelvins.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITemperatureUnits.DegreesR" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DegreesR" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees Rankine.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITemperatureUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIThermocoupleType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIThermocoupleType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/thermocouples.html');">type</see> of thermocouple connected to the channel. Thermocouple types differ in composition and measurement range.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/thermocouples.html');">type</see> of thermocouple connected to the channel. Thermocouple types differ in composition and measurement range.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleType.J" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="J" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>J-type thermocouple.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleType.K" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="K" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>K-type thermocouple.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleType.N" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="N" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>N-type thermocouple.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleType.R" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="R" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>R-type thermocouple.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleType.S" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="S" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>S-type thermocouple.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleType.T" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="T" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>T-type thermocouple.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleType.B" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="B" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>B-type thermocouple.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleType.E" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="E" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>E-type thermocouple.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIThermocoupleScaleType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIThermocoupleScaleType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the method or equation form that the thermocouple scale uses.</summary>
<remarks>Specifies the method or equation form that the thermocouple scale uses.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleScaleType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleScaleType.Polynomial" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Polynomial" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Scale values by using an Nth order polynomial equation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleScaleType.Table" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Table" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Map an array of prescaled values to an array of corresponding scaled values, with all other values scaled proportionally.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIThermocoupleCjcSource" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIThermocoupleCjcSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the source of <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold-junction compensation</see>.</summary>
<remarks>Indicates the source of <see href="javascript:launchSharedHelp('measfunds.chm::/sigcontherm.html');">cold-junction compensation</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ThermocoupleCjcSource" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.BuiltIn" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BuiltIn" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use a cold-junction compensation channel built into the terminal block.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.ConstantValue" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ConstantValue" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>You must specify the cold-junction temperature.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIThermocoupleCjcSource.Channel" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Channel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use a channel for cold-junction compensation.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIRtdType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIRtdType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/rtd.html');">type</see> of RTD connected to the channel.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/rtd.html');">type</see> of RTD connected to the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.RtdType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIRtdType.Pt3750" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pt3750" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pt3750.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRtdType.Pt3851" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pt3851" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pt3851.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRtdType.Pt3911" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pt3911" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pt3911.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRtdType.Pt3916" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pt3916" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pt3916.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRtdType.Pt3920" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pt3920" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pt3920.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRtdType.Pt3928" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pt3928" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pt3928.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRtdType.Custom" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Custom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>You must use <see cref="P:NationalInstruments.DAQmx.AIChannel.RtdA" />, <see cref="P:NationalInstruments.DAQmx.AIChannel.RtdB" />, and <see cref="P:NationalInstruments.DAQmx.AIChannel.RtdC" /> to supply the coefficients for the <see href="javascript:launchSharedHelp('measfunds.chm::/CallendarVanDusen.html');">Callendar-Van Dusen equation</see>.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AICurrentUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AICurrentUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return current measurements from the channel.</summary>
<remarks>Specifies the units to use to return current measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.CurrentUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AICurrentUnits.Amps" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Amps" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Amperes.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AICurrentUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AICurrentUnits.FromTeds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units defined by TEDS information associated with the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AICurrentAcrmsUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AICurrentAcrmsUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return current RMS measurements from the channel.</summary>
<remarks>Specifies the units to use to return current RMS measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.CurrentAcrmsUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AICurrentAcrmsUnits.Amps" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Amps" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Amperes.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AICurrentAcrmsUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AICurrentAcrmsUnits.FromTeds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units defined by TEDS information associated with the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIStrainUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIStrainUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return strain measurements from the channel.</summary>
<remarks>Specifies the units to use to return strain measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.StrainUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIStrainUnits.Strain" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Strain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Strain.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIStrainUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIStrainGageConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIStrainGageConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeConfig.html');">bridge configuration</see> of the strain gages.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeConfig.html');">bridge configuration</see> of the strain gages.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.StrainGageConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIStrainGageConfiguration.FullBridgeI" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FullBridgeI" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Four active gages with two pairs subjected to equal and opposite strains.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIStrainGageConfiguration.FullBridgeII" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FullBridgeII" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Four active gages with two aligned with maximum principal strain and two Poisson gages in adjacent arms.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIStrainGageConfiguration.FullBridgeIII" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FullBridgeIII" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Four active gages with two aligned with maximum principal strain and two Poisson gages in opposite arms.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIStrainGageConfiguration.HalfBridgeI" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="HalfBridgeI" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Two active gages with one aligned with maximum principal strain and one Poisson gage.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIStrainGageConfiguration.HalfBridgeII" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="HalfBridgeII" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Two active gages with equal and opposite strains.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIStrainGageConfiguration.QuarterBridgeI" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="QuarterBridgeI" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Single active gage.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIStrainGageConfiguration.QuarterBridgeII" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="QuarterBridgeII" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Single active gage and one dummy gage.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIRosetteType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIRosetteType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the type of rosette gage.</summary>
<remarks>Indicates the type of rosette gage.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.RosetteType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteType.Rectangular" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Rectangular" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A rectangular rosette consists of three strain gages, each separated by a 45 degree angle.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteType.Delta" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Delta" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A delta rosette consists of three strain gages, each separated by a 60 degree angle.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteType.Tee" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Tee" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A tee rosette consists of two gages oriented at 90 degrees with respect to each other.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIRosetteMeasurementType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIRosetteMeasurementType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of rosette measurement.</summary>
<remarks>Specifies the type of rosette measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.RosetteMeasurementType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteMeasurementType.PrincipalStrain1" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="PrincipalStrain1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The maximum tensile strain coplanar to the surface of the material under stress.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteMeasurementType.PrincipalStrain2" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="PrincipalStrain2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The minimum tensile strain coplanar to the surface of the material under stress.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteMeasurementType.PrincipalStrainAngle" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="PrincipalStrainAngle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The angle at which the principal strains of the rosette occur.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteMeasurementType.CartesianStrainX" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CartesianStrainX" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The tensile strain coplanar to the surface of the material under stress in the X coordinate direction.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteMeasurementType.CartesianStrainY" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CartesianStrainY" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The tensile strain coplanar to the surface of the material under stress in the Y coordinate direction.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteMeasurementType.CartesianShearStrainXY" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="CartesianShearStrainXY" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The tensile strain coplanar to the surface of the material under stress in the XY coordinate direction.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteMeasurementType.MaximumShearStrain" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MaximumShearStrain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The maximum strain coplanar to the cross section of the material under stress.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRosetteMeasurementType.MaximumShearStrainAngle" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MaximumShearStrainAngle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The angle at which the maximum shear strain of the rosette occurs.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIResistanceUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIResistanceUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return resistance measurements.</summary>
<remarks>Specifies the units to use to return resistance measurements.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ResistanceUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIResistanceUnits.Ohms" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Ohms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ohms.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIResistanceUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIResistanceUnits.FromTeds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units defined by TEDS information associated with the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIFrequencyUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIFrequencyUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return frequency measurements from the channel.</summary>
<remarks>Specifies the units to use to return frequency measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.FrequencyUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIFrequencyUnits.Hertz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Hertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Hertz.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIFrequencyUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AILvdtUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AILvdtUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return linear position measurements from the channel.</summary>
<remarks>Specifies the units to use to return linear position measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.LvdtUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AILvdtUnits.Meters" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Meters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Meters.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AILvdtUnits.Inches" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Inches" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AILvdtUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AILvdtSensitivityUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AILvdtSensitivityUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivity" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivity" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.LvdtSensitivityUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AILvdtSensitivityUnits.MillivoltsPerVoltPerMillimeter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerVoltPerMillimeter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>mVolts/Volt/mMeter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AILvdtSensitivityUnits.MillivoltsPerVoltPerMilliinch" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerVoltPerMilliinch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>mVolts/Volt/0.001 Inch.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIRvdtUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIRvdtUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return angular position measurements from the channel.</summary>
<remarks>Specifies the units to use to return angular position measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.RvdtUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIRvdtUnits.Degrees" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Degrees" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRvdtUnits.Radians" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Radians" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Radians.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRvdtUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIRvdtSensitivityUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIRvdtSensitivityUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivity" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivity" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.RvdtSensitivityUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIRvdtSensitivityUnits.MillivoltsPerVoltPerDegree" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerVoltPerDegree" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>mVolts/Volt/Degree.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRvdtSensitivityUnits.MillivoltsPerVoltPerRadian" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerVoltPerRadian" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>mVolts/Volt/Radian.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIEddyCurrentProximityProbeUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return proximity measurements from the channel.</summary>
<remarks>Specifies the units to use to return proximity measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeUnits.Meters" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Meters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Meters.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeUnits.Inches" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Inches" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIEddyCurrentProximityProbeSensitivityUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivity" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivity" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.EddyCurrentProximityProbeSensitivityUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits.MillivoltsPerMil" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerMil" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>mVolts/mil.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits.VoltsPerMil" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltsPerMil" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts/mil.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits.MillivoltsPerMillimeter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerMillimeter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>mVolts/mMeter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits.VoltsPerMillimeter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltsPerMillimeter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts/mMeter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIEddyCurrentProximityProbeSensitivityUnits.MilliVoltsPerMicron" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MilliVoltsPerMicron" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>mVolts/micron.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AISoundPressureUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AISoundPressureUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return sound pressure measurements from the channel.</summary>
<remarks>Specifies the units to use to return sound pressure measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.SoundPressureUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AISoundPressureUnits.Pascals" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pascals" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pascals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AISoundPressureUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIAccelerationUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIAccelerationUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return acceleration measurements from the channel.</summary>
<remarks>Specifies the units to use to return acceleration measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.AccelerationUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIAccelerationUnits.G" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="G" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>1 g is approximately equal to 9.81 m/s/s.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAccelerationUnits.MetersPerSecondSquared" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MetersPerSecondSquared" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Meters per second per second.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAccelerationUnits.InchesPerSecondSquared" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InchesPerSecondSquared" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Inches per second per second.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAccelerationUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIAccelerometerSensitivityUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivity" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivity" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.AccelerometerSensitivityUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits.MillivoltsPerG" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerG" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>mVolts/g.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAccelerometerSensitivityUnits.VoltsPerG" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltsPerG" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts/g.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIVelocityUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIVelocityUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies in which unit to return velocity measurements from the channel.</summary>
<remarks>Specifies in which unit to return velocity measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.VelocityUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIVelocityUnits.MetersPerSecond" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MetersPerSecond" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Meters per second.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIVelocityUnits.InchesPerSecond" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InchesPerSecond" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Inches per second.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIVelocityUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIVelocityIepeSensorSensitivityUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIVelocityIepeSensorSensitivityUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units for <see cref="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivity" />.</summary>
<remarks>Specifies the units for <see cref="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivity" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.VelocityIepeSensorSensitivityUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIVelocityIepeSensorSensitivityUnits.MillivoltsPerMillimeterPerSecond" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerMillimeterPerSecond" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Millivolts per millimeter per second.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIVelocityIepeSensorSensitivityUnits.MillivoltsPerInchPerSecond" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerInchPerSecond" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Millivolts per inch per second.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIForceUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIForceUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies in which unit to return force or load measurements from the channel.</summary>
<remarks>Specifies in which unit to return force or load measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ForceUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIForceUnits.Newtons" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Newtons" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Newtons.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIForceUnits.Pounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pounds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIForceUnits.KilogramForce" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="KilogramForce" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Kilograms-force.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIForceUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIForceIepeSensorSensitivityUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIForceIepeSensorSensitivityUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units for <see cref="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivity" />.</summary>
<remarks>Specifies the units for <see cref="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivity" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ForceIepeSensorSensitivityUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIForceIepeSensorSensitivityUnits.MillivoltsPerNewton" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerNewton" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Millivolts per newton.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIForceIepeSensorSensitivityUnits.MillivoltsPerPound" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerPound" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Millivolts per pound.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIPressureUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIPressureUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies  in which unit to return pressure measurements from the channel.</summary>
<remarks>Specifies  in which unit to return pressure measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.PressureUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIPressureUnits.Pascals" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pascals" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pascals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIPressureUnits.PoundsPerSquareInch" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="PoundsPerSquareInch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pounds per square inch.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIPressureUnits.Bar" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Bar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Bar.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIPressureUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AITorqueUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AITorqueUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies in which unit to return torque measurements from the channel.</summary>
<remarks>Specifies in which unit to return torque measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.TorqueUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AITorqueUnits.NewtonMeters" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="NewtonMeters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Newton meters.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITorqueUnits.InchOunces" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InchOunces" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ounce-inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITorqueUnits.InchPounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InchPounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pound-inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITorqueUnits.FootPounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FootPounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pound-feet.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITorqueUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIBridgeUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIBridgeUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies in which unit to return <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScaling.html')">voltage ratios</see> from the channel.</summary>
<remarks>Specifies in which unit to return <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScaling.html')">voltage ratios</see> from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeUnits.VoltsPerVolt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltsPerVolt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts per volt.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeUnits.MillivoltsPerVolt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerVolt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Millivolts per volt.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeUnits.FromTeds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units defined by TEDS information associated with the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIBridgeElectricalUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIBridgeElectricalUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies from which electrical unit to scale data. Select  the same unit that the sensor data sheet or calibration certificate uses for electrical values.</summary>
<remarks>Specifies from which electrical unit to scale data. Select  the same unit that the sensor data sheet or calibration certificate uses for electrical values.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeElectricalUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeElectricalUnits.VoltsPerVolt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="VoltsPerVolt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts per volt.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeElectricalUnits.MillivoltsPerVolt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerVolt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Millivolts per volt.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIBridgePhysicalUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIBridgePhysicalUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies to which physical unit to scale electrical data. Select the same unit that the sensor data sheet or calibration certificate uses for physical values.</summary>
<remarks>Specifies to which physical unit to scale electrical data. Select the same unit that the sensor data sheet or calibration certificate uses for physical values.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgePhysicalUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.Newtons" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Newtons" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Newtons.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.Pounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pounds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.KilogramForce" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="KilogramForce" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>kilograms-force.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.Pascals" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pascals" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pascals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.PoundsPerSquareInch" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="PoundsPerSquareInch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pounds per square inch.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.Bar" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Bar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Bar.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.NewtonMeters" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="NewtonMeters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Newton metres.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.InchOunces" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InchOunces" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ounce-inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.InchPounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InchPounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pound-inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgePhysicalUnits.FootPounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FootPounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pound-feet.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIBridgeScaleType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIBridgeScaleType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScalingTypes.html')">scaling type</see> to use when scaling electrical values from the sensor to physical units.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('measfunds.chm::/bridgeScalingTypes.html')">scaling type</see> to use when scaling electrical values from the sensor to physical units.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeScaleType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeScaleType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not scale electrical values to physical units.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeScaleType.TwoPointLinear" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="TwoPointLinear" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>You provide two pairs of electrical values and their corresponding physical values. NI-DAQmx uses those values to calculate the slope and y-intercept of a linear equation and uses that equation to scale electrical values to physical values.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeScaleType.Table" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Table" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Map an array of electrical values to an array of corresponding physical values, with all other values scaled proportionally. If you specify this scaling type, <see cref="P:NationalInstruments.DAQmx.AIChannel.Maximum" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.Minimum" /> must be within the smallest and largest physical values. For any data outside those endpoints, NI-DAQmx coerces that data to the endpoints.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeScaleType.Polynomial" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Polynomial" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Scale values by using an Nth order polynomial equation.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AICoupling" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AICoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the coupling for the channel.</summary>
<remarks>Specifies the coupling for the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.Coupling" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AICoupling.AC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Remove the DC offset from the signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AICoupling.DC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Allow NI-DAQmx to measure all of the signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AICoupling.Ground" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Ground" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Remove the signal from the measurement and measure only ground.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AITerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AITerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the terminal configuration for the channel.</summary>
<remarks>Specifies the terminal configuration for the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.TerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AITerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITerminalConfiguration.Nrse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Nrse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Non-Referenced Single-Ended.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AITerminalConfiguration.Pseudodifferential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pseudodifferential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pseudodifferential.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIResistanceConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIResistanceConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the resistance configuration for the channel. NI-DAQmx uses this value for any resistance-based measurements, including temperature measurement using a thermistor or RTD.</summary>
<remarks>Specifies the resistance configuration for the channel. NI-DAQmx uses this value for any resistance-based measurements, including temperature measurement using a thermistor or RTD.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ResistanceConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIResistanceConfiguration.TwoWire" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="TwoWire" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>2-wire mode.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIResistanceConfiguration.ThreeWire" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ThreeWire" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>3-wire mode.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIResistanceConfiguration.FourWire" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FourWire" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>4-wire mode.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIBridgeConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIBridgeConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of Wheatstone bridge connected to the channel.</summary>
<remarks>Specifies the type of Wheatstone bridge connected to the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeConfiguration.FullBridge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FullBridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sensor is a full bridge. If you set <see cref="P:NationalInstruments.DAQmx.AIChannel.UseExcitationForScaling" /> to <see langword="true" />, NI-DAQmx divides the measurement by the excitation value. Many sensors scale data to native units using scaling of volts per excitation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeConfiguration.HalfBridge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="HalfBridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sensor is a half bridge. If you set <see cref="P:NationalInstruments.DAQmx.AIChannel.UseExcitationForScaling" /> to <see langword="true" />, NI-DAQmx divides the measurement by the excitation value. Many sensors scale data to native units using scaling of volts per excitation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeConfiguration.QuarterBridge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="QuarterBridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sensor is a quarter bridge. If you set <see cref="P:NationalInstruments.DAQmx.AIChannel.UseExcitationForScaling" /> to <see langword="true" />, NI-DAQmx divides the measurement by the excitation value. Many sensors scale data to native units using scaling of volts per excitation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeConfiguration.NoBridge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="NoBridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sensor is not a Wheatstone bridge.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIBridgeShuntCalibrationSelect" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIBridgeShuntCalibrationSelect" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies which shunt calibration switch(es) to enable.  Use <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationEnable" /> to enable the switch(es) you specify with this property.</summary>
<remarks>Specifies which shunt calibration switch(es) to enable.  Use <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationEnable" /> to enable the switch(es) you specify with this property.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationSelect" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeShuntCalibrationSelect.A" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="A" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Switch A.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeShuntCalibrationSelect.B" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="B" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Switch B.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIBridgeShuntCalibrationSelect.AAndB" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AAndB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Switches A and B.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.BridgeShuntCalibrationSource" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BridgeShuntCalibrationSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether to use internal or external shunt when Shunt Cal A is selected.</summary>
<remarks>Specifies whether to use internal or external shunt when Shunt Cal A is selected.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.BridgeShuntCalibrationASource" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.BridgeShuntCalibrationSource.BuiltIn" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="BuiltIn" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the internal shunt.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.BridgeShuntCalibrationSource.UserProvided" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UserProvided" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use an external shunt.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AICurrentShuntLocation" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AICurrentShuntLocation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the shunt resistor location for current measurements.</summary>
<remarks>Specifies the shunt resistor location for current measurements.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.CurrentShuntLocation" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AICurrentShuntLocation.Internal" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Internal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the built-in shunt resistor of the device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AICurrentShuntLocation.External" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="External" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use a shunt resistor external to the device. You must specify the value of the shunt resistor by using <see cref="P:NationalInstruments.DAQmx.AIChannel.CurrentShuntResistance" />.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIExcitationSource" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIExcitationSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the source of excitation.</summary>
<remarks>Specifies the source of excitation.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationSource" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIExcitationSource.Internal" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Internal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the built-in excitation source of the device. If you select this value, you must specify the amount of excitation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIExcitationSource.External" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="External" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use an excitation source other than the built-in excitation source of the device. If you select this value, you must specify the amount of excitation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIExcitationSource.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIExcitationDCOrAC" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIExcitationDCOrAC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies if the excitation supply is DC or AC.</summary>
<remarks>Specifies if the excitation supply is DC or AC.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationDCOrAC" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIExcitationDCOrAC.DC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>DC excitation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIExcitationDCOrAC.AC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>AC excitation.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIExcitationVoltageOrCurrent" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIExcitationVoltageOrCurrent" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies if the channel uses current or voltage excitation.</summary>
<remarks>Specifies if the channel uses current or voltage excitation.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationVoltageOrCurrent" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIExcitationVoltageOrCurrent.Voltage" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Voltage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Voltage excitation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIExcitationVoltageOrCurrent.Current" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Current" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Current excitation.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ExcitationIdleOutputBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ExcitationIdleOutputBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether this channel will disable excitation after the task is uncommitted. Setting this to tExcitationIdleOutputBehaviorZeroVoltsOrAmperes disables excitation after task uncommit. Setting this attribute to tExcitationIdleOutputBehaviorMaintainExistingValue leaves the excitation on after task uncommit.</summary>
<remarks>Specifies whether this channel will disable excitation after the task is uncommitted. Setting this to tExcitationIdleOutputBehaviorZeroVoltsOrAmperes disables excitation after task uncommit. Setting this attribute to tExcitationIdleOutputBehaviorMaintainExistingValue leaves the excitation on after task uncommit.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ExcitationIdleOutputBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ExcitationIdleOutputBehavior.ZeroVoltsOrAmps" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ZeroVoltsOrAmps" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Drive excitation output to zero.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ExcitationIdleOutputBehavior.MaintainExistingValue" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MaintainExistingValue" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Continue generating the current value.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIACExcitationWireMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIACExcitationWireMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the number of leads on the LVDT or RVDT. Some sensors require you to tie leads together to create a four- or five- wire sensor. Refer to the sensor documentation for more information.</summary>
<remarks>Specifies the number of leads on the LVDT or RVDT. Some sensors require you to tie leads together to create a four- or five- wire sensor. Refer to the sensor documentation for more information.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ACExcitationWireMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIACExcitationWireMode.FourWire" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FourWire" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>4-wire.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIACExcitationWireMode.FiveWire" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FiveWire" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>5-wire.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AILowpassSwitchedCapacitorClockSource" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AILowpassSwitchedCapacitorClockSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the source of the filter clock. If you need a higher resolution for the filter, you can supply an external clock to increase the resolution. Refer to the SCXI-1141/1142/1143 User Manual for more information.</summary>
<remarks>Specifies the source of the filter clock. If you need a higher resolution for the filter, you can supply an external clock to increase the resolution. Refer to the SCXI-1141/1142/1143 User Manual for more information.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.LowpassSwitchedCapacitorClockSource" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AILowpassSwitchedCapacitorClockSource.Internal" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Internal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Internal to the device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AILowpassSwitchedCapacitorClockSource.External" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="External" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>External to the device.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.FilterType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FilterType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the digital filter type.</summary>
<remarks>Specifies the digital filter type.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.FilterType.Lowpass" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Lowpass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Lowpass filter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.FilterType.Highpass" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Highpass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Highpass filter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.FilterType.Bandpass" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Bandpass" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Bandpass filter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.FilterType.Notch" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Notch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Notch filter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.FilterType.Custom" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Custom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Custom filter.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.FilterResponse" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FilterResponse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the digital filter response.</summary>
<remarks>Specifies the digital filter response.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.DigitalFilterResponse" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.FilterResponse.ConstantGroupDelay" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ConstantGroupDelay" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Constant group delay filter response.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.FilterResponse.Butterworth" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Butterworth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Butterworth filter response.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.FilterResponse.Elliptical" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Elliptical" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Elliptical filter response.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.FilterResponse.HardwareDefined" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="HardwareDefined" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the hardware-defined filter response.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIFilterDelayUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIFilterDelayUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelay" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayAdjustment" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelay" /> and <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayAdjustment" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.FilterDelayUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIFilterDelayUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIFilterDelayUnits.SampleClockPeriods" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="SampleClockPeriods" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sample Clock Periods.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIResolutionUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIResolutionUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.Resolution" />.</summary>
<remarks>Indicates the units of <see cref="P:NationalInstruments.DAQmx.AIChannel.Resolution" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.ResolutionUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIResolutionUnits.Bits" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Bits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Bits.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIRawSampleJustification" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIRawSampleJustification" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the justification of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw sample</see> from the device.</summary>
<remarks>Indicates the justification of a <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw sample</see> from the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.RawSampleJustification" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIRawSampleJustification.RightJustified" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="RightJustified" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Samples occupy the lower bits of the integer.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRawSampleJustification.LeftJustified" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LeftJustified" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Samples occupy the higher bits of the integer.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIAdcTimingMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIAdcTimingMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/configmeastime.html');">ADC timing mode</see>, controlling the tradeoff between speed and effective resolution. Some ADC timing modes provide increased powerline noise rejection. On devices that have an AI Convert clock, this setting affects both the maximum and default values for <see cref="P:NationalInstruments.DAQmx.Timing.AIConvertRate" />. You must use the same ADC timing mode for all channels on a device, but you can use different ADC timing modes for different devices in the same task.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('mxdevconsid.chm::/configmeastime.html');">ADC timing mode</see>, controlling the tradeoff between speed and effective resolution. Some ADC timing modes provide increased powerline noise rejection. On devices that have an AI Convert clock, this setting affects both the maximum and default values for <see cref="P:NationalInstruments.DAQmx.Timing.AIConvertRate" />. You must use the same ADC timing mode for all channels on a device, but you can use different ADC timing modes for different devices in the same task.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.AdcTimingMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIAdcTimingMode.HighResolution" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="HighResolution" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Increases resolution and noise rejection while decreasing conversion rate.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAdcTimingMode.HighSpeed" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="HighSpeed" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Increases conversion rate while decreasing resolution.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAdcTimingMode.Best50HzRejection" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Best50HzRejection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Improves 50 Hz noise rejection while decreasing noise rejection at other frequencies.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAdcTimingMode.Best60HzRejection" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Best60HzRejection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Improves 60 Hz noise rejection while decreasing noise rejection at other frequencies.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAdcTimingMode.Custom" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Custom" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use <see cref="P:NationalInstruments.DAQmx.AIChannel.AdcCustomTimingMode" /> to specify a custom value controlling the tradeoff between speed and resolution.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIChannelCalibrationScaleType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIChannelCalibrationScaleType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the method or equation form that the calibration scale uses.</summary>
<remarks>Specifies the method or equation form that the calibration scale uses.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.CalibrationScaleType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIChannelCalibrationScaleType.Polynomial" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Polynomial" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Scale values by using an Nth order polynomial equation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIChannelCalibrationScaleType.Table" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Table" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Map an array of prescaled values to an array of corresponding scaled values, with all other values scaled proportionally.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIChannelCalibrationScaleType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIAutoZeroMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIAutoZeroMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how often to measure ground. NI-DAQmx subtracts the measured ground voltage from every sample.</summary>
<remarks>Specifies how often to measure ground. NI-DAQmx subtracts the measured ground voltage from every sample.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.AutoZeroMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIAutoZeroMode.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not perform an autozero.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAutoZeroMode.Once" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Once" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Perform an auto zero at the beginning of the acquisition. This auto zero task might not run if you have used <see cref="M:NationalInstruments.DAQmx.Task.Control(NationalInstruments.DAQmx.TaskAction)" /> previously in your task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIAutoZeroMode.EverySample" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="EverySample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Perform an auto zero at every sample of the acquisition.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIDataTransferMechanism" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIDataTransferMechanism" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the data transfer mode for the device.</summary>
<remarks>Specifies the data transfer mode for the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.DataTransferMechanism" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIDataTransferMechanism.Dma" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Dma" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Memory Access. Data transfers take place independently from the application.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIDataTransferMechanism.Interrupts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Interrupts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application. Using interrupts increases CPU usage because the CPU must service interrupt requests. Typically, you should use interrupts if the device is out of DMA channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIDataTransferMechanism.ProgrammedIO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ProgrammedIO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place when you call reading from the task or writing to the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIDataTransferMechanism.UsbBulk" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbBulk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application using a USB bulk pipe.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIDataTransferRequestCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIDataTransferRequestCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</summary>
<remarks>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.DataTransferRequestCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIDataTransferRequestCondition.OnBoardMemoryMoreThanHalfFull" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryMoreThanHalfFull" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when more than half of the onboard memory of the device fills.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIDataTransferRequestCondition.OnBoardMemoryNotEmpty" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryNotEmpty" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when there is data in the onboard memory.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIDataTransferRequestCondition.OnBoardMemoryCustomThreshold" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryCustomThreshold" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when the number of samples specified with <see cref="P:NationalInstruments.DAQmx.AIChannel.DataTransferCustomThreshold" /> are in the device FIFO.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIDataTransferRequestCondition.WhenAcquisitionComplete" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="WhenAcquisitionComplete" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data when the acquisition is complete.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIRawDataCompressionType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AIRawDataCompressionType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of compression to apply to <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw samples</see> returned from the device.</summary>
<remarks>Specifies the type of compression to apply to <see href="javascript:launchSharedHelp('mxcncpts.chm::/rawdata.html');">raw samples</see> returned from the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AIChannel.RawDataCompressionType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIRawDataCompressionType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not compress samples.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRawDataCompressionType.LosslessPacking" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LosslessPacking" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Remove unused bits from samples. No resolution is lost.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIRawDataCompressionType.LossyLsbRemoval" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="LossyLsbRemoval" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Remove unused bits from samples. Then, if necessary, remove bits from samples until the samples are the size specified with <see cref="P:NationalInstruments.DAQmx.AIChannel.LossyLsbRemovalCompressedSampleSize" />. This compression type limits resolution to the specified sample size.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOOutputType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOOutputType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates whether the channel generates voltage,  current, or a waveform.</summary>
<remarks>Indicates whether the channel generates voltage,  current, or a waveform.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.OutputType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOOutputType.Voltage" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Voltage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Voltage generation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOOutputType.Current" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Current" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Current generation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOOutputType.FunctionGeneration" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FunctionGeneration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Function generation.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOVoltageUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOVoltageUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies in what units to generate voltage on the channel. Write data to the channel in the units you select.</summary>
<remarks>Specifies in what units to generate voltage on the channel. Write data to the channel in the units you select.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.VoltageUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOVoltageUnits.Volts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Volts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOVoltageUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOCurrentUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOCurrentUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies in what units to generate current on the channel. Write data to the channel in the units you select.</summary>
<remarks>Specifies in what units to generate current on the channel. Write data to the channel in the units you select.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.CurrentUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOCurrentUnits.Amps" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Amps" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Amperes.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOCurrentUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOCurrentUnits.FromTeds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FromTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units defined by TEDS information associated with the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOFunctionGenerationType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOFunctionGenerationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the kind of the waveform to generate.</summary>
<remarks>Specifies the kind of the waveform to generate.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOFunctionGenerationType.Sine" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Sine" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sine wave.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOFunctionGenerationType.Triangle" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Triangle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Triangle wave.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOFunctionGenerationType.Square" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Square" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Square wave.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOFunctionGenerationType.Sawtooth" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Sawtooth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sawtooth wave.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOFunctionGenerationModulationType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOFunctionGenerationModulationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies if the device generates a modulated version of the waveform using the original waveform as a carrier and input from an external terminal as the signal.</summary>
<remarks>Specifies if the device generates a modulated version of the waveform using the original waveform as a carrier and input from an external terminal as the signal.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.FunctionGenerationModulationType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOFunctionGenerationModulationType.AM" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AM" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Amplitude modulation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOFunctionGenerationModulationType.FM" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FM" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Frequency modulation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOFunctionGenerationModulationType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>No modulation.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOIdleOutputBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOIdleOutputBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the state of the channel when no generation is in progress.</summary>
<remarks>Specifies the state of the channel when no generation is in progress.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.IdleOutputBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOIdleOutputBehavior.ZeroVolts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ZeroVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Generate 0 V.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOIdleOutputBehavior.HighImpedance" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="HighImpedance" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Set the channel to high-impedance, effectively disconnecting the analog output circuitry from the I/O connector.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOIdleOutputBehavior.MaintainExistingValue" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="MaintainExistingValue" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Continue generating the current value.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the terminal configuration of the channel.</summary>
<remarks>Specifies the terminal configuration of the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.TerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOTerminalConfiguration.Pseudodifferential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Pseudodifferential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pseudodifferential.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOResolutionUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOResolutionUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AOChannel.Resolution" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AOChannel.Resolution" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.ResolutionUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOResolutionUnits.Bits" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Bits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Bits.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AODacReferenceSource" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AODacReferenceSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the source of the DAC reference voltage. The value of this voltage source determines the full-scale value of the DAC.</summary>
<remarks>Specifies the source of the DAC reference voltage. The value of this voltage source determines the full-scale value of the DAC.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.DacReferenceSource" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AODacReferenceSource.Internal" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Internal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Internal to the device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AODacReferenceSource.External" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="External" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>External to the device.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AODacOffsetSource" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AODacOffsetSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the source of the DAC offset voltage. The value of this voltage source determines the full-scale value of the DAC.</summary>
<remarks>Specifies the source of the DAC offset voltage. The value of this voltage source determines the full-scale value of the DAC.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.DacOffsetSource" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AODacOffsetSource.Internal" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Internal" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Internal to the device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AODacOffsetSource.External" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="External" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>External to the device.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AOFilterDelayUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AOFilterDelayUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelay" /> and <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayAdjustment" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelay" /> and <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayAdjustment" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.FilterDelayUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AOFilterDelayUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AOFilterDelayUnits.SampleClockPeriods" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="SampleClockPeriods" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Sample Clock Periods.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AODataTransferMechanism" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AODataTransferMechanism" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the data transfer mode for the device.</summary>
<remarks>Specifies the data transfer mode for the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.DataTransferMechanism" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AODataTransferMechanism.Dma" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Dma" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Memory Access. Data transfers take place independently from the application.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AODataTransferMechanism.Interrupts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Interrupts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application. Using interrupts increases CPU usage because the CPU must service interrupt requests. Typically, you should use interrupts if the device is out of DMA channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AODataTransferMechanism.ProgrammedIO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ProgrammedIO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place when you call reading from the task or writing to the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AODataTransferMechanism.UsbBulk" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbBulk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application using a USB bulk pipe.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AODataTransferRequestCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="AODataTransferRequestCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</summary>
<remarks>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AOChannel.DataTransferRequestCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AODataTransferRequestCondition.OnBoardMemoryEmpty" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryEmpty" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device only when there is no data in the onboard memory of the device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AODataTransferRequestCondition.OnBoardMemoryHalfFullOrLess" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryHalfFullOrLess" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device any time the onboard memory is less than half full.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AODataTransferRequestCondition.OnBoardMemoryNotFull" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryNotFull" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device any time the onboard memory of the device is not full.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DILogicFamily" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DILogicFamily" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic family to use for acquisition. A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to the device documentation for information on the logic high and logic low voltages for these logic families.</summary>
<remarks>Specifies the logic family to use for acquisition. A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to the device documentation for information on the logic high and logic low voltages for these logic families.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DIChannel.LogicFamily" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DILogicFamily.TwoPointFiveVolts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="TwoPointFiveVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with 2.5 V CMOS signals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DILogicFamily.ThreePointThreeVolts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ThreePointThreeVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with LVTTL signals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DILogicFamily.FiveVolts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="FiveVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with TTL and 5 V CMOS signals.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DIDataTransferMechanism" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DIDataTransferMechanism" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the data transfer mode for the device.</summary>
<remarks>Specifies the data transfer mode for the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DIChannel.DataTransferMechanism" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DIDataTransferMechanism.Dma" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Dma" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Memory Access. Data transfers take place independently from the application.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DIDataTransferMechanism.Interrupts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="Interrupts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application. Using interrupts increases CPU usage because the CPU must service interrupt requests. Typically, you should use interrupts if the device is out of DMA channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DIDataTransferMechanism.ProgrammedIO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ProgrammedIO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place when you call reading from the task or writing to the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DIDataTransferMechanism.UsbBulk" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="UsbBulk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application using a USB bulk pipe.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DIDataTransferRequestCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DIDataTransferRequestCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</summary>
<remarks>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DIChannel.DataTransferRequestCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DIDataTransferRequestCondition.OnBoardMemoryMoreThanHalfFull" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryMoreThanHalfFull" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when more than half of the onboard memory of the device fills.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DIDataTransferRequestCondition.OnBoardMemoryNotEmpty" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryNotEmpty" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when there is data in the onboard memory.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DIDataTransferRequestCondition.OnBoardMemoryCustomThreshold" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryCustomThreshold" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when the number of samples specified with <see cref="P:NationalInstruments.DAQmx.AIChannel.DataTransferCustomThreshold" /> are in the device FIFO.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DIDataTransferRequestCondition.WhenAcquisitionComplete" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="WhenAcquisitionComplete" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data when the acquisition is complete.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DIAcquireOn" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="DIAcquireOn" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the sample clock to acquire samples.</summary>
<remarks>Specifies on which edge of the sample clock to acquire samples.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DIChannel.AcquireOn" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DIAcquireOn.ActiveEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="ActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Active edges.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DIAcquireOn.InactiveEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:02 PM" niupdatedby="GmfTool" nidisplayname="InactiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Inactive edges.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DOOutputDriveType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DOOutputDriveType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the drive type for digital output channels.</summary>
<remarks>Specifies the drive type for digital output channels.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DOChannel.OutputDriveType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DOOutputDriveType.ActiveDrive" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="ActiveDrive" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Drive the output pin to approximately 0 V for logic low and +3.3 V or +5 V, depending on the device, for logic high.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOOutputDriveType.OpenCollector" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OpenCollector" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Drive the output pin to 0 V for logic low. For logic high, the output driver assumes a high-impedance state and does not drive a voltage.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DOLineStatesStartState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DOLineStatesStartState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the state of the lines in a digital output task when the task starts.</summary>
<remarks>Specifies the state of the lines in a digital output task when the task starts.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DOChannel.LineStatesStartState" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesStartState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Logic high.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesStartState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Logic low.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesStartState.Tristate" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Tristate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High-impedance state. You can select this state only on devices with bidirectional lines.  You cannot select this state for dedicated digital output lines. On some devices, you can select this value only for entire ports.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesStartState.NoChange" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="NoChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not change the state of the lines. On some devices, you can select this value only for entire ports.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DOLineStatesPausedState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DOLineStatesPausedState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the state of the lines in a digital output task when the task pauses.</summary>
<remarks>Specifies the state of the lines in a digital output task when the task pauses.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DOChannel.LineStatesPausedState" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesPausedState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Logic high.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesPausedState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Logic low.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesPausedState.Tristate" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Tristate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High-impedance state. You can select this state only on devices with bidirectional lines.  You cannot select this state for dedicated digital output lines. On some devices, you can select this value only for entire ports.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesPausedState.NoChange" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="NoChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not change the state of the lines. On some devices, you can select this value only for entire ports.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DOLineStatesDoneState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DOLineStatesDoneState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the state of the lines in a digital output task when the task <see href="javascript:launchSharedHelp('mxcncpts.chm::/whenTaskDone.html');">completes execution</see>.</summary>
<remarks>Specifies the state of the lines in a digital output task when the task <see href="javascript:launchSharedHelp('mxcncpts.chm::/whenTaskDone.html');">completes execution</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DOChannel.LineStatesDoneState" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesDoneState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Logic high.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesDoneState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Logic low.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesDoneState.Tristate" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Tristate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High-impedance state. You can select this state only on devices with bidirectional lines.  You cannot select this state for dedicated digital output lines. On some devices, you can select this value only for entire ports.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLineStatesDoneState.NoChange" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="NoChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not change the state of the lines. On some devices, you can select this value only for entire ports.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DOLogicFamily" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DOLogicFamily" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic family to use for generation. A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to the device documentation for information on the logic high and logic low voltages for these logic families.</summary>
<remarks>Specifies the logic family to use for generation. A logic family corresponds to voltage thresholds that are compatible with a group of voltage standards. Refer to the device documentation for information on the logic high and logic low voltages for these logic families.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DOChannel.LogicFamily" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DOLogicFamily.TwoPointFiveVolts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoPointFiveVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with 2.5 V CMOS signals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLogicFamily.ThreePointThreeVolts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="ThreePointThreeVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with LVTTL signals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOLogicFamily.FiveVolts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FiveVolts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Compatible with TTL and 5 V CMOS signals.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DODataTransferMechanism" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DODataTransferMechanism" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the data transfer mode for the device.</summary>
<remarks>Specifies the data transfer mode for the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DOChannel.DataTransferMechanism" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DODataTransferMechanism.Dma" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Dma" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Memory Access. Data transfers take place independently from the application.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DODataTransferMechanism.Interrupts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Interrupts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application. Using interrupts increases CPU usage because the CPU must service interrupt requests. Typically, you should use interrupts if the device is out of DMA channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DODataTransferMechanism.ProgrammedIO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="ProgrammedIO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place when you call reading from the task or writing to the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DODataTransferMechanism.UsbBulk" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="UsbBulk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application using a USB bulk pipe.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DODataTransferRequestCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DODataTransferRequestCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</summary>
<remarks>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DOChannel.DataTransferRequestCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DODataTransferRequestCondition.OnBoardMemoryEmpty" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryEmpty" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device only when there is no data in the onboard memory of the device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DODataTransferRequestCondition.OnBoardMemoryHalfFullOrLess" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryHalfFullOrLess" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device any time the onboard memory is less than half full.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DODataTransferRequestCondition.OnBoardMemoryNotFull" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryNotFull" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device any time the onboard memory of the device is not full.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DOGenerateOn" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DOGenerateOn" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the sample clock to generate samples.</summary>
<remarks>Specifies on which edge of the sample clock to generate samples.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DOChannel.GenerateOn" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DOGenerateOn.ActiveEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="ActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Active edges.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DOGenerateOn.InactiveEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="InactiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Inactive edges.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIMeasurementType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIMeasurementType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the measurement to take with the channel.</summary>
<remarks>Indicates the measurement to take with the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.MeasurementType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.CountEdges" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CountEdges" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Count edges of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.Frequency" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Frequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measure the frequency of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.Period" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Period" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measure the period of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.PulseWidth" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseWidth" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measure the width of a pulse of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.SemiPeriod" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="SemiPeriod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measure the time between state transitions of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.PulseFrequency" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pulse measurement, returning the result as frequency and duty cycle.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.PulseTime" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pulse measurement, returning the result as high time and low time.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.PulseTicks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="PulseTicks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pulse measurement, returning the result as high ticks and low ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.DutyCycle" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DutyCycle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measure the duty cycle of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.AngularEncoder" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="AngularEncoder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Angular position measurement using an angular encoder.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.LinearEncoder" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LinearEncoder" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Linear position measurement using a linear encoder.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.TwoEdgeSeparation" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoEdgeSeparation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Measure time between edges of two digital signals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIMeasurementType.GpsTimestamp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="GpsTimestamp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Timestamp measurement, synchronizing the counter to a GPS receiver.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIFrequencyUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIFrequencyUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return frequency measurements.</summary>
<remarks>Specifies the units to use to return frequency measurements.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyUnits.Hertz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Hertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Hertz.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Timebase ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIFrequencyTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIFrequencyTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIFrequencyLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIFrequencyLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyLogicalLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIFrequencyStartingEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIFrequencyStartingEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies between which edges to measure the frequency of the signal.</summary>
<remarks>Specifies between which edges to measure the frequency of the signal.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyStartingEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyStartingEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyStartingEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIFrequencyMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the method to use to measure the frequency of the signal.</summary>
<remarks>Specifies the method to use to measure the frequency of the signal.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.FrequencyMeasurementMethod" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.LowFrequencyOneCounter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LowFrequencyOneCounter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use one counter that uses a constant timebase to measure the input signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.HighFrequencyTwoCounter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="HighFrequencyTwoCounter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use two counters, one of which counts pulses of the signal to measure during the specified measurement time.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.LargeRangeTwoCounter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LargeRangeTwoCounter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use one counter to divide the frequency of the input signal to create a lower-frequency signal that the second counter can more easily measure.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIFrequencyMeasurementMethod.DynamicAveraging" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DynamicAveraging" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Uses one counter and automatically configures the counter settings based on the range of frequencies to be measured. During the acquisition, the counter dynamically adjusts the number of periods that are averaged to balance measurement accuracy and latency.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPeriodUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPeriodUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the unit to use to return period measurements.</summary>
<remarks>Specifies the unit to use to return period measurements.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Timebase ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPeriodTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPeriodTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPeriodLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPeriodLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPeriodStartingEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPeriodStartingEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies between which edges to measure the period of the signal.</summary>
<remarks>Specifies between which edges to measure the period of the signal.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodStartingEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodStartingEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodStartingEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPeriodMeasurementMethod" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPeriodMeasurementMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the method to use to measure the period of the signal.</summary>
<remarks>Specifies the method to use to measure the period of the signal.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PeriodMeasurementMethod" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodMeasurementMethod.LowFrequencyOneCounter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LowFrequencyOneCounter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use one counter that uses a constant timebase to measure the input signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodMeasurementMethod.HighFrequencyTwoCounter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="HighFrequencyTwoCounter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use two counters, one of which counts pulses of the signal to measure during the specified measurement time.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodMeasurementMethod.LargeRangeTwoCounter" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LargeRangeTwoCounter" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use one counter to divide the frequency of the input signal to create a lower-frequency signal that the second counter can more easily measure.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPeriodMeasurementMethod.DynamicAveraging" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="DynamicAveraging" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Uses one counter and automatically configures the counter settings based on the range of frequencies to be measured. During the acquisition, the counter dynamically adjusts the number of periods that are averaged to balance measurement accuracy and latency.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesCountDirection" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesCountDirection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether to increment or decrement the counter on each edge.</summary>
<remarks>Specifies whether to increment or decrement the counter on each edge.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirection" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountDirection.Up" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Up" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Increment counter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountDirection.Down" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Down" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Decrement counter.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountDirection.ExternallyControlled" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="ExternallyControlled" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The state of a digital line controls the count direction. Each counter has a <see href="javascript:launchSharedHelp('mxdevconsid.chm::/counters.html');">default count direction terminal</see>.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesCountDirectionTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesCountDirectionTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountDirectionTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountDirectionTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesCountDirectionLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesCountDirectionLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<remarks>Specifies the logic level behavior on the count reset line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountDirectionLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountDirectionLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountDirectionLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesActiveEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edges to increment or decrement the counter.</summary>
<remarks>Specifies on which edges to increment or decrement the counter.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesActiveEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesActiveEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesActiveEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesCountResetTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesCountResetTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountResetTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountResetTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesCountResetLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesCountResetLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<remarks>Specifies the logic level behavior on the count reset line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountResetLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountResetLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICountEdgesCountResetActiveEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CICountEdgesCountResetActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the signal to reset the count.</summary>
<remarks>Specifies on which edge of the signal to reset the count.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CountEdgesCountResetActiveEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountResetActiveEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICountEdgesCountResetActiveEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIDutyCycleTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIDutyCycleTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.DutyCycleTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIDutyCycleTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDutyCycleTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIDutyCycleLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIDutyCycleLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.DutyCycleLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIDutyCycleLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDutyCycleLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIDutyCycleStartingEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIDutyCycleStartingEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies which edge of the input signal to begin the duty cycle measurement.</summary>
<remarks>Specifies which edge of the input signal to begin the duty cycle measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.DutyCycleStartingEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIDutyCycleStartingEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDutyCycleStartingEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIAngularEncoderUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIAngularEncoderUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return angular position measurements from the channel.</summary>
<remarks>Specifies the units to use to return angular position measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.AngularEncoderUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIAngularEncoderUnits.Degrees" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Degrees" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIAngularEncoderUnits.Radians" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Radians" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Radians.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIAngularEncoderUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIAngularEncoderUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CILinearEncoderUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CILinearEncoderUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return linear encoder measurements from the channel.</summary>
<remarks>Specifies the units to use to return linear encoder measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.LinearEncoderUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CILinearEncoderUnits.Meters" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Meters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Meters.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CILinearEncoderUnits.Inches" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Inches" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CILinearEncoderUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CILinearEncoderUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIEncoderDecodingType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIEncoderDecodingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how to count and interpret the pulses the encoder generates on signal A and signal B. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" />, <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" />, and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> are valid for <see href="javascript:launchSharedHelp('measfunds.chm::/quadEncoders.html');">quadrature encoders</see> only. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.TwoPulseCounting" /> is valid for <see href="javascript:launchSharedHelp('measfunds.chm::/twoPulse.html');">two-pulse encoders</see> only.</summary>
<remarks>Specifies how to count and interpret the pulses the encoder generates on signal A and signal B. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" />, <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" />, and <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" /> are valid for <see href="javascript:launchSharedHelp('measfunds.chm::/quadEncoders.html');">quadrature encoders</see> only. <see cref="F:NationalInstruments.DAQmx.CIEncoderDecodingType.TwoPulseCounting" /> is valid for <see href="javascript:launchSharedHelp('measfunds.chm::/twoPulse.html');">two-pulse encoders</see> only.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderDecodingType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X1" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="X1" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>If signal A leads signal B, count the rising edges of signal A. If signal B leads signal A, count the falling edges of signal A.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X2" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="X2" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Count the rising and falling edges of signal A.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderDecodingType.X4" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="X4" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Count the rising and falling edges of signal A and signal B.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderDecodingType.TwoPulseCounting" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="TwoPulseCounting" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Increment the count on rising edges of signal A. Decrement the count on rising edges of signal B.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIEncoderAInputTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIEncoderAInputTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderAInputTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderAInputTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIEncoderAInputLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIEncoderAInputLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderAInputLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderAInputLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderAInputLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIEncoderBInputTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIEncoderBInputTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderBInputTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderBInputTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIEncoderBInputLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIEncoderBInputLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderBInputLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderBInputLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderBInputLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIEncoderZInputTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIEncoderZInputTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderZInputTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderZInputTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIEncoderZInputLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIEncoderZInputLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderZInputLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderZInputLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderZInputLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIEncoderZIndexPhase" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIEncoderZIndexPhase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the states at which signal A and signal B must be while signal Z is high for NI-DAQmx to reset the measurement. If signal Z is never high while signal A and signal B are high, for example, you must choose a phase other than <see cref="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" />.</summary>
<remarks>Specifies the states at which signal A and signal B must be while signal Z is high for NI-DAQmx to reset the measurement. If signal Z is never high while signal A and signal B are high, for example, you must choose a phase other than <see cref="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.EncoderZIndexPhase" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="AHighBHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Reset the measurement when signal A and signal B are high.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.AHighBLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="AHighBLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Reset the measurement when signal A is high and signal B is low.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.ALowBHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="ALowBHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Reset the measurement when signal A is low and signal B high.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIEncoderZIndexPhase.ALowBLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="ALowBLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Reset the measurement when signal A and signal B are low.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseWidthUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPulseWidthUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return pulse width measurements.</summary>
<remarks>Specifies the units to use to return pulse width measurements.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseWidthUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Timebase ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseWidthTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPulseWidthTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseWidthTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseWidthLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPulseWidthLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseWidthLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseWidthStartingEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CIPulseWidthStartingEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the input signal to begin each pulse width measurement.</summary>
<remarks>Specifies on which edge of the input signal to begin each pulse width measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseWidthStartingEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthStartingEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseWidthStartingEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CITimestampUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="CITimestampUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return timestamp measurements.</summary>
<remarks>Specifies the units to use to return timestamp measurements.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.TimestampUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CITimestampUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:03 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITimestampUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIGpsSyncMethod" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIGpsSyncMethod" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the method to use to synchronize the counter to a GPS receiver.</summary>
<remarks>Specifies the method to use to synchronize the counter to a GPS receiver.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.GpsSyncMethod" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIGpsSyncMethod.IrigB" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="IrigB" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the IRIG-B synchronization method. The GPS receiver sends one synchronization pulse per second, as well as information about the number of days, hours, minutes, and seconds that elapsed since the beginning of the current year.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIGpsSyncMethod.Pps" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Pps" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the PPS synchronization method. The GPS receiver sends one synchronization pulse per second, but does not send any timing information. The timestamp measurement returns the number of seconds that elapsed since the device powered up unless you set <see cref="P:NationalInstruments.DAQmx.CIChannel.TimestampInitialSeconds" />.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIGpsSyncMethod.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not synchronize the counter to a GPS receiver. The timestamp measurement returns the number of seconds that elapsed since the device powered up unless you set  <see cref="P:NationalInstruments.DAQmx.CIChannel.TimestampInitialSeconds" />.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CITwoEdgeSeparationUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CITwoEdgeSeparationUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return two-edge separation measurements from the channel.</summary>
<remarks>Specifies the units to use to return two-edge separation measurements from the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Timebase ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CITwoEdgeSeparationFirstTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CITwoEdgeSeparationFirstLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the input line.</summary>
<remarks>Specifies the logic level behavior on the input line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CITwoEdgeSeparationFirstEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the first signal to start each measurement.</summary>
<remarks>Specifies on which edge of the first signal to start each measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationFirstEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationFirstEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CITwoEdgeSeparationSecondTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CITwoEdgeSeparationSecondLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<remarks>Specifies the logic level behavior on the count reset line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CITwoEdgeSeparationSecondEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the second signal to stop each measurement.</summary>
<remarks>Specifies on which edge of the second signal to stop each measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.TwoEdgeSeparationSecondEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CITwoEdgeSeparationSecondEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CISemiPeriodUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CISemiPeriodUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return semi-period measurements.</summary>
<remarks>Specifies the units to use to return semi-period measurements.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Timebase ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodUnits.FromCustomScale" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="FromCustomScale" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units a <see href="javascript:launchSharedHelp('mxcncpts.chm::/customScales.html');">custom scale</see> specifies. If you select this value, you must specify a custom scale name.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CISemiPeriodTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CISemiPeriodTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CISemiPeriodLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CISemiPeriodLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<remarks>Specifies the logic level behavior on the count reset line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CISemiPeriodStartingEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CISemiPeriodStartingEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the input signal to begin semi-period measurement. Semi-period measurements alternate between high time and low time, starting on this edge.</summary>
<remarks>Specifies on which edge of the input signal to begin semi-period measurement. Semi-period measurements alternate between high time and low time, starting on this edge.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.SemiPeriodStartingEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodStartingEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CISemiPeriodStartingEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseFrequencyUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseFrequencyUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return pulse specifications in terms of frequency.</summary>
<remarks>Specifies the units to use to return pulse specifications in terms of frequency.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseFrequencyUnits.Hertz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Hertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Hertz.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseFrequencyTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseFrequencyTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseFrequencyTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseFrequencyTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseFrequencyLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseFrequencyLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<remarks>Specifies the logic level behavior on the count reset line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseFrequencyLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseFrequencyLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseFrequencyStartingEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseFrequencyStartingEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the input signal to begin pulse measurement.</summary>
<remarks>Specifies on which edge of the input signal to begin pulse measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseFrequencyStartingEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseFrequencyStartingEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseFrequencyStartingEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseTimeUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseTimeUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units to use to return pulse specifications in terms of high time and low time.</summary>
<remarks>Specifies the units to use to return pulse specifications in terms of high time and low time.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseTimeUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTimeUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseTimeTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseTimeTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseTimeTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTimeTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTimeTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseTimeLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseTimeLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<remarks>Specifies the logic level behavior on the count reset line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseTimeLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTimeLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTimeLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseTimeStartingEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseTimeStartingEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the input signal to begin pulse measurement.</summary>
<remarks>Specifies on which edge of the input signal to begin pulse measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseTimeStartingEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTimeStartingEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTimeStartingEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseTicksTerminalConfiguration" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseTicksTerminalConfiguration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration.</summary>
<remarks>Specifies the input terminal configuration.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseTicksTerminalConfiguration" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTicksTerminalConfiguration.Differential" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Differential.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTicksTerminalConfiguration.Rse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Referenced Single-Ended.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseTicksLogicLevelBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseTicksLogicLevelBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the logic level behavior on the count reset line.</summary>
<remarks>Specifies the logic level behavior on the count reset line.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseTicksLogicLevelBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTicksLogicLevelBehavior.LogicLevelPullUp" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="LogicLevelPullUp" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTicksLogicLevelBehavior.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Supply no excitation to the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIPulseTicksStartingEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIPulseTicksStartingEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the input signal to begin pulse measurement.</summary>
<remarks>Specifies on which edge of the input signal to begin pulse measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.PulseTicksStartingEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTicksStartingEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIPulseTicksStartingEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CICounterTimebaseActiveEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CICounterTimebaseActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether a timebase cycle is from rising edge to rising edge or from falling edge to falling edge.</summary>
<remarks>Specifies whether a timebase cycle is from rising edge to rising edge or from falling edge to falling edge.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.CounterTimebaseActiveEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CICounterTimebaseActiveEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CICounterTimebaseActiveEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIOutputState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIOutputState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the current state of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/CounterParts.html');">out terminal</see> of the counter.</summary>
<remarks>Indicates the current state of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/CounterParts.html');">out terminal</see> of the counter.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.OutputState" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIOutputState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIOutputState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CISampleClockOverrunBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CISampleClockOverrunBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the counter behavior when data is read but a new value was not detected during a sample clock.</summary>
<remarks>Specifies the counter behavior when data is read but a new value was not detected during a sample clock.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.SampleClockOverrunBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CISampleClockOverrunBehavior.RepeatedData" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="RepeatedData" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Repeat the last sample.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CISampleClockOverrunBehavior.SentinelValue" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SentinelValue" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Return the sentinel value.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIDataTransferMechanism" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIDataTransferMechanism" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the data transfer mode for the channel.</summary>
<remarks>Specifies the data transfer mode for the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.DataTransferMechanism" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIDataTransferMechanism.Dma" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Dma" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Memory Access. Data transfers take place independently from the application.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDataTransferMechanism.Interrupts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Interrupts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application. Using interrupts increases CPU usage because the CPU must service interrupt requests. Typically, you should use interrupts if the device is out of DMA channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDataTransferMechanism.ProgrammedIO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ProgrammedIO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place when you call reading from the task or writing to the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDataTransferMechanism.UsbBulk" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="UsbBulk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application using a USB bulk pipe.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CIDataTransferRequestCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CIDataTransferRequestCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.</summary>
<remarks>Specifies under what condition to transfer data from the onboard memory of the device to the buffer.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.CIChannel.DataTransferRequestCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CIDataTransferRequestCondition.OnBoardMemoryMoreThanHalfFull" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryMoreThanHalfFull" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when more than half of the onboard memory of the device fills.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDataTransferRequestCondition.OnBoardMemoryNotEmpty" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryNotEmpty" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when there is data in the onboard memory.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDataTransferRequestCondition.OnBoardMemoryCustomThreshold" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryCustomThreshold" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data from the device when the number of samples specified with <see cref="P:NationalInstruments.DAQmx.AIChannel.DataTransferCustomThreshold" /> are in the device FIFO.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CIDataTransferRequestCondition.WhenAcquisitionComplete" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="WhenAcquisitionComplete" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data when the acquisition is complete.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.COOutputType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="COOutputType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates how to define pulses generated on the channel.</summary>
<remarks>Indicates how to define pulses generated on the channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.OutputType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.COOutputType.PulseTime" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Generate pulses defined by the time the pulse is at a low state and the time the pulse is at a high state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.COOutputType.PulseFrequency" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Generate digital pulses defined by frequency and duty cycle.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.COOutputType.PulseTicks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PulseTicks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Generate digital pulses defined by the number of timebase ticks that the pulse is at a low state and the number of timebase ticks that the pulse is at a high state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.COPulseIdleState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="COPulseIdleState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the resting state of the output terminal.</summary>
<remarks>Specifies the resting state of the output terminal.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.PulseIdleState" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.COPulseIdleState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.COPulseIdleState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.COPulseTimeUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="COPulseTimeUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units in which to define high and low pulse time.</summary>
<remarks>Specifies the units in which to define high and low pulse time.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.PulseTimeUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.COPulseTimeUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.COPulseFrequencyUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="COPulseFrequencyUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units in which to define pulse frequency.</summary>
<remarks>Specifies the units in which to define pulse frequency.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.PulseFrequencyUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.COPulseFrequencyUnits.Hertz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Hertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Hertz.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.COCounterTimebaseActiveEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="COCounterTimebaseActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether a timebase cycle is from rising edge to rising edge or from falling edge to falling edge.</summary>
<remarks>Specifies whether a timebase cycle is from rising edge to rising edge or from falling edge to falling edge.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.CounterTimebaseActiveEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.COCounterTimebaseActiveEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.COCounterTimebaseActiveEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.COOutputState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="COOutputState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the current state of the output terminal of the counter.</summary>
<remarks>Indicates the current state of the output terminal of the counter.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.OutputState" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.COOutputState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.COOutputState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.COConstrainedGenerationMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="COConstrainedGenerationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies constraints to apply when the counter generates pulses. Constraining the counter reduces the device resources required for counter operation. Constraining the counter can also allow additional analog or counter tasks on the device to run concurrently. For continuous counter tasks, NI-DAQmx consumes no device resources when the counter is constrained. For finite counter tasks, resource use increases with the frequency regardless of the constraint mode. However, fixed frequency constraints significantly reduce resource usage, and fixed duty cycle constraint marginally reduces it.</summary>
<remarks>Specifies constraints to apply when the counter generates pulses. Constraining the counter reduces the device resources required for counter operation. Constraining the counter can also allow additional analog or counter tasks on the device to run concurrently. For continuous counter tasks, NI-DAQmx consumes no device resources when the counter is constrained. For finite counter tasks, resource use increases with the frequency regardless of the constraint mode. However, fixed frequency constraints significantly reduce resource usage, and fixed duty cycle constraint marginally reduces it.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.ConstrainedGenerationMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.COConstrainedGenerationMode.Unconstrained" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Unconstrained" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Counter has no restrictions on pulse generation.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.COConstrainedGenerationMode.FixedHighFrequency" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="FixedHighFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pulse frequency must be above 7.63 Hz and cannot change while the task runs. In this mode, the duty cycle has 8 bits of resolution.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.COConstrainedGenerationMode.FixedLowFrequency" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="FixedLowFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pulse frequency must be below 366.21 Hz and cannot change while the task runs. In this mode, the duty cycle has 16 bits of resolution.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.COConstrainedGenerationMode.Fixed50PercentDutyCycle" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Fixed50PercentDutyCycle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pulse duty cycle must be 50 percent. The frequency can change while the task runs.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CODataTransferMechanism" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CODataTransferMechanism" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the data transfer mode for the device. For buffered operations, use DMA or USB Bulk. For non-buffered operations, use Polled.</summary>
<remarks>Specifies the data transfer mode for the device. For buffered operations, use DMA or USB Bulk. For non-buffered operations, use Polled.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.DataTransferMechanism" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CODataTransferMechanism.Dma" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Dma" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Memory Access. Data transfers take place independently from the application.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CODataTransferMechanism.Interrupts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Interrupts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application. Using interrupts increases CPU usage because the CPU must service interrupt requests. Typically, you should use interrupts if the device is out of DMA channels.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CODataTransferMechanism.ProgrammedIO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ProgrammedIO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place when you call reading from the task or writing to the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CODataTransferMechanism.UsbBulk" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="UsbBulk" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Data transfers take place independently from the application using a USB bulk pipe.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CODataTransferRequestCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CODataTransferRequestCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.</summary>
<remarks>Specifies under what condition to transfer data from the buffer to the onboard memory of the device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.COChannel.DataTransferRequestCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CODataTransferRequestCondition.OnBoardMemoryEmpty" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryEmpty" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device only when there is no data in the onboard memory of the device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CODataTransferRequestCondition.OnBoardMemoryHalfFullOrLess" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryHalfFullOrLess" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device any time the onboard memory is less than half full.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CODataTransferRequestCondition.OnBoardMemoryNotFull" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnBoardMemoryNotFull" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Transfer data to the device any time the onboard memory of the device is not full.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ChannelType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ChannelType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the <see href="javascript:launchSharedHelp('mxcncpts.chm::/virtChanTypes.html');">type</see> of the virtual channel.</summary>
<remarks>Indicates the <see href="javascript:launchSharedHelp('mxcncpts.chm::/virtChanTypes.html');">type</see> of the virtual channel.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Channel.Type" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ChannelType.AI" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AI" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analog input channel.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ChannelType.AO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Analog output channel.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ChannelType.DI" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DI" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Digital input channel.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ChannelType.DO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Digital output channel.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ChannelType.CI" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CI" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Counter input channel.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ChannelType.CO" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CO" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Counter output channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIConvertClockPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AIConvertClockPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the polarity of the exported AI Convert Clock. The polarity is fixed and independent of the active edge of the source of the AI Convert Clock.</summary>
<remarks>Indicates the polarity of the exported AI Convert Clock. The polarity is fixed and independent of the active edge of the source of the AI Convert Clock.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AIConvertClockPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIConvertClockPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIConvertClockPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockOutputBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SampleClockOutputBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the exported Sample Clock issues a pulse at the beginning of a sample or changes to a high state for the duration of the sample.</summary>
<remarks>Specifies whether the exported Sample Clock issues a pulse at the beginning of a sample or changes to a high state for the duration of the sample.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.SampleClockOutputBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.SampleClockOutputBehavior.Pulse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Pulse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The exported Sample Clock pulses at the beginning of each sample.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleClockOutputBehavior.Level" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Level" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The exported Sample Clock goes high at the beginning of the sample and goes low when the last AI Convert begins.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="SampleClockPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of the exported Sample Clock if <see cref="P:NationalInstruments.DAQmx.ExportSignals.SampleClockOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.SampleClockOutputBehavior.Pulse" />.</summary>
<remarks>Specifies the polarity of the exported Sample Clock if <see cref="P:NationalInstruments.DAQmx.ExportSignals.SampleClockOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.SampleClockOutputBehavior.Pulse" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.SampleClockPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.SampleClockPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleClockPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AdvanceTriggerPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceTriggerPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Indicates the polarity of the exported Advance Trigger.</summary>
<remarks>Indicates the polarity of the exported Advance Trigger.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AdvanceTriggerPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AdvanceTriggerPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AdvanceTriggerPulseWidthUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceTriggerPulseWidthUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidth" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidth" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceTriggerPulseWidthUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AdvanceTriggerPulseWidthUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.PauseTriggerLevelActiveLevel" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="PauseTriggerLevelActiveLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the active level of the exported Pause Trigger.</summary>
<remarks>Specifies the active level of the exported Pause Trigger.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.PauseTriggerLevelActiveLevel" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.PauseTriggerLevelActiveLevel.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PauseTriggerLevelActiveLevel.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ReferenceTriggerPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReferenceTriggerPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of the exported Reference Trigger.</summary>
<remarks>Specifies the polarity of the exported Reference Trigger.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.ReferenceTriggerPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ReferenceTriggerPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReferenceTriggerPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.StartTriggerPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="StartTriggerPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of the exported Start Trigger.</summary>
<remarks>Specifies the polarity of the exported Start Trigger.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.StartTriggerPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AdvanceCompleteEventPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AdvanceCompleteEventPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of the exported Advance Complete Event.</summary>
<remarks>Specifies the polarity of the exported Advance Complete Event.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AdvanceCompleteEventPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AdvanceCompleteEventPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AdvanceCompleteEventPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIHoldCompleteEventPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="AIHoldCompleteEventPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of an exported AI Hold Complete Event pulse.</summary>
<remarks>Specifies the polarity of an exported AI Hold Complete Event pulse.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.AIHoldCompleteEventPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIHoldCompleteEventPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIHoldCompleteEventPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ChangeDetectionEventPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ChangeDetectionEventPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of an exported Change Detection Event pulse.</summary>
<remarks>Specifies the polarity of an exported Change Detection Event pulse.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.ChangeDetectionEventPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ChangeDetectionEventPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ChangeDetectionEventPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterOutputEventOutputBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the exported Counter Output Event pulses or changes from one state to the other when the counter reaches terminal count.</summary>
<remarks>Specifies whether the exported Counter Output Event pulses or changes from one state to the other when the counter reaches terminal count.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Pulse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Pulse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Send a pulse to the terminal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Toggle" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Toggle the state of the terminal from low to high or from high to low.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CounterOutputEventPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterOutputEventPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of the pulses at the output terminal of the counter when <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Pulse" />. NI-DAQmx ignores this property if <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" />.</summary>
<remarks>Specifies the polarity of the pulses at the output terminal of the counter when <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Pulse" />. NI-DAQmx ignores this property if <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CounterOutputEventPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CounterOutputEventPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CounterOutputEventIdleState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="CounterOutputEventIdleState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the initial state of the output terminal of the counter when <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" />. The terminal enters this state when NI-DAQmx <see href="javascript:launchSharedHelp('mxcncpts.chm::/Committed.html');">commits</see> the task.</summary>
<remarks>Specifies the initial state of the output terminal of the counter when <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.CounterOutputEventOutputBehavior.Toggle" />. The terminal enters this state when NI-DAQmx <see href="javascript:launchSharedHelp('mxcncpts.chm::/Committed.html');">commits</see> the task.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.CounterOutputEventIdleState" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.CounterOutputEventIdleState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CounterOutputEventIdleState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.HandshakeEventOutputBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventOutputBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the output behavior of the Handshake Event.</summary>
<remarks>Specifies the output behavior of the Handshake Event.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Interlocked" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Handshake Event deasserts after the Handshake Trigger asserts, plus the amount of time specified with <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventInterlockedDeassertDelay" />.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Pulse" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Pulse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Handshake Event pulses with the pulse width specified in <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventPulseWidth" />.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.HandshakeEventInterlockedAssertedLevel" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventInterlockedAssertedLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the asserted level of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" />.</summary>
<remarks>Specifies the asserted level of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Interlocked" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventInterlockedAssertedLevel" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.HandshakeEventInterlockedAssertedLevel.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.HandshakeEventInterlockedAssertedLevel.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.HandshakeEventPulsePolarity" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="HandshakeEventPulsePolarity" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Pulse" />.</summary>
<remarks>Specifies the polarity of the exported Handshake Event if <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventOutputBehavior" /> is <see cref="F:NationalInstruments.DAQmx.HandshakeEventOutputBehavior.Pulse" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.HandshakeEventPulsePolarity" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.HandshakeEventPulsePolarity.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.HandshakeEventPulsePolarity.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForTransferEventLevelActiveLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the active level of the exported Ready for Transfer Event.</summary>
<remarks>Specifies the active level of the exported Ready for Transfer Event.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventLevelActiveLevel" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadyForTransferEventLevelActiveLevel.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ReadyForTransferEventDeassertCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForTransferEventDeassertCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies when the ready for transfer event deasserts.</summary>
<remarks>Specifies when the ready for transfer event deasserts.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventDeassertCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ReadyForTransferEventDeassertCondition.OnboardMemoryMoreThanHalfFull" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnboardMemoryMoreThanHalfFull" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Deassert the signal when more than half of the onboard memory of the device fills.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadyForTransferEventDeassertCondition.OnboardMemoryFull" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnboardMemoryFull" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Deassert the signal when the onboard memory fills.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadyForTransferEventDeassertCondition.OnboardMemoryCustomThreshold" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="OnboardMemoryCustomThreshold" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Deassert the signal when the amount of space available in the onboard memory is below the value specified with <see cref="P:NationalInstruments.DAQmx.ExportSignals.ReadyForTransferEventDeassertConditionCustomThreshold" />.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DataActiveEventLevelActiveLevel" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="DataActiveEventLevelActiveLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of the exported Data Active Event.</summary>
<remarks>Specifies the polarity of the exported Data Active Event.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.DataActiveEventLevelActiveLevel" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DataActiveEventLevelActiveLevel.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DataActiveEventLevelActiveLevel.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ReadyForStartEventLevelActiveLevel" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ReadyForStartEventLevelActiveLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the polarity of the exported Ready for Start Event.</summary>
<remarks>Specifies the polarity of the exported Ready for Start Event.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ExportSignals.ReadyForStartEventLevelActiveLevel" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ReadyForStartEventLevelActiveLevel.ActiveHigh" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveHigh" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state is the active state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadyForStartEventLevelActiveLevel.ActiveLow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:04 PM" niupdatedby="GmfTool" nidisplayname="ActiveLow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state is the active state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ReadRelativeTo" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReadRelativeTo" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the point in the buffer at which to begin a read operation. If you also specify an offset with <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" />, the read operation begins at that offset relative to the point you select with this property. The default value is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.CurrentReadPosition" /> unless you configure a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> for the task. If you configure a Reference Trigger, the default value is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstPretriggerSample" />.</summary>
<remarks>Specifies the point in the buffer at which to begin a read operation. If you also specify an offset with <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" />, the read operation begins at that offset relative to the point you select with this property. The default value is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.CurrentReadPosition" /> unless you configure a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> for the task. If you configure a Reference Trigger, the default value is <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstPretriggerSample" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadRelativeTo" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstSample" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="FirstSample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Start reading samples relative to the first sample acquired.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadRelativeTo.CurrentReadPosition" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="CurrentReadPosition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Start reading samples relative to the last sample returned by the previous read. For the first read operation, this position is the first sample acquired or the first pretrigger sample if you configured a reference trigger for the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadRelativeTo.ReferenceTrigger" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReferenceTrigger" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Start reading samples relative to the first sample after the reference trigger occurred.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadRelativeTo.FirstPretriggerSample" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="FirstPretriggerSample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Start reading samples relative to the first pretrigger sample. You specify the number of pretrigger samples to acquire when you configure a reference trigger.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadRelativeTo.MostRecentSample" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="MostRecentSample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Start reading samples relative to the next sample acquired. For example, use this value and set <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" /> to -1 to read the last sample acquired.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ReadOverwriteMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReadOverwriteMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether to overwrite samples in the buffer that you have not yet read.</summary>
<remarks>Specifies whether to overwrite samples in the buffer that you have not yet read.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOverwriteMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ReadOverwriteMode.OverwriteUnreadSamples" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="OverwriteUnreadSamples" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>When an acquisition encounters unread data in the buffer, the acquisition continues and overwrites the unread samples with new ones. You can read the new samples by setting <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadRelativeTo" /> to <see cref="F:NationalInstruments.DAQmx.ReadRelativeTo.MostRecentSample" /> and setting <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadOffset" /> to the appropriate number of samples.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadOverwriteMode.DoNotOverwriteUnreadSamples" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DoNotOverwriteUnreadSamples" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>The acquisition stops when it encounters a sample in the buffer that you have not read.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.LoggingMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="LoggingMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether to enable <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">logging</see> and whether to allow reading data while logging. Log mode allows for the best performance. However, you cannot read data while logging if you specify this mode. If you want to read data while logging, specify Log and Read mode.</summary>
<remarks>Specifies whether to enable <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">logging</see> and whether to allow reading data while logging. Log mode allows for the best performance. However, you cannot read data while logging if you specify this mode. If you want to read data while logging, specify Log and Read mode.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DaqStream.LoggingMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.LoggingMode.Off" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Off" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disable logging for the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.LoggingMode.Log" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Log" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Enable logging for the task. You cannot read data using reading from the task when using this mode. If you require access to the data, read from the TDMS file.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.LoggingMode.LogAndRead" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="LogAndRead" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Enable both logging and reading data for the task. You must use reading from the task to read samples for NI-DAQmx to stream them to disk.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.TdmsLoggingOperation" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="TdmsLoggingOperation" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how to open the <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">TDMS</see> file.</summary>
<remarks>Specifies how to open the <see href="javascript:launchSharedHelp('mxcncpts.chm::/datalogging.html');">TDMS</see> file.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DaqStream.TdmsLoggingOperation" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.TdmsLoggingOperation.Open" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Open" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Open an existing TDMS file, and append data to that file. If the file does not exist, NI-DAQmx returns an error.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TdmsLoggingOperation.OpenOrCreate" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="OpenOrCreate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Open an existing TDMS file, and append data to that file. If the file does not exist, NI-DAQmx creates a new TDMS file.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TdmsLoggingOperation.CreateOrReplace" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="CreateOrReplace" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Create a new TDMS file, or replace an existing TDMS file.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TdmsLoggingOperation.Create" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Create" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Create a new TDMS file. If the file already exists, NI-DAQmx returns an error.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ReadWaitMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReadWaitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how reading from the task waits for samples to become available.</summary>
<remarks>Specifies how reading from the task waits for samples to become available.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadWaitMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ReadWaitMode.WaitForInterrupt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WaitForInterrupt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Check for available samples when the system receives an interrupt service request. This mode is the most CPU efficient, but results in lower possible sampling rates.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadWaitMode.Poll" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Poll" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Repeatedly check for available samples as fast as possible. This mode allows for the highest sampling rates at the expense of CPU efficiency.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadWaitMode.Yield" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Yield" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Repeatedly check for available samples, but yield control to other threads after each check. This mode offers a balance between sampling rate and CPU efficiency.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReadWaitMode.Sleep" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Sleep" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Check for available samples once per the amount of time specified in <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadSleepTime" />.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WriteRelativeTo" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WriteRelativeTo" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the point in the buffer at which to write data. If you also specify an offset with <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOffset" />, the write operation begins at that offset relative to this point you select with this property.</summary>
<remarks>Specifies the point in the buffer at which to write data. If you also specify an offset with <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteOffset" />, the write operation begins at that offset relative to this point you select with this property.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteRelativeTo" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WriteRelativeTo.FirstSample" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="FirstSample" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Write samples relative to the first sample.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WriteRelativeTo.CurrentWritePosition" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="CurrentWritePosition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Write samples relative to the current position in the buffer.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WriteRegenerationMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WriteRegenerationMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether to allow NI-DAQmx to generate the same data multiple times.</summary>
<remarks>Specifies whether to allow NI-DAQmx to generate the same data multiple times.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteRegenerationMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WriteRegenerationMode.AllowRegeneration" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AllowRegeneration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Allow NI-DAQmx to regenerate samples that the device previously generated. When you choose this value, the write marker returns to the beginning of the buffer after the device generates all samples currently in the buffer.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WriteRegenerationMode.DoNotAllowRegeneration" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DoNotAllowRegeneration" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not allow NI-DAQmx to regenerate samples the device previously generated. When you choose this value, NI-DAQmx waits for you to write more samples to the buffer or until the timeout expires.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WriteWaitMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WriteWaitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how writing to the task waits for space to become available in the buffer.</summary>
<remarks>Specifies how writing to the task waits for space to become available in the buffer.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteWaitMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WriteWaitMode.Poll" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Poll" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Repeatedly check for available buffer space as fast as possible. This mode allows for the highest sampling rates at the expense of CPU efficiency.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WriteWaitMode.Yield" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Yield" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Repeatedly check for available buffer space, but yield control to other threads after each check. This mode offers a balance between sampling rate and CPU efficiency.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WriteWaitMode.Sleep" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Sleep" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Check for available buffer space once per the amount of time specified in <see cref="P:NationalInstruments.DAQmx.DaqStream.WriteSleepTime" />.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleQuantityMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleQuantityMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies if a task acquires or generates a finite number of samples or if it continuously acquires or generates samples.</summary>
<remarks>Specifies if a task acquires or generates a finite number of samples or if it continuously acquires or generates samples.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.SampleQuantityMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.SampleQuantityMode.FiniteSamples" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="FiniteSamples" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Acquire or generate a finite number of samples.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleQuantityMode.ContinuousSamples" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ContinuousSamples" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Acquire or generate samples until you stop the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleQuantityMode.HardwareTimedSinglePoint" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HardwareTimedSinglePoint" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Acquire or generate samples continuously using hardware timing without a buffer. <see href="javascript:launchSharedHelp('mxcncpts.chm::/HWTSPSampleMode.html');">Hardware timed single point</see> sample mode is supported only for the sample clock and change detection timing types.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleTimingType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleTimingType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/smpleTimingType.html');">type of sample timing</see> to use for the task.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/smpleTimingType.html');">type of sample timing</see> to use for the task.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.SampleTimingType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.SampleTimingType.SampleClock" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Acquire or generate samples on the specified edge of the sample clock.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleTimingType.BurstHandshake" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="BurstHandshake" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Determine sample timing using burst handshaking between the device and a peripheral device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleTimingType.Handshake" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Handshake" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Determine sample timing by using digital handshaking between the device and a peripheral device.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleTimingType.Implicit" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Implicit" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Configure only the duration of the task.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleTimingType.OnDemand" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="OnDemand" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Acquire or generate a sample on each read or write operation. This timing type is also referred to as static or software-timed.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleTimingType.ChangeDetection" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ChangeDetection" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Acquire samples when a change occurs in the state of one or more digital input lines. The lines must be contained within a digital input channel.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleTimingType.PipelinedSampleClock" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PipelinedSampleClock" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device acquires or generates samples on each sample clock edge, but does not respond to certain triggers until a few sample clock edges later. Pipelining allows higher data transfer rates at the cost of increased trigger response latency.  Refer to the device documentation for information about which triggers pipelining affects. This timing type allows handshaking with some devices using the Pause trigger, the Ready for Transfer event, or the Data Active event. Refer to the device documentation for more information.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockActiveEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of a clock pulse sampling takes place. This property is useful primarily when the signal you use as the Sample Clock is not a periodic clock.</summary>
<remarks>Specifies on which edge of a clock pulse sampling takes place. This property is useful primarily when the signal you use as the Sample Clock is not a periodic clock.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockActiveEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.SampleClockActiveEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleClockActiveEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockOverrunBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockOverrunBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the action to take if Sample Clock edges occur faster than the device can handle them.</summary>
<remarks>Specifies the action to take if Sample Clock edges occur faster than the device can handle them.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockOverrunBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.SampleClockOverrunBehavior.StopTaskAndError" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="StopTaskAndError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Stop task and return an error.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleClockOverrunBehavior.IgnoreOverruns" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="IgnoreOverruns" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>NI-DAQmx ignores Sample Clock overruns, and the task continues to run.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockUnderflowBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockUnderflowBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the action to take when the onboard memory of the device becomes empty.</summary>
<remarks>Specifies the action to take when the onboard memory of the device becomes empty.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockUnderflowBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.SampleClockUnderflowBehavior.HaltOutputAndError" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HaltOutputAndError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Stop generating samples and return an error.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleClockUnderflowBehavior.PauseUntilDataAvailable" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PauseUntilDataAvailable" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the task until samples are available in the FIFO.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.SampleClockTimebaseActiveEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockTimebaseActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge to recognize a Sample Clock Timebase pulse. This property is useful primarily when the signal you use as the Sample Clock Timebase is not a periodic clock.</summary>
<remarks>Specifies on which edge to recognize a Sample Clock Timebase pulse. This property is useful primarily when the signal you use as the Sample Clock Timebase is not a periodic clock.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.SampleClockTimebaseActiveEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.SampleClockTimebaseActiveEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.SampleClockTimebaseActiveEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.HandshakeStartCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HandshakeStartCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the point in the handshake cycle that the device is in when the task starts.</summary>
<remarks>Specifies the point in the handshake cycle that the device is in when the task starts.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.HandshakeStartCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.HandshakeStartCondition.Immediate" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Immediate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device is waiting for space in the FIFO (for acquisition) or waiting for samples (for generation).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.HandshakeStartCondition.WaitForHandshakeTriggerAssert" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WaitForHandshakeTriggerAssert" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device is waiting for the Handshake Trigger to assert.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.HandshakeStartCondition.WaitForHandshakeTriggerDeassert" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WaitForHandshakeTriggerDeassert" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device is waiting for the Handshake Trigger to deassert.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.HandshakeSampleInputDataCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HandshakeSampleInputDataCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the Handshake Trigger an input task latches the data from the peripheral device.</summary>
<remarks>Specifies on which edge of the Handshake Trigger an input task latches the data from the peripheral device.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.HandshakeSampleInputDataCondition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.HandshakeSampleInputDataCondition.HandshakeTriggerAsserts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HandshakeTriggerAsserts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Latch data when the Handshake Trigger asserts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.HandshakeSampleInputDataCondition.HandshakeTriggerDeasserts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HandshakeTriggerDeasserts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Latch data when the Handshake Trigger deasserts.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ImplicitUnderflowBehavior" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ImplicitUnderflowBehavior" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the action to take when the onboard memory of the device becomes empty.</summary>
<remarks>Specifies the action to take when the onboard memory of the device becomes empty.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.ImplicitUnderflowBehavior" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ImplicitUnderflowBehavior.HaltOutputAndError" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="HaltOutputAndError" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Stop generating samples and return an error.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ImplicitUnderflowBehavior.PauseUntilDataAvailable" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PauseUntilDataAvailable" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the task until samples are available in the FIFO.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIConvertActiveEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AIConvertActiveEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of the clock pulse an analog-to-digital conversion takes place.</summary>
<remarks>Specifies on which edge of the clock pulse an analog-to-digital conversion takes place.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.AIConvertActiveEdge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIConvertActiveEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIConvertActiveEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AIConvertTimebaseSource" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AIConvertTimebaseSource" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see>  of the signal to use as the AI Convert Clock Timebase.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see>  of the signal to use as the AI Convert Clock Timebase.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.AIConvertTimebaseSource" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AIConvertTimebaseSource.SameAsSampleTimebase" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SameAsSampleTimebase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the same source as Sample Clock timebase.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIConvertTimebaseSource.SameAsMasterTimebase" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SameAsMasterTimebase" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the same source as the Master Timebase.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIConvertTimebaseSource.Timebase100MHz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Timebase100MHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the onboard 100 MHz timebase.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIConvertTimebaseSource.Timebase80MHz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Timebase80MHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the onboard 80 MHz timebase.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIConvertTimebaseSource.Timebase20MHz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Timebase20MHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the onboard 20 MHz timebase.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AIConvertTimebaseSource.Timebase8MHz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Timebase8MHz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the onboard 8 MHz timebase.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DelayFromSampleClockUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DelayFromSampleClockUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClock" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClock" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Timing.DelayFromSampleClockUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DelayFromSampleClockUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DelayFromSampleClockUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Timebase ticks.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WaitForNextSampleClockWaitMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WaitForNextSampleClockWaitMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> waits for the next Sample Clock pulse.</summary>
<remarks>Specifies how <see cref="M:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClock(System.Double)" /> waits for the next Sample Clock pulse.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.SinglePoint.WaitForNextSampleClockWaitMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WaitForNextSampleClockWaitMode.WaitForInterrupt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WaitForInterrupt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Check for Sample Clock pulses when the system receives an interrupt service request. This mode is the most CPU efficient, but results in lower possible sampling rates.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WaitForNextSampleClockWaitMode.Poll" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Poll" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Repeatedly check for Sample Clock pulses as fast as possible. This mode allows for the highest sampling rates at the expense of CPU efficiency.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WriteRecoveryMode" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WriteRecoveryMode" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies how NI-DAQmx attempts to recover after missing a Sample Clock pulse when performing counter writes.</summary>
<remarks>Specifies how NI-DAQmx attempts to recover after missing a Sample Clock pulse when performing counter writes.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.SinglePoint.WriteRecoveryMode" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WriteRecoveryMode.WaitForInterrupt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="WaitForInterrupt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Attempt to recover when the system receives an interrupt service request. This mode is the most CPU efficient and best suited for recovery at lower pulse train frequencies.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WriteRecoveryMode.Poll" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Poll" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Repeatedly attempt to recover as fast as possible. This mode has the highest probability of recovery success at the expense of CPU efficiency.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ScalePreScaledUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ScalePreScaledUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of the values that you want to scale.</summary>
<remarks>Specifies the units of the values that you want to scale.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Scale.PreScaledUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Volts" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Volts" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Amps" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Amps" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Amperes.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.DegreesF" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DegreesF" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees Fahrenheit.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.DegreesC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DegreesC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees Celsius.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.DegreesR" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DegreesR" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees Rankine.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Kelvins" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Kelvins" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Kelvins.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Strain" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Strain" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Strain.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Ohms" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Ohms" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ohms.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Hertz" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Hertz" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Hertz.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Meters" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Meters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Meters.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Inches" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Inches" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Degrees" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Degrees" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Degrees.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Radians" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Radians" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Radians.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ticks.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.G" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="G" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>1 g is approximately equal to 9.81 m/s/s.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.MetersPerSecondSquared" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="MetersPerSecondSquared" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Meters per second per second.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Pascals" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Pascals" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pascals.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Newtons" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Newtons" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Newtons.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Pounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Pounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pounds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.KilogramForce" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="KilogramForce" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Kilograms-force.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.PoundsPerSquareInch" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PoundsPerSquareInch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pounds per square inch.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.Bar" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Bar" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Bar.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.NewtonMeters" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="NewtonMeters" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Newton meters.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.InchOunces" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="InchOunces" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Ounce-inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.InchPounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="InchPounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pound-inches.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.FootPounds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="FootPounds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pound-feet.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.VoltsPerVolt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="VoltsPerVolt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Volts per volt.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.MillivoltsPerVolt" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="MillivoltsPerVolt" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Millivolts per volt.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ScalePreScaledUnits.FromTeds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="FromTeds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Units defined by TEDS information associated with the channel.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.StartTriggerType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="StartTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/triggertypes.html');">type</see> of trigger to use to start a task.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/triggertypes.html');">type</see> of trigger to use to start a task.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.StartTrigger.Type" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerType.AnalogEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AnalogEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when an analog signal signal crosses a threshold.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger on the rising or falling edge of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerType.DigitalPattern" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalPattern" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when digital physical channels match a digital pattern.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerType.AnalogWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when an analog signal enters or leaves a range of values. The range is in the units of the measurement.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disable triggering for the task.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.StartTriggerDelayUnits" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="StartTriggerDelayUnits" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the units of <see cref="P:NationalInstruments.DAQmx.StartTrigger.Delay" />.</summary>
<remarks>Specifies the units of <see cref="P:NationalInstruments.DAQmx.StartTrigger.Delay" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.StartTrigger.DelayUnits" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerDelayUnits.SampleClockPeriods" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="SampleClockPeriods" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Complete periods of the Sample Clock.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerDelayUnits.Seconds" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Seconds" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Seconds.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.StartTriggerDelayUnits.Ticks" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Ticks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Timebase ticks.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeStartTriggerEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdgeStartTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of a digital pulse to start acquiring or generating samples.</summary>
<remarks>Specifies on which edge of a digital pulse to start acquiring or generating samples.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalEdgeStartTrigger.Edge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeStartTriggerEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeStartTriggerEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalPatternStartTriggerCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalPatternStartTriggerCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the Start Trigger occurs when the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Source" /> match or differ from the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Pattern" />.</summary>
<remarks>Specifies whether the Start Trigger occurs when the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Source" /> match or differ from the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Pattern" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalPatternStartTrigger.Condition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalPatternStartTriggerCondition.PatternMatches" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PatternMatches" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the physical channels match the specified pattern.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalPatternStartTriggerCondition.PatternDoesNotMatch" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="PatternDoesNotMatch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the physical channels do not match the specified pattern.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AnalogEdgeStartTriggerSlope" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which slope of the trigger signal to start acquiring or generating samples.</summary>
<remarks>Specifies on which slope of the trigger signal to start acquiring or generating samples.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Slope" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger on the rising slope of the signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgeStartTriggerSlope.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger on the falling slope of the signal.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogEdgeStartTriggerCoupling" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AnalogEdgeStartTriggerCoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<remarks>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogEdgeStartTrigger.Coupling" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgeStartTriggerCoupling.AC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Alternating Current.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgeStartTriggerCoupling.DC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Current.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowStartTriggerCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindowStartTriggerCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the task starts acquiring or generating samples when the signal enters or leaves the window you specify with <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowTop" />.</summary>
<remarks>Specifies whether the task starts acquiring or generating samples when the signal enters or leaves the window you specify with <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.WindowTop" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.Condition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowStartTriggerCondition.EnteringWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="EnteringWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the signal enters the window.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowStartTriggerCondition.LeavingWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="LeavingWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the signal leaves the window.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowStartTriggerCoupling" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindowStartTriggerCoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<remarks>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogWindowStartTrigger.Coupling" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowStartTriggerCoupling.AC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Alternating Current.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowStartTriggerCoupling.DC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Current.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ReferenceTriggerType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="ReferenceTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/triggertypes.html');">type</see> of trigger to use to mark a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">reference</see> point for the measurement.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/triggertypes.html');">type</see> of trigger to use to mark a <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">reference</see> point for the measurement.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ReferenceTrigger.Type" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ReferenceTriggerType.AnalogEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AnalogEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when an analog signal signal crosses a threshold.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReferenceTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger on the rising or falling edge of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReferenceTriggerType.DigitalPattern" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="DigitalPattern" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when digital physical channels match a digital pattern.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReferenceTriggerType.AnalogWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:05 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when an analog signal enters or leaves a range of values. The range is in the units of the measurement.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ReferenceTriggerType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disable triggering for the task.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeReferenceTriggerEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdgeReferenceTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on what edge of a digital pulse the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.</summary>
<remarks>Specifies on what edge of a digital pulse the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalEdgeReferenceTrigger.Edge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeReferenceTriggerEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeReferenceTriggerEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalPatternReferenceTriggerCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalPatternReferenceTriggerCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs when the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Source" /> match or differ from the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Pattern" />.</summary>
<remarks>Specifies whether the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs when the <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">physical channels</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Source" /> match or differ from the <see href="javascript:launchSharedHelp('mxcncpts.chm::/digpattern.html');">digital pattern</see> specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Pattern" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalPatternReferenceTrigger.Condition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalPatternReferenceTriggerCondition.PatternMatches" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="PatternMatches" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the physical channels match the specified pattern.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalPatternReferenceTriggerCondition.PatternDoesNotMatch" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="PatternDoesNotMatch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the physical channels do not match the specified pattern.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogEdgeReferenceTriggerSlope" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which slope of the source signal the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.</summary>
<remarks>Specifies on which slope of the source signal the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Slope" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger on the rising slope of the signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerSlope.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger on the falling slope of the signal.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerCoupling" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogEdgeReferenceTriggerCoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<remarks>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogEdgeReferenceTrigger.Coupling" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerCoupling.AC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Alternating Current.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgeReferenceTriggerCoupling.DC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Current.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindowReferenceTriggerCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs when the source signal enters the window or when it leaves the window. Use <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowTop" /> to specify the window.</summary>
<remarks>Specifies whether the <see href="javascript:launchSharedHelp('mxcncpts.chm::/referenceTrigger.html');">Reference Trigger</see> occurs when the source signal enters the window or when it leaves the window. Use <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.WindowTop" /> to specify the window.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.Condition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCondition.EnteringWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="EnteringWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the signal enters the window.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCondition.LeavingWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="LeavingWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the signal leaves the window.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCoupling" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindowReferenceTriggerCoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<remarks>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogWindowReferenceTrigger.Coupling" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCoupling.AC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Alternating Current.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowReferenceTriggerCoupling.DC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Current.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AdvanceTriggerType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AdvanceTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/analogTriggering.html');">type</see> of trigger to use to advance to the next entry in a switch scan list.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/analogTriggering.html');">type</see> of trigger to use to advance to the next entry in a switch scan list.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AdvanceTrigger.Type" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AdvanceTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Advance to the next entry in a scan list on the rising or falling edge of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AdvanceTriggerType.Software" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Software" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Advance to the next entry in a scan list when you call sending a software trigger.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AdvanceTriggerType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Advance through all entries in the scan list as fast as possible.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeAdvanceTriggerEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdgeAdvanceTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of a digital signal to advance to the next entry in a scan list.</summary>
<remarks>Specifies on which edge of a digital signal to advance to the next entry in a scan list.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalEdgeAdvanceTrigger.Edge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeAdvanceTriggerEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeAdvanceTriggerEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.HandshakeTriggerType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="HandshakeTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see> to use.</summary>
<remarks>Specifies the type of <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see> to use.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.HandshakeTrigger.Type" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.HandshakeTriggerType.Interlocked" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Interlocked" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Use the Handshake Trigger as a control signal for asynchronous handshaking, such as 8255 handshaking.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.HandshakeTriggerType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Start the measurement or generation immediately when you start the task.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.InterlockedHandshakeTriggerAssertedLevel" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="InterlockedHandshakeTriggerAssertedLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the asserted level of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see>.</summary>
<remarks>Specifies the asserted level of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/handtrig.html');">Handshake Trigger</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.InterlockedHandshakeTrigger.AssertedLevel" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.InterlockedHandshakeTriggerAssertedLevel.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.InterlockedHandshakeTriggerAssertedLevel.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.PauseTriggerType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="PauseTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/analogTriggering.html');">type</see> of trigger to use to pause a task.</summary>
<remarks>Specifies the <see href="javascript:launchSharedHelp('mxcncpts.chm::/analogTriggering.html');">type</see> of trigger to use to pause a task.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.PauseTrigger.Type" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.PauseTriggerType.AnalogLevel" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the measurement or generation while an analog signal is above or below a level.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PauseTriggerType.AnalogWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the measurement or generation while an analog signal is either inside or outside of a range of values.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PauseTriggerType.DigitalLevel" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the measurement or generation while a digital signal is at either a high or low state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PauseTriggerType.DigitalPattern" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalPattern" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the measurement or generation while digital physical channels either match or do not match a digital pattern.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.PauseTriggerType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not pause the measurement or generation.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogLevelPauseTriggerCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the task pauses above or below the threshold you specify with <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" />.</summary>
<remarks>Specifies whether the task pauses above or below the threshold you specify with <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Level" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Condition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition.AboveLevel" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AboveLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the measurement or generation while the signal is above the threshold.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogLevelPauseTriggerCondition.BelowLevel" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="BelowLevel" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the measurement or generation while the signal is below the threshold.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogEdgePauseTriggerCoupling" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogEdgePauseTriggerCoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<remarks>Specifies the coupling for the source signal of the trigger if the source is a <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogLevelPauseTrigger.Coupling" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgePauseTriggerCoupling.AC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Alternating Current.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogEdgePauseTriggerCoupling.DC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Current.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowPauseTriggerCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindowPauseTriggerCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the task pauses while the trigger signal is inside or outside the window you specify with <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowTop" />.</summary>
<remarks>Specifies whether the task pauses while the trigger signal is inside or outside the window you specify with <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowBottom" /> and <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.WindowTop" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.Condition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowPauseTriggerCondition.InsideWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="InsideWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the measurement or generation while the trigger is inside the window.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowPauseTriggerCondition.OutsideWindow" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="OutsideWindow" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Pause the measurement or generation while the signal is outside the window.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.AnalogWindowPauseTriggerCoupling" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AnalogWindowPauseTriggerCoupling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the coupling for the source signal of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> if the source is a terminal rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.</summary>
<remarks>Specifies the coupling for the source signal of the <see href="javascript:launchSharedHelp('mxcncpts.chm::/terminal.html');">terminal</see> if the source is a terminal rather than a <see href="javascript:launchSharedHelp('mxcncpts.chm::/Chans.html');">virtual channel</see>.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.AnalogWindowPauseTrigger.Coupling" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowPauseTriggerCoupling.AC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="AC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Alternating Current.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.AnalogWindowPauseTriggerCoupling.DC" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DC" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Direct Current.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalLevelPauseTriggerCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies whether the task pauses while the signal is high or low.</summary>
<remarks>Specifies whether the task pauses while the signal is high or low.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalLevelPauseTrigger.Condition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High state.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalLevelPauseTriggerCondition.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low state.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalPatternPauseTriggerCondition" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalPatternPauseTriggerCondition" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies if the Pause Trigger occurs when the physical channels specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Source" /> match or differ from the digital pattern specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Pattern" />.</summary>
<remarks>Specifies if the Pause Trigger occurs when the physical channels specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Source" /> match or differ from the digital pattern specified with <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Pattern" />.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalPatternPauseTrigger.Condition" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalPatternPauseTriggerCondition.PatternMatches" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="PatternMatches" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the physical channels match the specified pattern.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalPatternPauseTriggerCondition.PatternDoesNotMatch" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="PatternDoesNotMatch" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger when the physical channels do not match the specified pattern.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.ArmStartTriggerType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="ArmStartTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of trigger to use to arm the task for a Start Trigger. If you configure an Arm Start Trigger, the task does not respond to a Start Trigger until the device receives the Arm Start Trigger.</summary>
<remarks>Specifies the type of trigger to use to arm the task for a Start Trigger. If you configure an Arm Start Trigger, the task does not respond to a Start Trigger until the device receives the Arm Start Trigger.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.ArmStartTrigger.Type" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.ArmStartTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger on a rising or falling edge of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.ArmStartTriggerType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disable the trigger.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeArmStartTriggerEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdgeArmStartTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of a digital signal to arm the task for a Start Trigger.</summary>
<remarks>Specifies on which edge of a digital signal to arm the task for a Start Trigger.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalEdgeArmStartTrigger.Edge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeArmStartTriggerEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeArmStartTriggerEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.TriggerSynchronizationType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="TriggerSynchronizationType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the role of the device in a synchronized system. Setting this value to  <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" /> or  <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" /> enables <see href="javascript:launchSharedHelp('mxcncpts.chm::/syncTriggerSkewCorrect.html')">trigger skew correction</see>. If you enable trigger skew correction, set this property to <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" /> on only one device, and set this property to <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" /> on the other devices.</summary>
<remarks>Specifies the role of the device in a synchronized system. Setting this value to  <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" /> or  <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" /> enables <see href="javascript:launchSharedHelp('mxcncpts.chm::/syncTriggerSkewCorrect.html')">trigger skew correction</see>. If you enable trigger skew correction, set this property to <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" /> on only one device, and set this property to <see cref="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" /> on the other devices.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.Triggers.SynchronizationType" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.TriggerSynchronizationType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disables trigger skew correction.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Master" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Master" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device is the source for shared clocks and triggers.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.TriggerSynchronizationType.Slave" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Slave" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Device uses clocks and triggers from the master device.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WatchdogDOExpirationState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="WatchdogDOExpirationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the state to which to set the digital physical channels when the watchdog task expires.  You cannot modify the expiration state of dedicated digital input physical channels.</summary>
<remarks>Specifies the state to which to set the digital physical channels when the watchdog task expires.  You cannot modify the expiration state of dedicated digital input physical channels.  Use this enumeration to get or set the value of NationalInstruments.DAQmx.Watchdog.DOExpirationState.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WatchdogDOExpirationState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Logic high.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WatchdogDOExpirationState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Logic low.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WatchdogDOExpirationState.Tristate" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Tristate" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High-impedance state. You can select this state only on devices with bidirectional lines.  You cannot select this state for dedicated digital output lines. On some devices, you can select this value only for entire ports.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WatchdogDOExpirationState.NoChange" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="NoChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Do not change the state of the lines. On some devices, you can select this value only for entire ports.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WatchdogAOExpirationStateType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="WatchdogAOExpirationStateType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the output type of the analog output physical channels when the watchdog task expires.</summary>
<remarks>Specifies the output type of the analog output physical channels when the watchdog task expires.  Use this enumeration to get or set the value of NationalInstruments.DAQmx.Watchdog.AOExpirationStateType.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WatchdogAOExpirationStateType.Voltage" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Voltage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Voltage output.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WatchdogAOExpirationStateType.Current" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Current" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Current output.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WatchdogAOExpirationStateType.NoChange" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="NoChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Expiration does not affect the port. Do not change the state of any lines in the port, and do not lock the port.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WatchdogCOExpirationState" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="WatchdogCOExpirationState" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the state to set the counter output channel terminal when the watchdog task expires.</summary>
<remarks>Specifies the state to set the counter output channel terminal when the watchdog task expires.  Use this enumeration to get or set the value of NationalInstruments.DAQmx.Watchdog.COExpirationState.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WatchdogCOExpirationState.Low" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Low" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Low logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WatchdogCOExpirationState.High" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="High" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>High logic.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WatchdogCOExpirationState.NoChange" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="NoChange" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Expiration does not affect the state of the counter output. The channels retain their states at the time of the watchdog timer expiration, and no further counter generation runs.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.WatchdogExpirationTriggerType" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="WatchdogExpirationTriggerType" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the type of trigger to use to expire a watchdog task.</summary>
<remarks>Specifies the type of trigger to use to expire a watchdog task.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.WatchdogExpirationTrigger.Type" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.WatchdogExpirationTriggerType.DigitalEdge" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Trigger on a rising or falling edge of a digital signal.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.WatchdogExpirationTriggerType.None" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="None" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Disable the trigger.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTriggerEdge" nitypekind="Enum" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="DigitalEdgeWatchdogExpirationTriggerEdge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies on which edge of a digital signal to expire the watchdog task.</summary>
<remarks>Specifies on which edge of a digital signal to expire the watchdog task.  Use this enumeration to get or set the value of <see cref="P:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTrigger.Edge" />.</remarks></member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTriggerEdge.Rising" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Rising" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Rising edge(s).</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.DigitalEdgeWatchdogExpirationTriggerEdge.Falling" nitypekind="EnumValue" nieditor="GmfTool" niapproved="True" nilastupdated="1/15/2015 4:41:06 PM" niupdatedby="GmfTool" nidisplayname="Falling" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Falling edge(s).</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CounterSingleChannelReader" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterSingleChannelReader" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Contains methods for reading samples from the counter input channel in a task.

</summary>

<threadsafety safety="safe" /></member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterSingleChannelReader" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.CounterSingleChannelReader" /> class to read from the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to read.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for readers to access the samples generated by that task.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadSingleSampleDouble" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double">
      <summary>Reads a single <see cref="T:System.Double" /> sample from a counter task.</summary>
<returns>A <see cref="T:System.Double" /> sample from the task. NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</returns>
<remarks>
Use this method when counter samples are scaled to a floating-point value, such as for frequency and period measurement.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadSingleSampleInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32">
      <summary>Reads a <see cref="T:System.Int32" /> sample from a counter task.</summary>
<returns>An <see cref="T:System.Int32" /> sample from the task.</returns>
<remarks>
Use this method when counter samples are returned unscaled, such as for event counting.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadSingleSampleUInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32">
      <summary>Reads an <see cref="T:System.UInt32" /> sample from a counter task.</summary>
<returns>An <see cref="T:System.UInt32" /> sample from the task.</returns>
<remarks>
Use this method when counter samples are returned unscaled, such as for event counting.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadSingleSamplePulseFrequency" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency">
      <summary>Reads a pulse sample in terms of frequency from a counter task.</summary>
<returns>A pulse sample in terms of frequency from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadSingleSamplePulseTime" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePulseTime" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime">
      <summary>Reads a pulse sample in terms of time from a counter task.</summary>
<returns>A pulse sample in terms of time from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadSingleSamplePulseTicks" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSamplePulseTicks" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks">
      <summary>Reads a pulse sample in terms of ticks from a counter task.</summary>
<returns>A pulse sample in terms of ticks from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadMultiSampleDouble(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.Double[]">
      <summary>Reads one or more <see cref="T:System.Double" /> samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of <see cref="T:System.Double" /> samples from the task. Each element in the array corresponds to a sample from the channel.
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</returns>
<remarks>
<para>
Use this method when counter samples are scaled to a floating-point value, such as for frequency and period measurement.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadMultiSampleInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>Reads one or more <see cref="T:System.Int32" /> samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of <see cref="T:System.Int32" /> samples from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadMultiSampleUInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>Reads one or more <see cref="T:System.UInt32" /> samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of <see cref="T:System.UInt32" /> samples from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadMultiSamplePulseFrequency(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>Reads one or more pulse samples in terms of frequency from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of pulse samples in terms of frequency from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadMultiSamplePulseTime(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>Reads one or more pulse samples in terms of time from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of pulse samples in terms of time from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ReadMultiSamplePulseTicks(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples" niparametertypes="System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>Reads one or more pulse samples in terms of ticks from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 1D array of pulse samples in terms of ticks from the task. Each element of the array corresponds to a sample from the task.</returns>
<remarks>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSampleDouble(System.Int32,System.Double[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Double[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Reads one or more <see cref="T:System.Double" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list></exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSampleDouble(System.Int32,System.Double[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Double[],out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Reads one or more <see cref="T:System.Double" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSampleInt32(System.Int32,System.Int32[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Int32[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>
Reads one or more <see cref="T:System.Int32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>	A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSampleInt32(System.Int32,System.Int32[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.Int32[],out System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>
Reads one or more <see cref="T:System.Int32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>	A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSampleUInt32(System.Int32,System.UInt32[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.UInt32[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>
Reads one or more <see cref="T:System.UInt32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSampleUInt32(System.Int32,System.UInt32[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref System.UInt32[],out System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>
Reads one or more <see cref="T:System.UInt32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,NationalInstruments.DAQmx.CIDataFrequency[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataFrequency[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,NationalInstruments.DAQmx.CIDataFrequency[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataFrequency[],out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSamplePulseTime(System.Int32,NationalInstruments.DAQmx.CIDataTime[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataTime[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>	A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSamplePulseTime(System.Int32,NationalInstruments.DAQmx.CIDataTime[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataTime[],out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSamplePulseTicks(System.Int32,NationalInstruments.DAQmx.CIDataTicks[]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,policy,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataTicks[],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.MemoryOptimizedReadMultiSamplePulseTicks(System.Int32,NationalInstruments.DAQmx.CIDataTicks[]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,data,actualNumberOfSamplesRead" niparametertypes="System.Int32,ref NationalInstruments.DAQmx.CIDataTicks[],out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>
Reads one or more <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.
</summary>
<param name="numberOfSamples">The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns> A reference to the <paramref name="data" /> parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.ArgumentException"><list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>
</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a <see cref="T:System.Double" /> sample from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are scaled to a floating-point value, such as for frequency and period measurement.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleDouble(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A <see cref="T:System.Double" /> sample from the task. NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a 32-bit integer sample from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>An <see cref="T:System.Int32" /> sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a <see cref="T:System.UInt32" />  sample from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A <see cref="T:System.UInt32" /> sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadSingleSamplePulseFrequency(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single pulse sample in terms of frequency from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseFrequency(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseFrequency(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseFrequency(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseFrequency(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseFrequency(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseFrequency(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseFrequency(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A pulse sample in terms of frequency from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadSingleSamplePulseTime(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePulseTime" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single pulse sample in terms of time from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTime(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseTime(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseTime(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePulseTime" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTime(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTime(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseTime(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseTime(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A pulse sample in terms of time from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadSingleSamplePulseTicks(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSamplePulseTicks" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single pulse sample in terms of ticks from a counter task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTicks(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseTicks(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseTicks(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSamplePulseTicks" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTicks(System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterReader.BeginReadSingleSamplePulseTicks(System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseTicks(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadSingleSamplePulseTicks(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A pulse sample in terms of ticks from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.AnalogMultiChannelReader.BeginReadMultiSample(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see cref="T:System.Double" /> samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are scaled to a floating-point value, such as for frequency and period measurement.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleDouble(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of <see cref="T:System.Double" /> samples from the task. Each element in the array corresponds to a sample from the channel.
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more  <see cref="T:System.Int32" /> samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of <see cref="T:System.Int32" /> samples from the task. Each element of the array corresponds to a sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see cref="T:System.UInt32" /> samples from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
Use this method when counter samples are returned unscaled, such as for event counting.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<returns>A 1D array of <see cref="T:System.UInt32" /> samples from the task. Each element of the array corresponds to a sample from the task.</returns>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more pulse samples in terms of frequency from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseFrequency(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseFrequency(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of pulse samples in terms of frequency from the task. Each element in the array corresponds to a sample from the channel.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseFrequency(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseFrequency(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more pulse samples in terms of time from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseTime(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseTime(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of pulse samples in terms of time from the task. Each element in the array corresponds to a sample from the channel.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseTime(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseTime(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more pulse samples in terms of ticks from a counter task.</summary>
<param name="numberOfSamples">
The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseTicks(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseTicks(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of pulse samples in terms of ticks from the task. Each element in the array corresponds to a sample from the channel.</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseTicks(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndReadMultiSamplePulseTicks(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:System.Double" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback this is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:System.Double" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Int32[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:System.Int32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Int32[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:System.Int32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>
</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.UInt32[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous memory-optimized read of one or more <see cref="T:System.UInt32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete. </param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" />
if you do not need to pass any additional information to the callback. </param>
<param name="data">An initialized 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.UInt32[]" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous memory-optimized read of one or more <see cref="T:System.UInt32" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete. </param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" />
if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseFrequency(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks></member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" /> if you do not need to pass any additional information to the callback. </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseFrequency(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task. </summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" />
if you do not need to pass any additional information to the callback. </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseTime(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" />
in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.	</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" /> if you do not need to pass any additional information to the callback. </param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseTime(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" /> in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify 	<see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<param name="policy">Dictates the reallocation behavior of the <paramref name="data" />. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
When performing an asynchronous memory-optimized read, the size of the data buffer dynamically increases if the number of samples  read exceeds the existing buffer and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" />  is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />. 
This results in more efficient memory allocation when performing multiple reads with a continuous counter input task. 
An <see cref="T:System.ArgumentException" /> is thrown if the buffer is not capable of holding the data and <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.DoNotReallocate" />.
</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseTicks(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="numberOfSamples,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous memory-optimized read of one or more <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples from a single <see cref="T:NationalInstruments.DAQmx.CIChannel" />
in a task.

</summary>
<param name="numberOfSamples"> The number of samples to read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="numberOfSamples" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.   </param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify 	<see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify	<see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<param name="data">An initialized 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.</param>
<returns>
An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.
</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from  the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous counter input  task. The memory allocation for the buffer is available to a maximum of 2 GB.

</para>
<para>
To get the read data or any exceptions that occurred during an asynchronous read initiated with this method, call <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseTicks(System.IAsyncResult,System.Int32@)" /> with the returned <see cref="T:System.IAsyncResult" />.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<para>
Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.
</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.Double[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[])" />.</description></item>
</list> 
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.Int32[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[])" />.</description></item>
</list>  
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.UInt32[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[])" />.</description></item>
</list>  
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseFrequency(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSamplePulseFrequency" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataFrequency[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataFrequency" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseFrequency(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataFrequency[])" />.</description></item>
</list>   
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseTime(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSamplePulseTime" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTime[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTime" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTime(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTime[])" />.</description></item>
</list> 
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.EndMemoryOptimizedReadMultiSamplePulseTicks(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSamplePulseTicks" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="NationalInstruments.DAQmx.CIDataTicks[]">
      <summary>
Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[])" /> and retrieves the read samples.
</summary>
<param name="asyncResult">
An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[])" />.</param>
<param name="actualNumberOfSamplesRead">The actual number of samples read. This is useful when the reading operation yields fewer or more samples than the actual length of <paramref name="data" />.</param>
<returns>
A 1D array of <see cref="T:NationalInstruments.DAQmx.CIDataTicks" /> samples that contains the read data. Each element in the array corresponds to a sample from the channel.
</returns>
<remarks>
<para>
If you call this method before the asynchronous read is complete, it waits for the read to complete before returning.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to.
</para>
<note type="note">
Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterSingleChannelReader.BeginMemoryOptimizedReadMultiSamplePulseTicks(System.Int32,System.AsyncCallback,System.Object,NationalInstruments.DAQmx.CIDataTicks[])" />.</description></item>
</list>  
</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterSingleChannelReader.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CounterSingleChannelReader.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>

</member>
    <member name="P:NationalInstruments.DAQmx.CounterSingleChannelReader.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>

</member>
    <member name="T:NationalInstruments.DAQmx.CounterMultiChannelReader" nitypekind="Class" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterMultiChannelReader" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Contains methods for reading samples from one or more counter input channels in a task.</summary>

<threadsafety safety="safe" /></member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.#ctor(NationalInstruments.DAQmx.DaqStream)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CounterMultiChannelReader" nihasget="0" nihasset="0" niparameters="stream" niparametertypes="NationalInstruments.DAQmx.DaqStream" nireturnvaluetype="">
      <summary>Creates a new instance of the <see cref="T:NationalInstruments.DAQmx.CounterMultiChannelReader" /> class to read from the specified <see cref="T:NationalInstruments.DAQmx.DaqStream" />.</summary>
<param name="stream">The <see cref="T:NationalInstruments.DAQmx.DaqStream" /> to read.</param>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>Each <see cref="T:NationalInstruments.DAQmx.Task" /> object contains a <see cref="P:NationalInstruments.DAQmx.Task.Stream" /> property that serves as the connection point for readers to access the samples generated by that task. 
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks></member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.ReadSingleSampleDouble" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Double[]">
      <summary>Reads a single <see cref="T:System.Double" /> sample from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<returns>A 1D array of <see cref="T:System.Double" /> samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.ReadSingleSampleInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.Int32[]">
      <summary>Reads a single <see cref="T:System.Int32" /> sample from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<returns>A 1D array of <see cref="T:System.Int32" /> samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.ReadSingleSampleUInt32" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.UInt32[]">
      <summary>Reads a single <see cref="T:System.UInt32" /> sample from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<returns>A 1D array of <see cref="T:System.UInt32" /> samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para></remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.ReadMultiSampleDouble(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>Reads one or more <see cref="T:System.Double" /> samples from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of <see cref="T:System.Double" /> samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.ReadMultiSampleInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.Int32[,]">
      <summary>Reads one or more <see cref="T:System.Int32" /> samples from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of <see cref="T:System.Int32" /> samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.ReadMultiSampleUInt32(System.Int32)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel" niparametertypes="System.Int32" nireturnvaluetype="System.UInt32[,]">
      <summary>Reads one or more <see cref="T:System.UInt32" /> samples from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<returns>A 2D array of <see cref="T:System.UInt32" /> samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.MemoryOptimizedReadMultiSampleDouble(System.Int32,System.Double[0:,0:]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,policy,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.Double[,],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>
Reads one or more <see cref="T:System.Double" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel"> The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  
		 </param>
<param name="data">An initialized 2D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>A reference to the <paramref name="data" /> parameter containing samples from the task.</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">

<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>



					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.MemoryOptimizedReadMultiSampleDouble(System.Int32,System.Double[0:,0:]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.Double[,],out System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>
Reads one or more <see cref="T:System.Double" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel"> The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  
		 </param>
<param name="data">An initialized 2D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns> 
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">

<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>



					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.MemoryOptimizedReadMultiSampleInt32(System.Int32,System.Int32[0:,0:]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,policy,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.Int32[,],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.Int32[,]">
      <summary>
Reads one or more <see cref="T:System.Int32" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel"> The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  
		 </param>
<param name="data">An initialized 2D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns> 
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">

<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>



					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.MemoryOptimizedReadMultiSampleInt32(System.Int32,System.Int32[0:,0:]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.Int32[,],out System.Int32" nireturnvaluetype="System.Int32[,]">
      <summary>
Reads one or more <see cref="T:System.Int32" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel"> The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  
		 </param>
<param name="data">An initialized 2D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>

<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns> 
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">

<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>



					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>




</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.MemoryOptimizedReadMultiSampleUInt32(System.Int32,System.UInt32[0:,0:]@,NationalInstruments.DAQmx.ReallocationPolicy,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,policy,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.UInt32[,],NationalInstruments.DAQmx.ReallocationPolicy,out System.Int32" nireturnvaluetype="System.UInt32[,]">
      <summary>
Reads one or more <see cref="T:System.UInt32" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel"> The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  
		 </param>
<param name="data">An initialized 2D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns> 
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">

<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>



					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>




</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.MemoryOptimizedReadMultiSampleUInt32(System.Int32,System.UInt32[0:,0:]@,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="MemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,data,actualNumberOfSamplesPerChannelRead" niparametertypes="System.Int32,ref System.UInt32[,],out System.Int32" nireturnvaluetype="System.UInt32[,]">
      <summary>
Reads one or more <see cref="T:System.UInt32" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel"> The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  
		 </param>
<param name="data">An initialized 2D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>

<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns> 
					A reference to the
					<paramref name="data" />
					parameter containing samples from the task.
				</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>
<exception cref="T:System.ArgumentException">

<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; or
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples.</description></item>
</list>



					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>





</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single <see cref="T:System.Double" /> sample from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 


</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleDouble(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" /> and retrieves the read sample.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of <see cref="T:System.Double" /> samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleDouble(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleDouble(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single <see cref="T:System.Int32" />  sample from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 


</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" /> and retrieves the read sample.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of <see cref="T:System.Int32" /> samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleInt32(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="callback,state" niparametertypes="System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of a single <see cref="T:System.UInt32" />  sample from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with 

<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> with the returned 
<see cref="T:System.IAsyncResult" />.</para>
<para>NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 


</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadSingleSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32[]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" /> and retrieves the read sample.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" />.</param>
<returns>A 1D array of <see cref="T:System.UInt32" /> samples from the task. Each element in the array corresponds to a channel in the task.  The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadSingleSampleUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to 
<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadSingleSampleUInt32(System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see cref="T:System.Double" /> samples from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with 

<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" />, call 

<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 


</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleDouble(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Double[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" /> 
and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" /> .</param>
<returns>A 2D array of <see cref="T:System.Double" /> samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleDouble(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see cref="T:System.Int32" /> samples from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with 


<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 


</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.Int32[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" /> .</param>
<returns>A 2D array of <see cref="T:System.Int32" />  samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state" niparametertypes="System.Int32,System.AsyncCallback,System.Object" nireturnvaluetype="System.IAsyncResult">
      <summary>Begins an asynchronous read of one or more <see cref="T:System.UInt32" /> samples from one or more <see cref="T:NationalInstruments.DAQmx.CIChannel" /> objects in a task.</summary>
<param name="samplesPerChannel">
The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  

</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.</returns>
<remarks>
<para>To get the read data or any exceptions that occurred during an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" />, call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> with the returned <see cref="T:System.IAsyncResult" />.</para>
<para>
NI-DAQmx scales the read data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>

NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 


</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleUInt32(System.IAsyncResult)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult" niparametertypes="System.IAsyncResult" nireturnvaluetype="System.UInt32[,]">
      <summary>Handles the end of an asynchronous read initiated with <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" /> and retrieves the read samples.</summary>
<param name="asyncResult">An <see cref="T:System.IAsyncResult" /> that represents an asynchronous call started by calling <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" /> .</param>
<returns>A 2D array of <see cref="T:System.UInt32" />  samples from the task. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in <see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
</returns>
<remarks>
<para>If you call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> before the asynchronous read represented by the provided <see cref="T:System.IAsyncResult" /> is complete, <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndReadMultiSampleUInt32(System.IAsyncResult)" /> waits for the read to complete before returning.</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the <see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the <see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" /> property on the task you are reading from or writing to. 
</para>
<note type="note">Refer to <see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see> for additional information.
</note>
</remarks>
<exception cref="T:System.ArgumentException">
<paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object)" />.</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[,],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous  read of one or more <see cref="T:System.Double" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify <see langword="null" /> if you do not want a callback when the read is complete.				</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.				</param>
<param name="data">An initialized 2D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call 

<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" />

						with the returned
						<see cref="T:System.IAsyncResult" />.
						
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Double[,]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous  read of one or more <see cref="T:System.Double" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="callback">
					An optional asynchronous callback that is called when the read is complete.  Specify
					<see langword="null" />
					if you do not want a callback when the read is complete.
				</param>
<param name="state">
					A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify
					<see langword="null" />
					if you do not need to pass any additional information to the callback.
				</param>
<param name="data">An initialized 2D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[0:,0:],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Int32[,],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous  read of one or more <see cref="T:System.Int32" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify<see langword="null" />if you do not want a callback when the read is complete.				</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify<see langword="null" />if you do not need to pass any additional information to the callback.				</param>
<param name="data">An initialized 2D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call 

<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
						
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.Int32[,]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous  read of one or more <see cref="T:System.Int32" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="callback">
					An optional asynchronous callback that is called when the read is complete.  Specify
					<see langword="null" />
					if you do not want a callback when the read is complete.
				</param>
<param name="state">
					A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify
					<see langword="null" />
					if you do not need to pass any additional information to the callback.
				</param>
<param name="data">An initialized 2D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call 


<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[0:,0:],NationalInstruments.DAQmx.ReallocationPolicy)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data,policy" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.UInt32[,],NationalInstruments.DAQmx.ReallocationPolicy" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous  read of one or more <see cref="T:System.UInt32" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="callback">An optional asynchronous callback that is called when the read is complete.  Specify<see langword="null" />if you do not want a callback when the read is complete.				</param>
<param name="state">A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify <see langword="null" /> if you do not need to pass any additional information to the callback.				</param>
<param name="data">An initialized 2D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<param name="policy">Dictates the reallocation behavior of the read operation. Refer to <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> for more information.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
						
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[0:,0:])" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="BeginMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="samplesPerChannel,callback,state,data" niparametertypes="System.Int32,System.AsyncCallback,System.Object,System.UInt32[,]" nireturnvaluetype="System.IAsyncResult">
      <summary>
Begins an asynchronous  read of one or more <see cref="T:System.UInt32" /> samples from one or more
					<see cref="T:NationalInstruments.DAQmx.CIChannel" />
					objects in a task.

</summary>
<param name="samplesPerChannel">The number of samples to read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a continuous acquisition, the read retrieves all samples available in the buffer at the time of the read. If you set <paramref name="samplesPerChannel" /> to <entity value="ndash" />1 for a finite acquisition, the read behavior is set by the <see cref="P:NationalInstruments.DAQmx.DaqStream.ReadAllAvailableSamples" /> property of the <see cref="T:NationalInstruments.DAQmx.DaqStream" /> you are reading from.  				</param>
<param name="callback">
					An optional asynchronous callback that is called when the read is complete.  Specify
					<see langword="null" />
					if you do not want a callback when the read is complete.
				</param>
<param name="state">
					A user-provided object that distinguishes this asynchronous read request from other requests.  Use this parameter to provide information to the callback.  Specify
					<see langword="null" />
					if you do not need to pass any additional information to the callback.
				</param>
<param name="data">An initialized 2D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.</param>
<returns>An <see cref="T:System.IAsyncResult" /> that represents the asynchronous call.  	</returns>
<remarks>
<para>
If the data buffer is large enough to hold the number of samples requested, this overload attempts to reuse existing memory allocated from the array to acquire data.  This results in more efficient memory allocation when performing multiple reads with a continuous analog input task.
</para>
<para>
						To get the read data or any exceptions that occurred during an asynchronous read initiated with
						this method, call <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" />
						with the returned
						<see cref="T:System.IAsyncResult" />.
					</para>
<para>
NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.

</para>
<para>
NI-DAQmx read and write methods time out after the amount of time specified by the
<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
property on the task you are reading from or writing to.
</para>
<para>Refer to <see keyword="ChooseDAQReaderWriter" keywordType="mstudio">Choosing an NI-DAQmx Reader or Writer</see> for more information about memory limitations in NI-DAQmx read methods.</para>
</remarks>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleDouble(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleDouble" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesPerChannelRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.Double[,]">
      <summary>
					Handles the end of an asynchronous read initiated with
					<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" />
					and retrieves the read samples.
				</summary>
<param name="asyncResult">
					An
					<see cref="T:System.IAsyncResult" />
					that represents an asynchronous call started by calling
					<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" />.
					
				</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A 2D array of <see cref="T:System.Double" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
				</returns>
<remarks>
<para>
						If you call
						this method 
						before the asynchronous read
						<see cref="T:System.IAsyncResult" />
						is complete,
						it 
						waits for the read to complete before returning.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleDouble(System.Int32,System.AsyncCallback,System.Object,System.Double[0:,0:])" />.</description></item>
</list>
					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>

</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleInt32(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleInt32" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesPerChannelRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.Int32[,]">
      <summary>
					Handles the end of an asynchronous read initiated with
					<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[0:,0:])" />
					and retrieves the read samples.
				</summary>
<param name="asyncResult">
					An
					<see cref="T:System.IAsyncResult" />
					that represents an asynchronous call started by calling
					<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[0:,0:])" />.
					
				</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A 2D array of <see cref="T:System.Int32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
				</returns>
<remarks>
<para>
						If you call
						this method 
						before the asynchronous read
						<see cref="T:System.IAsyncResult" />
						is complete,
						it 
						waits for the read to complete before returning.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleInt32(System.Int32,System.AsyncCallback,System.Object,System.Int32[0:,0:])" />.</description></item>
</list>
					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>


</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.EndMemoryOptimizedReadMultiSampleUInt32(System.IAsyncResult,System.Int32@)" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="EndMemoryOptimizedReadMultiSampleUInt32" nihasget="0" nihasset="0" niparameters="asyncResult,actualNumberOfSamplesPerChannelRead" niparametertypes="System.IAsyncResult,out System.Int32" nireturnvaluetype="System.UInt32[,]">
      <summary>
					Handles the end of an asynchronous read initiated with
					<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[0:,0:])" />
					and retrieves the read samples.
				</summary>
<param name="asyncResult">
					An
					<see cref="T:System.IAsyncResult" />
					that represents an asynchronous call started by calling
					<see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[0:,0:])" />.
					
				</param>
<param name="actualNumberOfSamplesPerChannelRead">The actual number of samples per channel read. This is useful when the reading operation yields fewer samples than the actual length of <paramref name="data" />.</param>
<returns>
					A 2D array of <see cref="T:System.UInt32" /> samples that contains the read data. Each element in the first dimension of the array corresponds to a channel in the task. Each element in the second dimension of the array corresponds to a sample from each of the channels. The order of the channels in the array corresponds to the order in which you add the channels to the task or to the order of the channels you specify in
<see cref="P:NationalInstruments.DAQmx.DaqStream.ChannelsToRead" />.
				</returns>
<remarks>
<para>
						If you call
						this method 
						before the asynchronous read
						<see cref="T:System.IAsyncResult" />
						is complete,
						it 
						waits for the read to complete before returning.
					</para>
<para>
						NI-DAQmx scales the returned data to the units of the measurement, including any custom scaling you apply to the channel. You specify these units with the create channel methods or the
						<see href="javascript:LaunchHelp('taskconfig.chm::/DAQ_Config_Asst_Help.html')">DAQ Assistant</see>.
						
					</para>
<para>
						NI-DAQmx read and write methods time out after the amount of time specified by the
						<see cref="P:NationalInstruments.DAQmx.DaqStream.Timeout" />
						property on the task you are reading from or writing to.
					</para>
<note type="note">
						Refer to
						<see keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</see>
						for additional information.
					</note>
</remarks>
<exception cref="T:System.ArgumentException">
<list type="number"><item><description>
If <paramref name="data" /> is <see langword="null" /> or is uninitialized;
</description></item>
<item><description>
If the first dimension of the <paramref name="data" /> does not match the number of channels; 
</description></item>
<item><description>
If <see cref="T:NationalInstruments.DAQmx.ReallocationPolicy" /> is not <see cref="F:NationalInstruments.DAQmx.ReallocationPolicy.ToGrow" />, and the <paramref name="data" /> is not capable of holding the required number of samples; or</description></item>
<item><description>For asynchronous reads, if <paramref name="asyncResult" /> is <see langword="null" /> or is not an instance of <see cref="T:System.IAsyncResult" /> returned from 
a call to <see cref="M:NationalInstruments.DAQmx.CounterMultiChannelReader.BeginMemoryOptimizedReadMultiSampleUInt32(System.Int32,System.AsyncCallback,System.Object,System.UInt32[0:,0:])" />.</description></item>
</list>
					
				</exception>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error during the asynchronous operation.</exception>
<exception cref="T:System.OutOfMemoryException">There is not enough memory to carry out this operation.</exception>
<seealso keyword="AsynchReadWriteDAQNET" keywordType="mstudio">Asynchronously Reading and Writing with the NI-DAQmx .NET Class Library</seealso>



</member>
    <member name="M:NationalInstruments.DAQmx.CounterMultiChannelReader.ToString" nitypekind="Method" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="ToString" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="System.String">
      <summary>Returns a string representation of the object.</summary>
<returns>A string representation of the object.</returns>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
Overrides <see cref="M:System.Object.ToString" />. 
</remarks>

</member>
    <member name="P:NationalInstruments.DAQmx.CounterMultiChannelReader.SynchronizeCallbacks" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizeCallbacks" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.Boolean">
      <summary>Specifies how events and callback delegates are invoked.
</summary>
<value>
<see langword="true" /> if events and callbacks are invoked through
<see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> or
<see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)" />.  Otherwise, events
and callbacks are invoked directly.  The default value is <see langword="true" />.
</value>
<remarks>
In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
Therefore, you must take special care when accessing objects that have thread affinity, such as UI controls, 
from these callbacks and event handlers. For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</remarks>
<seealso keyword="ReadWriteDAQProgrammatic" keywordType="mstudio">Reading and Writing with the NI-DAQmx .NET Library</seealso>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>

</member>
    <member name="P:NationalInstruments.DAQmx.CounterMultiChannelReader.SynchronizingObject" nitypekind="Property" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="SynchronizingObject" nihasget="1" nihasset="1" niparameters="" niparametertypes="" nireturnvaluetype="System.ComponentModel.ISynchronizeInvoke">
      <summary>Gets or sets the object that marshals event-handler and callback calls.</summary>
<value>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> representing the object that marshals the event-handler and callback calls. The default value is <see langword="null" />. 
</value>
<exception cref="T:NationalInstruments.DAQmx.DaqException">The NI-DAQmx driver returned an error.</exception>
<remarks>
When the value of this property is <see langword="null" />, event-handler and callback calls are raised in the default manner. This behavior could mean that the calls happen from a thread other than the main thread. Avoid this behavior by setting this property to an object that implements <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, such as a <see cref="T:System.Windows.Forms.Control" /> or <see cref="T:System.Windows.Forms.Form" />. 
<note type="note">
For more information, refer to 
<see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>. 
</note></remarks>
<seealso keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</seealso>

</member>
    <member name="T:NationalInstruments.DAQmx.CalibrationMode4339" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CalibrationMode4339" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Specifies which measurements to use to calibrate an NI 4339 device.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CalibrationMode4339.PressureBridge" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="PressureBridge" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Pressure measurement using a bridge-based sensor.
</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CalibrationMode4339.Voltage" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Voltage" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>
Voltage measurement.
</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration4463" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CalibrationInputTerminalConfiguration4463" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration for the channel to calibrate on an NI PXIe 4463 device. </summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration4463.Pseudodifferential" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Pseudodifferential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A pseudodifferential input terminal configuration.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration4463.Differential" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A differential input terminal configuration.</summary>
</member>
    <member name="T:NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration9209" nitypekind="Enum" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="CalibrationInputTerminalConfiguration9209" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>Specifies the input terminal configuration for the channel to calibrate on an NI 9209 device. </summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration9209.Differential" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Differential" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A differential input terminal configuration.</summary>
</member>
    <member name="F:NationalInstruments.DAQmx.CalibrationInputTerminalConfiguration9209.Rse" nitypekind="EnumValue" nieditor="Sebastius" niapproved="True" nilastupdated="2/12/2015 7:51:13 AM" niupdatedby="Sebastius" nidisplayname="Rse" nihasget="0" nihasset="0" niparameters="" niparametertypes="" nireturnvaluetype="">
      <summary>A referenced single-ended input terminal configuration.
</summary>
</member>
  </members>
</doc>